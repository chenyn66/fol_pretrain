{"prompt":"∀x (Drinks(x) → Dependent(x)) ->","completion":" All people who regularly drink coffee are dependent on caffeine.\n"}
{"prompt":"∀x (Drinks(x) ⊕ Jokes(x)) ->","completion":" People either regularly drink coffee or joke about being addicted to caffeine.\n"}
{"prompt":"∀x (Jokes(x) → ¬Unaware(x)) ->","completion":" No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.\n"}
{"prompt":"(Student(rina) ∧ Unaware(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina)) ->","completion":" Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.\n"}
{"prompt":"¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependent(rina) ∨ Student(rina)) ->","completion":" If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. \n"}
{"prompt":"Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque) ->","completion":" Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.\n"}
{"prompt":"∀x (ChoralConductor(x) → Musician(x)) ->","completion":" Any choral conductor is a musician.\n"}
{"prompt":"∃x (Musician(x) → Love(x, music)) ->","completion":" Some musicians love music.\n"}
{"prompt":"Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946) ->","completion":" Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.\n"}
{"prompt":"∀x  (Eel (x)→  Fish (x)) ->","completion":" All eels are fish. \n"}
{"prompt":"∀x  (Fish (x)→ ¬ Plant (x)) ->","completion":" No fish are plants. \n"}
{"prompt":"∀x ( Plant (x) ∨  Animal (x)) ->","completion":" A thing is either a plant or animal.\n"}
{"prompt":"∀x  (Breathe (x)→ ¬ Paper (x)) ->","completion":" Nothing that breathes is paper. \n"}
{"prompt":"∀x  (Animal (x)→  Breathe (x)) ->","completion":" All animals breathe.\n"}
{"prompt":" Eel (seaEel) ⊕ Plant (seaEel) → Eel (seaEel) ∨ Animal (seaEel)  ->","completion":" If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal.\n"}
{"prompt":"∀x (Blake(x) → Building(x)) ->","completion":" The Blake McFall Company Building is a commercial warehouse listed on the National Register of Historic Places.\n"}
{"prompt":"∀x (Blake(x) → Historic(x, year1990)) ->","completion":" The Blake McFall Company Building was added to the National Register of Historic Places in 1990.\n"}
{"prompt":"∀x (Emmet(x) → Building(x) ∧ FiveStory(x) ∧ Locate(x, portland)) ->","completion":" The Emmet Building is a five-story building in Portland, Oregon.\n"}
{"prompt":"∀x (Emmet(x) → Construct(x, year1915)) ->","completion":" The Emmet Building was built in 1915.\n"}
{"prompt":"∀x (Emmet(x) ↔ Blake(x)) ->","completion":" The Emmet Building is another name for the Blake McFall Company Building.\n"}
{"prompt":"∃x (Emmet(x) ∧ Work(john, x)) ->","completion":" John works at the Emmet Building.\n"}
{"prompt":"BritishPolitician(williamdickinson) ∧ SatInHouseOfCommons(williamdickinson) ->","completion":" William Dickinson was a British politician who sat in the House of Commons\n"}
{"prompt":"Attended(williamdickinson, westminster) ∧ Highschool(westminster) ∧ Attended(williamdickinson, universityofedinburgh) ->","completion":" William Dickinson attended Westminster school for high school and then the University of Edinburgh.\n"}
{"prompt":"LocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh) ->","completion":" The University of Edinburgh is a university located in the United Kingdom.\n"}
{"prompt":"Supported(williamdickinson, portlandwhigs) ->","completion":" William Dickinson supported the Portland Whigs.\n"}
{"prompt":"∀x (Supported(x, portlandwhigs) → ¬SeatInParliament(x)) ->","completion":" People who supported the Portland Whigs did not get a seat in the Parliament.\n"}
{"prompt":"UniversalLanguage(languageA) ->","completion":" LanguageA is a universal language\n"}
{"prompt":"∀x ∀y (∃z (Know(x, z) ∧ Know(y, z) ∧ UniversalLanguage(z)) → Communicate(x, y)) ->","completion":" If a universal language exists, then for every two people if they both know the same universal language they can communicate.\n"}
{"prompt":"Know(katya, languageA) ->","completion":" Katya cannot communicate with Danil.\n"}
{"prompt":"¬Communicate(katya, danil) ->","completion":" Katya knows LanguageA. \n"}
{"prompt":"∀x (AMC(x) → ThreeMovies(x)) ->","completion":" All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. \n"}
{"prompt":"∃x (CinemaEveryWeek(x)) ->","completion":" Some customers go to cinemas every week\n"}
{"prompt":"∀x (AMC(x) ∨ HBO(x)) ->","completion":" Customers either subscribe to AMC service or HBO service. \n"}
{"prompt":"∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x)) ->","completion":" Customers who prefer TV series more and will not watch TV series in cinemas.\n"}
{"prompt":"∀x (HBO(x) → PreferTVSeries(x)) ->","completion":" All customers who subscribe to HBO services prefer TV series to movies. \n"}
{"prompt":"WatchTVInCinema(james) ->","completion":" James watches TV series in cinemas. \n"}
{"prompt":"∀x ∀y (LaLiga(x) ∧ LaLiga(y) ∧ MorePoints(x, y) → HigherRank(x, y)) ->","completion":" A La Liga soccer team ranks higher than another if it receives more points.\n"}
{"prompt":"∀x ∀y (LaLiga(x) ∧ LaLiga(y) ∧ ¬MorePoints(x, y) ∧ ¬MorePoints(y, x) ∧ MorePointsInGameBetween(x, y) → HigherRank(x, y)) ->","completion":" If two La Liga soccer teams recieve the same points, the team which recieves more points from the games between the two teams ranks higher.\n"}
{"prompt":"LaLiga(realMadrid) ∧ LaLiga(barcelona) ->","completion":" Real Madrid and Barcelona are both La Liga soccer teams.\n"}
{"prompt":"MorePoints(realMadrid, barcelona) ->","completion":" In La Liga 2021-2022, Real Madrid recieves 86 points and Barcelon recieves 73 points.\n"}
{"prompt":"¬MorePointsInGameBetween(realMadrid, barcelona) ∧ ¬MorePointsInGameBetween(barcelona, realMadrid) ->","completion":" In La Liga 2021-2022, Real Madrid and Barcelona both recieve 3 points from the games between them.\n"}
{"prompt":"Neighbourhoodin(lawtonPark, seattle) ->","completion":" Lawton Park is a neighbourhood in Seattle. \n"}
{"prompt":"∀x (Citizenof(x, lawtonPark) → Usezipcode(x, number98199)) ->","completion":" All citizens of Lawton Park use the zip code 98199. \n"}
{"prompt":"Citizenof(tom, lawtonPark) ->","completion":" Tom is a citizen of Lawton Park.\n"}
{"prompt":"Usezipcode(daniel, number98199) ->","completion":" Daniel uses the zip code 98199. \n"}
{"prompt":"∀x (IsLegislator(x) ∧ StealsFunds(x) → Suspended(x)) ->","completion":" If a legislator is found guilty of stealing government funds, they will be suspended from office.\n"}
{"prompt":"IsLegislator(tiffanyTAlston) ->","completion":" Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.\n"}
{"prompt":"StealsFunds(tiffanyTAlston) ->","completion":" Tiffany T. Alston was found guilty of stealing government funds in 2012.\n"}
{"prompt":"∃x ∃y (Fish(x) → Sting(x,y)) ->","completion":" Some fish may sting.\n"}
{"prompt":"Fish(stonefish) ->","completion":" Stonefish is a fish.\n"}
{"prompt":"∀x (StepOn(stonefish, x) → Sting(stonefish, x)) ->","completion":" It stings to step on a stonefish.\n"}
{"prompt":"∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x)) ->","completion":" Stonefish stings cause death if not treated.\n"}
{"prompt":"∀x (Sting(stonefish, x) ∧ (ApplyHeat(x) ∨ UseAntivenom(x)) → Treated(x)) ->","completion":" To treat stonefish stings, apply heat to the affected area or use an antivenom.\n"}
{"prompt":"∃x (LG(x) ∧ TypeC(x)) ->","completion":" Some monitors produced by LG have a type-c port.\n"}
{"prompt":"∀x (TypeC(x) → ¬AOC(x)) ->","completion":" If the monitor has a type-c port, then it is not produced by AOC.\n"}
{"prompt":"∀x (Library(x) → AOC(x)) ->","completion":" All monitors in the library are produced by AOC. \n"}
{"prompt":"Library(l-2021) ⊕ TypeC(l-2021)  ->","completion":" L-2021 is either in the library or has a type-c port.\n"}
{"prompt":"¬(AOC(l-2021) ⊕ LG(l-2021)) ->","completion":" L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG.\n"}
{"prompt":"∀x (Meat(x) ∨ Vegetarian(x)) ->","completion":" People eat meat regularly or are vegetation.\n"}
{"prompt":"∀x (Meat(x) → Hamburgers(x)) ->","completion":" If people eat meat regularly, then they enjoy eating hamburgers and steaks.\n"}
{"prompt":"∀x (Vegetarian(x) → Conscious(x)) ->","completion":" All people who are vegetarian are conscious of the environment or their health.\n"}
{"prompt":"∀x (Conscious(x) → ¬FastFood(x)) ->","completion":" If people are conscious about the environment or their health, then they do not go to fast food places often.\n"}
{"prompt":"∀x (Busy(x) → FastFood(x)) ->","completion":" If people have busy schedules without time to cook, then they go to fast food places often.\n"}
{"prompt":"¬(FastFood(jeremy) ∧ Conscious(jeremy)) → FastFood(jeremy) ->","completion":" If Jeremy does not both go to fast food places often and is conscious about the environment or their health, then he goes to fast food places often.\n"}
{"prompt":"∃x (Project(x) ∧ Do(sam, x)) ->","completion":" Sam is doing a project.\n"}
{"prompt":" ∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, c++))) ->","completion":" A project is written either in C++ or in Python.\n"}
{"prompt":" ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac)) ->","completion":" If Sam does a project written in Python, he will not use a Mac.\n"}
{"prompt":" Use(sam, mac) ->","completion":" Sam is using a Mac.\n"}
{"prompt":" Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x)) ->","completion":" If Sam uses a Mac, he will play a song.\n"}
{"prompt":" ∀x (¬Be(x, perfect) → ¬Play(sam, x)) ->","completion":" If a song is not \"Perfect\", Sam will never play it.\n"}
{"prompt":"∀x (Rabbit(x) → HasFur(x)) ->","completion":" All rabbits have fur\n"}
{"prompt":"∃x (Pet(x) ∧ Reptile(x)) ->","completion":" Some pets are rabbits.\n"}
{"prompt":"∀x (App(x) → Software(x)) ->","completion":" All video applications are software.\n"}
{"prompt":"∀x (Youtube(x) → App(x)) ->","completion":" All YouTube-related applications are video applications. \n"}
{"prompt":"∀x (Youtube(x) ∨ Instagram(x)) ->","completion":" An APP is either related to YouTube or Instagram.\n"}
{"prompt":"∀x (Instagram(x) → Entertainment(x)) ->","completion":" All Instagram is entertainment. \n"}
{"prompt":"∀x (Software(x) → Program(x)) ->","completion":" All software is programmed. \n"}
{"prompt":"∀x (Entertainment(x) → Interesting(x)) ->","completion":" All entertainments are interesting.\n"}
{"prompt":"∀x (Interesting(x) → Good(x)) ->","completion":" If something is interesting, then it is good.\n"}
{"prompt":"¬Good(tiktok) ->","completion":" TikTok is not good.\n"}
{"prompt":"UnincorporatedCommunity(ordinary) ->","completion":" Ordinary is an unincorporated community.\n"}
{"prompt":"In(ordinary, elliotcounty) ∧ On(ordinary, kentuckyroute32) ->","completion":" Located within Elliot County, Ordinary is on Kentucky Route 32.\n"}
{"prompt":"NorthwestOf(ordinary, sandyhook) ->","completion":" Ordinary is located northwest of Sandy Hook.\n"}
{"prompt":"∀x (YoungAdult(x) → GoOnDiet(x)) ->","completion":" All young adults go on a diet.\n"}
{"prompt":"∀x (CollegeStudent(x) → YoungAdult(x)) ->","completion":" All college students are young adults.\n"}
{"prompt":"∀x (YaleStudent(x) → CollegeStudent(x)) ->","completion":" All Yale students are college students.\n"}
{"prompt":"∀x (YaleStudent(x) ∨ HarvardStudent(x)) ->","completion":" Someone is either a Yale student or a Harvard student.\n"}
{"prompt":"∀x (HarvardStudent(x) → Diligent(x)) ->","completion":" All Harvard students are diligent.\n"}
{"prompt":"HarvardStudent(susan) → YoungAdult(susan) ->","completion":" If Susan is a Harvard student, then she is a young adult.\n"}
{"prompt":"YaleStudent(susan) → ¬GoOnDiet(susan) ->","completion":" If Susan is a Yale student, then she does not go on a diet.\n"}
{"prompt":"Play(vicdicara, guitar) ∧ Play(vicdicara, bass) ->","completion":" Vic DiCara plays guitar and bass.\n"}
{"prompt":"¬(∃x (Music (vicdicara, punk) ∧ Music (vicdicara, x))) ->","completion":" The only style of music Vic DiCara plays is punk music.\n"}
{"prompt":"Band(vicdicara, insideOut) ->","completion":" Vic DiCara played in the band Inside Out.\n"}
{"prompt":"∀x (Athlete(x) → GoodAtSports(x)) ->","completion":" All athletes are good at sports.\n"}
{"prompt":"∀x (OlympicGoldMedalWinner(x) → Athlete(x)) ->","completion":" All Olympic gold medal winners are good athletes.\n"}
{"prompt":"∀x (Scientist(x) → ¬GoodAtSports(x)) ->","completion":" No scientists are good at sports.\n"}
{"prompt":"∀x (NobelLaureate(x) → Scientist(x)) ->","completion":" All Nobel laureates are scientists.\n"}
{"prompt":"GoodAtSports(amy) ∨ OlympicGoldMedalWinner(amy) ->","completion":" Amy is good at sports or Amy is an Olympic gold medal winner.\n"}
{"prompt":"¬NobelLaureate(amy) → ¬OlympicGoldMedalWinner(amy) ->","completion":" If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner.\n"}
{"prompt":"∀x (RedFruit(x) → VC(x)) ->","completion":" All fruits with the color red contain a large amount of vitamin C.\n"}
{"prompt":"∀x (Apple(x) → RedFruit(x)) ->","completion":" All apples are fruits with the color red.\n"}
{"prompt":"∀x (VC(x) → Benefit(x)) ->","completion":" All fruits containing a large amount of vitamin C are beneficial to people. \n"}
{"prompt":"∀x (Benefit(x) → ¬WarningList(x)) ->","completion":" No fruits that are beneficial to people are on a warning list.\n"}
{"prompt":"¬(Benefit(k) ∧ Apple(k)) → RedFruit(k) ->","completion":" If K is not beneficial to people and also not an apple, then it is a fruit with the color red.\n"}
{"prompt":"∀x (Meta(x) → HighIncome(x)) ->","completion":" Everyone working at Meta has a high income. \n"}
{"prompt":"∀x (HighIncome(x) → ¬Bus(x)) ->","completion":" If a person has a high income, then he\/she will not take a bus to their destination.\n"}
{"prompt":"∀x (Bus(x) ∨ Drive(x)) ->","completion":" People will either take a bus or drive to their destination. \n"}
{"prompt":"∀x (HaveCars(x) → Drive(x)) ->","completion":" Everyone who has a car will choose to drive to their destination. \n"}
{"prompt":"∀x (Student(x) → ¬Drive(x)) ->","completion":" No students drive to their destination. \n"}
{"prompt":"HaveCars(james) ∨ Meta(james) ->","completion":" James has a car or works at Meta.\n"}
{"prompt":"∀x (Park(x) ⊕ Movies(x)) ->","completion":" Students either go to the park or go to the movies. \n"}
{"prompt":"∀x (Nature(x) → ¬FreeTime(x)) ->","completion":" No student who enjoys nature has free time during the weekend. \n"}
{"prompt":"∀x (Movies(x) → Nature(x)) ->","completion":" All students who go to the movies enjoy nature. \n"}
{"prompt":"∀x (NoClass(x) → FreeTime(x)) ->","completion":" All students who do not have class during the weekend have free time during the weekend. \n"}
{"prompt":"∀x (SummerCamp(x) → NoClass(x)) ->","completion":" All students not in summer camp do not have class during the weekend. \n"}
{"prompt":"NoClass(james) ->","completion":" James does not have class during the weekend.\n"}
{"prompt":"∀x (TelevisionStar(x) → ¬CertifiedPublicAccoutant(x)) ->","completion":" No television stars are certified public accountants.\n"}
{"prompt":"∀x (CertifiedPublicAccoutant(x) → GoodBusinessSense(x)) ->","completion":" All certified public accountants have good business sense.\n"}
{"prompt":"∃x (Math(x) ∧ Chemistry(x)) ->","completion":" Some students good at math are good at chemistry.\n"}
{"prompt":"∀x (Chemistry(x) → Experiment(x)) ->","completion":" All students good at chemistry enjoy conducting experiments. \n"}
{"prompt":"∀x (Experiment(x) → Planning(x)) ->","completion":" All students that enjoy conducting experiments are good at planning. \n"}
{"prompt":"∀x (Planning(x) → ¬Award(x)) ->","completion":" No student good at planning is awarded the Dean's List. \n"}
{"prompt":"¬(Chemistry(james) ⊕ Award(james)) ->","completion":" James is either good at chemistry and awarded the Dean's List, or neither good at chemistry nor awarded the Dean's List.\n"}
{"prompt":"∀x (Easy(x) → LowerAC(x)) ->","completion":" If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. \n"}
{"prompt":"∀x (Recommended(x) → Easy(x)) ->","completion":" All Leetcode problems that are recommended to novices are easy. \n"}
{"prompt":"∀x (Easy(x) ⊕ Hard(x)) ->","completion":" A Leetode problem is either easy or hard.\n"}
{"prompt":"∀x (Starred(x) → Hard(x)) ->","completion":" Leetcode problems that are starred by more than 1 thousand users are hard.\n"}
{"prompt":"Recommended(twosum)  ->","completion":" 2Sum is recommended to novices. \n"}
{"prompt":"Starred(foursum) ->","completion":" 4Sum is starred by more than 1 thousand users.\n"}
{"prompt":"∀x (Rent(x, car) → Spend(x, money)) ->","completion":" All rental cars cost the renter money.\n"}
{"prompt":"GoesTo(sarah, vermont) → DriveTo(sarah, vermont) ->","completion":" Whenever Sarah goes to Vermont, Sarah drives there.\n"}
{"prompt":"∀x ∀y (¬Own(x, car) ∧ DriveTo(x, y) → Borrow(x, car) ⊕ Rent(x, car)) ->","completion":" For someone who does not own a car to drive somewhere, they must either borrow a car or rent a car.\n"}
{"prompt":"¬Own(sarah, car) ->","completion":" Sarah doesn’t own a car.\n"}
{"prompt":"∀x (Camping(sarah, x) → ¬(Borrow(sarah, car))) ->","completion":" Sarah never borrows a car to go camping.\n"}
{"prompt":"Camping(sarah, vermont) ->","completion":" Sarah is going to go camping in Vermont this weekend.\n"}
{"prompt":"∀x ∀y (Camping(x, y) → GoesTo(x, y)) ->","completion":" To go camping somewhere, you must go to that place.\n"}
{"prompt":"∀x Weddings(x) → GettingMarried(x) ->","completion":" All people who attend weddings are getting married or have friends who are getting married.\n"}
{"prompt":"∀x PreTeen(x) → ¬GettingMarried(x) ->","completion":" No preteens and other young children are getting married or have friends who are getting married.\n"}
{"prompt":"∀x Celebrating(x) → Weddings(x) ->","completion":" If people enjoy celebrating life milestone events with other people, then they attend weddings.\n"}
{"prompt":"∀x LargeGathering(x) → Celebrating(x) ->","completion":" If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.\n"}
{"prompt":"∀x Outgoing(x) → LargeGathering(x) ->","completion":" All people who are outgoing and very spirited are fond of large organized group functions.\n"}
{"prompt":"¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol) ->","completion":" If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  \n"}
{"prompt":"∀x (Republicans(x) → Anti-abortion(x)) ->","completion":" All Republicans are anti-abortion.\n"}
{"prompt":" ∀x (Republicans(x) ∨ Democrats(x)) ->","completion":" Either Republicans or Democrats. \n"}
{"prompt":" ∀x (Democrats(x) → ¬Conservative(x)) ->","completion":" No Democrats are conservative.\n"}
{"prompt":" ∀x (Conservative(x) ∨ Liberal(x)) ->","completion":" Either conservative or liberal. \n"}
{"prompt":" Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial) ->","completion":" A U.S government official is either conservative or a Republican.\n"}
{"prompt":"∀x (AdvocateOfHighTariff(x) → Republican(x)) ->","completion":" All advocates of high tariff rates are Republicans.\n"}
{"prompt":"∃x (Republican(x) ∧ ¬Conservative(x)) ->","completion":" Some Republicans are not conservatives.\n"}
{"prompt":"∀x (Athlete(x) → ¬SlowRunner(x)) ->","completion":" No athletes are slow runners. \n"}
{"prompt":"∀x (ProfessionalBasketballPlayer(x) → Athlete(x)) ->","completion":" All professional basketball players are athletes. \n"}
{"prompt":"∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x)) ->","completion":" All NBA players are professional basketball players. \n"}
{"prompt":"∀x (KnicksPlayer(x) → NBAPlayer(x)) ->","completion":" All Knicks players are NBA players. \n"}
{"prompt":"¬(ProfessionalBasketballPlayer(jim) ⊕ SlowRunner(jim)) ->","completion":" Jim is either not a professional basketball player or not a slow runner. \n"}
{"prompt":"∀x (Kid(x) → LoveAnimals(x)) ->","completion":" All kids love animals.\n"}
{"prompt":"∀x (Toddler(x) → Kid(x)) ->","completion":" All toddlers are kids.\n"}
{"prompt":"∀x (LoveAnimals(x) → ¬Bad(x)) ->","completion":" If someone loves animals, then they are not bad.\n"}
{"prompt":"∀x (Pirate(x) → Bad(x)) ->","completion":" All pirates are bad.\n"}
{"prompt":"¬Pirate(nancy) → LoveAnimals(nancy) ->","completion":" If Nancy is not a pirate, then Nancy loves animals.\n"}
{"prompt":"¬Toddler(nancy) → Bad(nancy) ->","completion":" If Nancy is not a toddler, then Nancy is bad.\n"}
{"prompt":"DirectedBy(after_Tiller, lana_Wilson) ∧ DirectedBy(the_Departure, lana_Wilson) ∧ DirectedBy(miss_Americana, lana_Wilson) ->","completion":" Lana Wilson directed After Tiller, The Departure, and Miss Americana.\n"}
{"prompt":"∀x ∃y (DirectedBy(y, x) → Filmmaker(x)) ->","completion":" If a film is directedy by a person, the person is a filmmaker.\n"}
{"prompt":"IsDocumentary(after_Tiller) ->","completion":" After Tiller is a documentary.\n"}
{"prompt":"∀x (IsDocumentary(x) → IsFilm(x)) ->","completion":" The documentary is a type of films.\n"}
{"prompt":"FromCity(lana_Wilson, kirkland) ->","completion":" Lana Wilson is from Kirkland.\n"}
{"prompt":"CityCountry(kirkland, us) ->","completion":" Kirkland is a US city.\n"}
{"prompt":"∀x ∀y ∀z (FromCity(x, y) ∧ CityCountry(y, z) → FromCountry(x, z)) ->","completion":" If a person is from a city in a country, the person is from the country.\n"}
{"prompt":"Nomination(after_Tiller, the_Independent_Spirit_Award_for_Best_Documentary) ->","completion":" After Tiller is nominated for the Independent Spirit Award for Best Documentary.\n"}
{"prompt":"∀x ((Bear(x) ∧ InZoo(x)) → ¬Wild(x)) ->","completion":" All bears in zoos are not wild. \n"}
{"prompt":"∃x (Bear(x) ∧ InZoo(x))  ->","completion":" Some bears are in zoos. \n"}
{"prompt":"∀x (Leader(x) → InMonarchy(x)) ->","completion":" If a person is the leader of a country for life, that person is in a monarchy. \n"}
{"prompt":"∀x (Leader(x) → King(x) ⊕ Queen(x)) ->","completion":" Leaders are either a king or a queen.\n"}
{"prompt":"∀x (Queen(x) → Female(x)) ->","completion":" Queens are female.\n"}
{"prompt":"∀x (King(x) → Male(x)) ->","completion":" Kings are male. \n"}
{"prompt":"Queen(elizabeth) ->","completion":" Elizabeth is a queen.\n"}
{"prompt":"Leader(elizabeth) ->","completion":" Elizabeth is a leader\n"}
{"prompt":"∀x (Matcha(x) → ¬Late(x)) ->","completion":" If people make their own matcha teas every morning with ceremonial-grade matcha powder, then they do not wake up late and start their schedules past noon regularly.\n"}
{"prompt":"∀x (California(x) → Matcha(x)) ->","completion":" If people live in California and attend yoga classes regularly, then they make their own matcha teas every morning with ceremonial-grade matcha powder.\n"}
{"prompt":"∀x (Celebrities(x) → Late(x)) ->","completion":" If people work in the entertainment industry as high-profile celebrities, then they wake up late and start their schedules past noon regularly.\n"}
{"prompt":"∀x (Jobs(x) → Celebrities(x)) ->","completion":" If people do not have regular 9-5 jobs, then they work in the entertainment industry as high-profile celebrities.\n"}
{"prompt":"∀x (WorkHome(x) → Jobs(x)) ->","completion":" All people who prefer working at home over going to the office every day do not have regular 9-5 jobs.\n"}
{"prompt":"(WorkHome(clay) ∧ Matcha(clay)) ⊕ (¬WorkHome(clay) ∧ ¬Matcha(clay)) ->","completion":" Clay either both prefers to work at home over going to the office every day and makes his own matcha teas every morning with ceremonial-grade matcha powder, or he neither prefers to work at home over going to the office every day nor makes his own matcha teas every morning with ceremonial-grade matcha powder.\n"}
{"prompt":"English(thomasBarber) ∧ ProfessionalFootballer(thomasBarber) ->","completion":" Thomas Barber was an English professional footballer.\n"}
{"prompt":"PlayedInTheFootballLeagueFor(thomasBarber, astonVilla) ->","completion":" Thomas Barber played in the Football League for Aston Villa.\n"}
{"prompt":"PlayedAs(thomasBarber, aHalfBack) ∧ PlayedAs(thomasBarber, anInsideLeft) ->","completion":" Thomas Barber played as a half back and inside left.\n"}
{"prompt":"ScoredTheWinningGoalIn(thomasBarber, facupfinal1913) ->","completion":" Thomas Barber scored the winning goal in the 1913 FA Cup Final.\n"}
{"prompt":"∀y (∀x (PlayInConcert(y, x) → GoodAt(y, x))) ->","completion":" If people play the instrument in the concert, then he is good at playing this kind of instrument.\n"}
{"prompt":"Play(peter, piano) ∧Play(peter, violin) ->","completion":" Peter plays piano, violin, and saxophone.\n"}
{"prompt":"PlayInConcert(peter, piano) ->","completion":" Peter was invited to play piano at the concert hall.\n"}
{"prompt":"PlayerInConcert(peter) ∧ PlayerInConcert(oliver) ->","completion":" Oliver and Peter were both invited to perform in the concert.\n"}
{"prompt":"¬PlayInConcert(oliver, piano) ->","completion":" Oliver plays a different musical instrument from Peter in the concert.\n"}
{"prompt":"∀x (GoesUnderwater(x) → EnjoysWater(x)) ->","completion":" If something can go underwater, then it enjoys water.\n"}
{"prompt":"∀x (CanSwim(x) → GoesUnderwater(x)) ->","completion":" All animals that can swim can go underwater.\n"}
{"prompt":"∀x (CanSwim(x) ∨ CanWalk(x)) ->","completion":" Either an animal can swim or it can walk.\n"}
{"prompt":"∀x (CanWalk(x) → TravelsOnLand(x)) ->","completion":" Animals that can walk travel on land.\n"}
{"prompt":"∀x (EnjoysWater(x) → Splashes(x)) ->","completion":" Animals that enjoy water splash water around.\n"}
{"prompt":"∀x (TravelsOnLand(x) → EnjoysBasking(x)) ->","completion":" Every animal that travels on land enjoys basking in the sun.\n"}
{"prompt":"Splashes(george) ∧ CanSwim(george) ->","completion":" George splashes water around and can swim.\n"}
{"prompt":"(CanWalk(liam) ∧ EnjoysWater(liam)) ∨ (¬CanWalk(liam) ∧ ¬EnjoysWater(liam)) ->","completion":" Liam is either an animal that can walk and enjoys water, or is neither an animal that can walk nor enjoys water.\n"}
{"prompt":"FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology) ->","completion":" Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. \n"}
{"prompt":" PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth) ->","completion":" Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.\n"}
{"prompt":" ∀x (PValue(x) → ThresholdsForBelief(x) ∧ ¬MetricsOfEffect(x)) ->","completion":" P values are thresholds for belief, not metrics of effect. \n"}
{"prompt":"∀x (Dispensable(x) → EnvironmentFriendly(x)) ->","completion":" All dispensable things are environment-friendly. \n"}
{"prompt":"∀x (Woodware(x) → Dispensable(x)) ->","completion":" All woodware is dispensable.\n"}
{"prompt":"∀x (Paper(x) → Woodware(x)) ->","completion":" All paper is woodware. \n"}
{"prompt":"∀x (Good(x) → ¬Bad(x)) ->","completion":" No good things are bad. \n"}
{"prompt":"∀x (EnvironmentFriendly(x) → Good(x)) ->","completion":" All environment-friendly things are good.\n"}
{"prompt":"Paper(worksheet) ⊕ EnvironmentFriendly(worksheet) ->","completion":" A worksheet is either paper or is environment-friendly.\n"}
{"prompt":"∀x (Reptile(x) → ¬HasFur(x)) ->","completion":" No reptile has fur.\n"}
{"prompt":"∀x (Snake(x) → Reptile(x)) ->","completion":" All snakes are reptiles.\n"}
{"prompt":"∀x (Located(newhaven, x) → ¬High(x)) ->","completion":" All buildings in New Haven are low. \n"}
{"prompt":"∀x (YaleHousing(x) → Located(newhaven, x)) ->","completion":" All buildings managed by the Yale Housing are located in New Haven. \n"}
{"prompt":"∀x (Located(manhattans, x) → High(x)) ->","completion":" All buildings in Manhattans are high. \n"}
{"prompt":"∀x (Bloomberg(x) → Located(manhattans, x)) ->","completion":" All buildings owned by Bloomberg are located in Manhattans. \n"}
{"prompt":"∀x (BloombergLogo(x) → Bloomberg(x)) ->","completion":" All buildings with the Bloomberg logo are owned by Bloomberg. \n"}
{"prompt":"YaleHousing(tower-a) ->","completion":" Tower A is managed by the Yale Housing.\n"}
{"prompt":"BloombergLogo(tower-b) ->","completion":" Tower B is with the Bloomberg logo.\n"}
{"prompt":"∀x (ColdBlooded(x) → ¬Bird(x)) ->","completion":" No cold-blooded animals are birds.\n"}
{"prompt":"∀x (Reptile(x) → ColdBlooded(x)) ->","completion":" All reptiles are cold-blooded.\n"}
{"prompt":"∀x (Bird(x) ∨ EatOtherAnimals(x)) ->","completion":" Either an animal is a bird or it eats other animals.\n"}
{"prompt":"∀x (EatOtherAnimals(x) → Carnivore(x)) ->","completion":" If an animal eats other animals, then it is a carnivore.\n"}
{"prompt":"¬ColdBlooded(ron) ∧ ¬Carnivore(ron) ->","completion":" Ron is neither a cold-blooded animal nor a carnivore.\n"}
{"prompt":"¬Carnivore(henry) ∧ ¬Lizard(henry) ->","completion":" Henry is neither a carnivore nor a lizard.\n"}
{"prompt":"Prehistoric(ambiortus) ∧ BirdGenus(ambiortus) ->","completion":" Ambiortus is a prehistoric bird genus.\n"}
{"prompt":"∀x (Species(x, ambiortus) → AmbiortusDementjevi(x)) ->","completion":" Ambiorus Dementjevi is the only known species of Ambiortus.\n"}
{"prompt":"∀x (AmbiortusDementjevi(x) → Lived(x, mongolregion)) ->","completion":" The Mongol region was where Ambiorus Dementjevi lived.\n"}
{"prompt":"Discovered(yevgenykurochkin, ambiortus) ->","completion":" Yevgeny Kurochkin was the discoverer of Ambiortus.\n"}
{"prompt":"∀x (UseFootball(x) → ThrowFootball(x)) ->","completion":" Everyone that uses a football can throw a football.\n"}
{"prompt":"∀x (PlayFootball(x) → UseFootball(x)) ->","completion":" If someone plays football, then they use a football.\n"}
{"prompt":"∀x (BasketballPlayer(x) ∨ PlayFootball(x)) ->","completion":" Either someone is a football player or a basketball player.\n"}
{"prompt":"∀x (BasketballPlayer(x) → Tall(x)) ->","completion":" Every basketball player is tall.\n"}
{"prompt":"∀x (ThrowFootball(x) → ThrowFootballSpiral(x)) ->","completion":" Everyone that can throw a football can throw a football with a spiral.\n"}
{"prompt":"∀x (Tall(x) → InShape(x)) ->","completion":" If someone is tall, then they are in shape.\n"}
{"prompt":"¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack) ->","completion":" If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football.\n"}
{"prompt":"CurrentName(fortticonderoga, fortcarillon) ->","completion":" Fort Ticonderoga is the current name for Fort Carillon.\n"}
{"prompt":"Built(pierrederigauddevaudreuil, fortcarillon) ->","completion":" Pierre de Rigaud de Vaudreuil built Fort Carillon.\n"}
{"prompt":"LocatedIn(fortcarillon, newfrance) ->","completion":" Fort Carillon was located in New France.\n"}
{"prompt":"¬LocatedIn(newfrance, europe) ->","completion":" New France is not in Europe.\n"}
{"prompt":"¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x))) ->","completion":" No soccer players are professional basketball players.\n"}
{"prompt":"∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x)) ->","completion":" All NBA players are professional basketball players.\n"}
{"prompt":"∀x (Defender(x) → SoccerPlayer(x)) ->","completion":" All defenders are soccer players.\n"}
{"prompt":"∀x (Centerback(x) → Defender(x)) ->","completion":" All centerback players are defenders.\n"}
{"prompt":"(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry) ->","completion":" If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player.\n"}
{"prompt":"∀x (Song(x) → ¬Visual(x)) ->","completion":" No songs are visual. \n"}
{"prompt":"∀x (FolkSong(x) → Song(x)) ->","completion":" All folk songs are songs. \n"}
{"prompt":"∀x (Video(x) → Visual(x)) ->","completion":" All videos are visual. \n"}
{"prompt":"∀x (Movie(x) → Video(x)) ->","completion":" All movies are videos.\n"}
{"prompt":"∀x (ScifiMovie(x) → Movie(x)) ->","completion":" All sci-fi movies are movies.\n"}
{"prompt":"ScifiMovie(inception) ->","completion":" Inception is a sci-fi movie.\n"}
{"prompt":"¬FolkSong(mac) ∧ ¬ScifiMovie(mac) ->","completion":" Mac is neither a folk song nor a sci-fi movie.\n"}
{"prompt":"∀x (Extroverts(x) → OvertlyExpressive(x)) ->","completion":" All extroverts are overtly expressive.\n"}
{"prompt":" ∀x (Extroverts(x) ∨ Introverts(x))  ->","completion":" People are either extroverts or introverts.\n"}
{"prompt":" ∀x (Introverts(x) → ShyAndReticentPerson(x)) ->","completion":" If someone is an introvert, then they are shy and reticent. \n"}
{"prompt":" ∀x (ShyAndReticentPerson(x) → ¬LikeToTalkToStrangers(x)) ->","completion":" No shy and reticent person likes to talk to strangers.\n"}
{"prompt":" ¬Extroverts(jeff) ∧ ¬LikeToTalkToStrangers(jeff) ->","completion":" Jeff is not an extrovert and someone who likes to talk to strangers.\n"}
{"prompt":"∀x (LowScore(x) → ¬TopPlayer(x)) ->","completion":" No low-scoring players are top players in the league.\n"}
{"prompt":"∀x (TopPlayer(x) ∨ ThreePointer(x)) ->","completion":" Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.\n"}
{"prompt":"∀x (ThreePointer(x) → TwoPointer(x)) ->","completion":" All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.\n"}
{"prompt":"∀x (TwoPointer(x) → ¬BadMid(x)) ->","completion":" No players who are solid at shooting 2-pointers are bad at mid-range shots.\n"}
{"prompt":"LowScore(candace) ⊕ ThreePointer(candace) ->","completion":" Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.\n"}
{"prompt":"∀x (Plant(x) → ¬Fungi(x)) ->","completion":" No plants are fungi.\n"}
{"prompt":"∀x (Mushroom(x) → Fungi(x)) ->","completion":" Mushrooms are fungi.\n"}
{"prompt":"∀x (Road(x) → ¬Clean(x)) ->","completion":" No road is clean.\n"}
{"prompt":"∃x (Street(x) ∧ Road(x)) ->","completion":" And some streets are roads.\n"}
{"prompt":"On(newyorkcity, eastcoast) ->","completion":" New York City is on the East Coast. \n"}
{"prompt":"On(seattle, westcoast) ->","completion":" Seattle is on the West Coast. \n"}
{"prompt":"∀x ∀y ∀z ((TravelingFrom(x, y) ∧ On(y, eastcoast) ∧ TravelingTo(x, z) ∧ On(z, westcoast)) → OnLongFlight(x)) ->","completion":" If a person from a city on the East coast is traveling to a city on the west coast, they will be on a long flight.\n"}
{"prompt":"∃x (¬InFirstClass(x) ∧ TravelingFrom(x, newyorkcity) ∧ TravelingTo(x, seattle)) ->","completion":" Most passengers on flights to Seattle from New York City are not in first class.\n"}
{"prompt":"∀x (OnLongFlight(x) ∧ ¬InFirstClass(x) → Uncomfortable(x)) ->","completion":" People on long flights are uncomfortable unless they're in first class\n"}
{"prompt":"∀x (Musician(x) → Busy(x)) ->","completion":" Musicians have very busy lives.\n"}
{"prompt":"Musician(singhKaur) ∧ Famous(singhKaur) ->","completion":" Singh Kaur is a musician and famous.\n"}
{"prompt":"∀x (Musician(x) ∧ ¬Famous(x) → ¬MakeMoney(x)) ->","completion":" If a musician is not famous, that musician will not make a lot of money.\n"}
{"prompt":"∃x (Musician(x) ∧ Singer(x) ∨ Writer(x)) ->","completion":" A musician can be a singer or a writer.\n"}
{"prompt":"∀x (Building(x) → ¬Tall(x)) ->","completion":" Each building is tall. \n"}
{"prompt":"∀x (Tall(x) → HasHeight(x)) ->","completion":" Everything tall has  height.\n"}
{"prompt":"Cat(garfield) ∧ MainCharacterGarfield(garfield) ∧ BeOrange(garfield) ∧ BeFat(garfield) ∧ LikeLasagna(garfield) ->","completion":" A cat named Garfield, which is the main character of the film Garfield, is orange and fat and likes having lasagna. \n"}
{"prompt":"Pet(garfield, jon) ∧ Pet(odie, jon) ∧ ShareHome(garfield, odie) ->","completion":" Garfield and Odie, who is another pet of Jon, share the same home. \n"}
{"prompt":"Hate(garfield, odie) ->","completion":" Garfield hates Odie.\n"}
{"prompt":"∀x ∀y ∃z (Pet(x, z) ∧ Pet(y, z) ∧ Hate(x, y) → BeChildish(x) ∧ BePossessive(x)) ->","completion":" A pet who hates the pet with whom he shares the same owner is childish and possessive.\n"}
{"prompt":"∀x ∃y (Cat(x) → Pet(x, y)) ->","completion":" Cats are pets. \n"}
{"prompt":"∀x (Human(x) → Eat(x)) ->","completion":" All humans eat.\n"}
{"prompt":"∀x (Eat(x) → ¬Plant(x)) ->","completion":" If something eats, then it is not a plant.\n"}
{"prompt":"∀x (Plant(x) ∨ Animal(x)) ->","completion":" A thing is either plant or animal.\n"}
{"prompt":"∀x (Goat(x) → Animal(x)) ->","completion":" All goats are animals.\n"}
{"prompt":"∀x (Dirt(x) → ¬Animal(x)) ->","completion":" No dirt is an animal.\n"}
{"prompt":"Goat(hulu) ∨ Human(hulu) ->","completion":" Hulu is a goat or a human.\n"}
{"prompt":"∀x (ControlledSubstances(x) → Drugs(x)) ->","completion":" A controlled substance is a drug.\n"}
{"prompt":"∃x ∃x (ControlledSubstances(x) ∧ ControlledSubstances(y) ∧ Beneficial(x) ∧ Harmful(y)) ->","completion":" There exist both harmful and beneficial controlled substances.\n"}
{"prompt":"∀x ∀y (ExposedToControlledSubstance(x, y) → ChemicalEndangerment(x)) ->","completion":" If a child is exposed to a controlled substance, he or she is in chemical endangerment.\n"}
{"prompt":"∀x (ChemicalEndangerment(x) → Harmful(x)) ->","completion":" Chemical Endangerment is harmful. \n"}
{"prompt":"PassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstancesAct) ->","completion":" The Controlled Substances Act was an act passed in 1971.\n"}
{"prompt":"∃x (Act(x) ∧ PreventsHarm(x)) ->","completion":" Some Acts prevent harmful things.\n"}
{"prompt":"∀x (WorkAtCorporateJobs(x) → ¬StartingANewCompany(x)) ->","completion":" No people who work at corporate jobs are starting a new company.\n"}
{"prompt":" ∀x (Entrepreneurs(x) → StartingANewCompany(x)) ->","completion":" All entrepreneurs are starting a new company.\n"}
{"prompt":" ∀x (Risk-averse(x) → WorkAtCorporateJobs(x)) ->","completion":" All risk-averse people are people who work at corporate jobs.\n"}
{"prompt":" ∀x (HateWorkingForOthers(x) → Entrepreneurs(x)) ->","completion":" All people who hate working for others are entrepreneurs.\n"}
{"prompt":" ¬Entrepreneurs(markZuckerberg) ∨ ¬HateWorkingForOthers(markZuckerberg) → ¬Risk-averse(markZuckerberg) ->","completion":" If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person.\n"}
{"prompt":"∀x (Kitchen(x) → Up(x) ⊕ Down(x)) ->","completion":" There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.\n"}
{"prompt":"(Cook(downstairs) ∧ ¬Run(ac)) → Smokey(firstFloor) ->","completion":" When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.\n"}
{"prompt":"(Cook(downstairs) ∧ Run(ac)) → Smokey(secondFloor) ->","completion":" If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor.\n"}
{"prompt":"Locate(nyc, usa) ->","completion":" New York City is Located in the United States of America.\n"}
{"prompt":"Locate(usa, northAmerica) ->","completion":" United States of America is part of North America.\n"}
{"prompt":"Locate(northAmerica, westHemisphere) ->","completion":" North America is in the western hemisphere of the earth.\n"}
{"prompt":"HighlyDeveloped(nyc) ->","completion":" New York City is a highly developed city.\n"}
{"prompt":"∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z)) ->","completion":" If place A is located in place B and place B is located in place C, then place A is located in place C.\n"}
{"prompt":"Poem(callus4) ∧ WrittenBy(callus4, catullus) ∧ Roman(catullus) ->","completion":" Callus 4 is a poem that was written by the ancient Roman writer Catullus.\n"}
{"prompt":"RetirementShip(callus4) ->","completion":" Callus 4 is a story about the retirement of a well-traveled ship.\n"}
{"prompt":"Poem(callus4) → AgingAnalogy(callus4) ->","completion":" There is a strong analogy of human aging in the poem Callus 4.\n"}
{"prompt":"Poem(callus4) → Lambic(callus4) ∧ Waves(callus4) ->","completion":" Callus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves.\n"}
{"prompt":"TVSeries(westworld) ∧ American(westworld) ∧ ScienceFictionThriller(westworld) ->","completion":" Westworld is an American science fiction-thriller TV series.\n"}
{"prompt":"Debut(westworld, year2016) ->","completion":" In 2016, a new television series named Westworld debuted on HBO.\n"}
{"prompt":"∃x (Adapt(westworld, x) ∧ Produce(x, year1973) ∧ Write(michael, x) ∧ Direct(michael, x)) ->","completion":" The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.\n"}
{"prompt":"About(westworld, robots) ->","completion":" The 1973 film Westworld is about robots that malfunction and begin killing the human visitors.\n"}
{"prompt":"HeldIn(summer2008olympics, beijingchina) ->","completion":" The 2008 Summer Olympics were held in Beijing, China.\n"}
{"prompt":"SecondToBe(summer2008olympics, heldincommuniststate) ->","completion":" The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.\n"}
{"prompt":"Won(china, mostgoldmedals) ->","completion":" China won the most gold medals (48) in the 2008 Summer Olympics.\n"}
{"prompt":"Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals) ->","completion":" The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.\n"}
{"prompt":"Placed(russia, thirdingoldmedals) ->","completion":" The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.\n"}
{"prompt":"∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y)) ->","completion":" If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.\n"}
{"prompt":"∃x (Country(x) ∧ Won(x, medal)) ->","completion":" 87 countries won at least one medal during the 2008 Games.\n"}
{"prompt":"DistrictIn(xiufeng, guilin) ∧ DistrictIn(xiangshan, guilin) ∧ DistrictIn(diecai, guilin) ∧ DistrictIn(qixing, guilin) ∧ City(guilin) ->","completion":" Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.\n"}
{"prompt":"¬DistrictIn(yangshuo, guilin) ->","completion":" Yangshuo is not a district in Guilin. \n"}
{"prompt":"∀x (Garden(x) → Space(x)) ->","completion":" All people who grow their own fresh vegetables in their home garden also have ample space.\n"}
{"prompt":"∀x (Professional(x) → ¬Space(x)) ->","completion":" If people are young working professionals who live in large cities, then they do not have ample space.\n"}
{"prompt":"∀x (Takeout(x) → Garden(x)) ->","completion":" If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.\n"}
{"prompt":"∀x (GoingOut(x) → Takeout(x)) ->","completion":" If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.\n"}
{"prompt":"∀x (Homecooked(x) → GoingOut(x)) ->","completion":" If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. \n"}
{"prompt":"Garden(michael) ∨ Homecooked(michael) ->","completion":" Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food.\n"}
{"prompt":"∀x (Company(x) → GoogleHome(x)) ->","completion":" All devices belonging to the company are connected to Google Home. \n"}
{"prompt":"∀x (Employee(x) → Wifi(x)) ->","completion":" All devices belonging to employees are connected to the company's wifi. \n"}
{"prompt":"∀x (GoogleHome(x) → Controlled(x)) ->","completion":" All devices connected to Google Home are controlled by the managers. \n"}
{"prompt":"∀x (Wifi(x) → EasyToOperate(x)) ->","completion":" All devices that connect to the company's wifi are easy to operate. \n"}
{"prompt":"Employee(iPod1) ->","completion":" IPod1 belongs to employees. \n"}
{"prompt":"∀x (Orchestra(x) → ¬Touring(x)) ->","completion":" No touring musicians are permanent members of an orchestra.\n"}
{"prompt":"∀x (Orchestra(x) ⊕ Unique(x)) ->","completion":" Musicians are either permanent members of an orchestra or have a unique musical voice or style.\n"}
{"prompt":"∀x (Unique(x) → Interesting(x)) ->","completion":" All musicians who have a unique musical voice or style are interesting as individual performers.\n"}
{"prompt":"∀x (Interesting(x) → Capable(x)) ->","completion":" All musicians who are interesting as individual performers are capable of attracting large audiences.\n"}
{"prompt":"(Interesting(ryan) ∧ Unique(ryan)) → ¬(Touring(ryan) ⊕ Capable(ryan)) ->","completion":" If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences.\n"}
{"prompt":"∀x (Yell(x) → ¬Cool(x)) ->","completion":" If someone yells, then they are not cool.\n"}
{"prompt":"∀x (Angry(x) → Yell(x)) ->","completion":" If someone is angry, then they yell.\n"}
{"prompt":"∀x (Fly(x) → Cool(x)) ->","completion":" If someone flies, then they are cool.\n"}
{"prompt":"∀x (KnowMagic(x) → Fly(x)) ->","completion":" Every person that knows magic can fly.\n"}
{"prompt":"∀x (Wizard(x) → KnowMagic(x)) ->","completion":" All wizards know magic.\n"}
{"prompt":"(Yell(harry) ∧ Fly(harry)) ⊕ (¬Yell(harry) ∧ ¬Fly(harry)) ->","completion":" Harry either yells and flies, or neither yells nor flies.\n"}
{"prompt":"Wizard(potter) ∧ Fly(potter) ->","completion":" Potter is a wizard and flies.\n"}
{"prompt":"∀x (China(x) ⊕ US(x)) ->","completion":" Products are either produced in China or the US. \n"}
{"prompt":"∀x (China(x) → Labeled(x)) ->","completion":" All produced in China are labeled. \n"}
{"prompt":"∀x (US(x) → SoldInUS(x)) ->","completion":" All produced in the US are sold in the US. \n"}
{"prompt":"∀x (Labeled(x) → Cheaper(x)) ->","completion":" If labeled, then the product is cheaper. \n"}
{"prompt":"∀x (SoldInUS(x) → SoldInWalmart(x)) ->","completion":" All sold in the US are sold in Walmart. \n"}
{"prompt":"∀x (DisplayedInHomepage(x) → SoldInWalmart(x)) ->","completion":" All displayed on the homepage are sold in Walmart. \n"}
{"prompt":"∀x (ReturnedByCustomer(x) → ¬SoldInWalmart(x)) ->","completion":" No products returned by customers are sold in Walmart. \n"}
{"prompt":"¬(DisplayedInHomepage(g910) ⊕ Cheaper(g910)) ->","completion":" G-910 is either displayed on the homepage or cheaper.\n"}
{"prompt":"∀x (Amazon(x) ⊕ Environmental(x)) ->","completion":" People either order a lot of Amazon packages or are environmentally conscious.\n"}
{"prompt":"∀x (Amazon(x) → DailyMail(x)) ->","completion":" If people order a lot of Amazon packages, then they get a lot of daily mail delivered.\n"}
{"prompt":"∀x (Environmental(x) → Solar(x)) ->","completion":" If people are environmentally conscious, then they have solar panels in their homes.\n"}
{"prompt":"∀x (DailyMail(x) → Neighborhood(x)) ->","completion":" If people get a lot of daily mail delivered, then they are very involved with their neighborhood.\n"}
{"prompt":"∀x (Solar(x) → SaveMoney(x)) ->","completion":" If people have solar panels in their homes, then they save a lot of money.\n"}
{"prompt":"¬(DailyMail(marcy) ⊕ Neighborhood(marcy)) → (¬DailyMail(marcy) ∨ ¬Amazon(marcy)) ->","completion":" If Marcy either gets a lot of mail and is very involved with her neighborhood or if she does not order a lot of Amazon packages nor is very involved with her neighborhood, then Marcy does not both get a lot of daily mail and order a lot of Amazon packages. \n"}
{"prompt":"Country(indonesia) ->","completion":" Indonesia is a country.\n"}
{"prompt":"∃x ∃y (Country(indonesia) ∧ Prosecutor(x) ∧ Crime(y) → InvestigatePersonally(x, y)) ->","completion":" In Indonesia, the prosecutor only personally investigates cases of some special crimes.\n"}
{"prompt":"Crime(corruption) ->","completion":" Corruption is a type of crime.\n"}
{"prompt":"∀x ∀y (Crime(y) ∧ PoliceCompInves(y) ∧ Prosecutor(x) → Evidence(y) ∧ HandToProsecutor(x, y)) ->","completion":" Once the police complete investigations of a crime, they hand the evidence to the prosecutor. \n"}
{"prompt":"∀x (Crime(x) ∧ Evidence(x) ∧ (Satisfactory(x) ⊕ Unsatisfactory(x))) ->","completion":" Evidence can be either satisfactory or unsatisfactory.\n"}
{"prompt":"∀x ∀y (Evidence(y) ∧ HandToProsecutor(x, y) ∧ Satisfactory(y) → ProsecuteTheOffender(x, y)) ->","completion":" If the police hand the evidence to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court.\n"}
{"prompt":"∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x)) ->","completion":" No watch that is battery-powered is automatic.\n"}
{"prompt":"∀x (DigitalWatch(x) → BatteryPoweredWatch(x)) ->","completion":" All digital watches are battery-powered.\n"}
{"prompt":"∃x (MechanicalWatch(x) ∧ AutomaticWatch(x)) ->","completion":" Some mechanical watches are automatic.\n"}
{"prompt":"∀x (SmartWatch(x) → DigitalWatch(x)) ->","completion":" All smart watches are digital.\n"}
{"prompt":"¬DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch) ->","completion":" Moonwatch is not a digital watch or an automatic.\n"}
{"prompt":"∀x (People(x) ∧ DistinguishCondiments(x) → UseDiffCondiments(x)) ∧ (∃x (People(x) ∧ ¬DistinguishCondiments(x) ∧ UseDiffCondiments(x))) ∧ ¬(∀x (People(x) ∧ DistinguishCondiments(x))) ->","completion":" If a person can distinguish the taste of different condiments, then he\/she can also use different condiments to cook.\n"}
{"prompt":"∀x (People(x) ∧ TalentCooking(x) → DistinguishCondiments(x)) ->","completion":" People who have the talent of cooking can distinguish the taste of different condiments.\n"}
{"prompt":"∀x ∀y (MakeMeal(x, y) ∧ Delicious(y) ∧ People(x) → TalentCooking(x))  ->","completion":" Only people with the talent of cooking can make delicious meals.\n"}
{"prompt":"∀x ∀y (MakeMeal(x, y) ∧ People(x) ∧ Popular(y) → Delicious(y)) ->","completion":" If the meal is popular at the party, then it is delicious.\n"}
{"prompt":"∃x (People(john) ∧ MakeMeal(john, x) ∧ Popular(x) ∧ People(peter) ∧ ¬UseDiffCondiments(peter)) ->","completion":" John can make meals which are popular at the party.\n"}
{"prompt":"∀x (EffMonPolicy(x) → InfControl(x) ∧ StongCurr(x)) ->","completion":" Effective monetary policy is possible with successful inflation control and a strong national currency.\n"}
{"prompt":"¬(∀x (InfControl(x) ∧ ExRate(x))) ->","completion":" A country cannot simultaneously regulate the exchange rate and successfully control inflation.\n"}
{"prompt":"∀x (Embargo(x) → ExportFall(x)) ->","completion":" The introduction of an embargo on foreign trade goods in a country leads to a sharp decrease in exports.\n"}
{"prompt":"∀x (ExportFall(x) → ¬StongCurr(x)) ->","completion":" If exports fall sharply, the national currency cannot be in this country.\n"}
{"prompt":"∀x (ExRate(x) → StongCurr(x)) ->","completion":" Regulation of the exchange rate is required to have a strong national currency. \n"}
{"prompt":"Embargo(russia) ->","completion":" There is an embargo on Russian foreign trade goods.\n"}
{"prompt":"∀x (VideoGag(x) → FrenchTelevision(x) ∧ AirsWeekly(x)) ->","completion":" Video Gag is a French television series that airs weekly.\n"}
{"prompt":"∀x (VideoGag(x) → ChannelTF1(x)) ->","completion":" Video Gag airs on the French broadcast channel TF1. \n"}
{"prompt":"∀x (FunnyVideos(x) → AirsWeekly(x)) ->","completion":" If viewers send in funny videos to the French broadcast channel, then Video Gag airs them on television.\n"}
{"prompt":"∀x (VideoGag(x) → AirsWeekly(x) ∧ French(x)) ->","completion":" All videos aired on Video Gag are in French.\n"}
{"prompt":"∀x (Phone(x) → Thing(x)) ->","completion":" All phones are things.\n"}
{"prompt":"∀x (Cellphone(x) → Phone(x)) ->","completion":" All cellphones are phones. \n"}
{"prompt":"∀x (Iphone(x) → Cellphone(x)) ->","completion":" All iPhones are cellphones. \n"}
{"prompt":"∀x (Engineer(x) → Worker(x)) ->","completion":" All engineers are workers.\n"}
{"prompt":"∀x (Worker(x) → Human(x)) ->","completion":" All workers are human. \n"}
{"prompt":"Engineer(jack) ⊕ Worker(jack)  ->","completion":" Jack is either an engineer or a worker.\n"}
{"prompt":"Human(jack) ⊕ Phone(jack) ->","completion":" Jack is is either a human or a phone.\n"}
{"prompt":"∀x (IPhone(x) → Electronic(x)) ->","completion":" All iPhones are electronic.\n"}
{"prompt":"∃x (Phone(x) ∧ IPhone(x)) ->","completion":" Some phones are iPhones.\n"}
{"prompt":"Museum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt) ->","completion":" Metropolitan Museum of Art is a museum in NYC.\n"}
{"prompt":"Museum(whitneyMuseumofAmericanArt) ∧ InNYC(whitneyMuseumofAmericanArt) ->","completion":" Whitney Museum of American Art is a museum in NYC.\n"}
{"prompt":"Museum(museumofModernArt) ∧ InNYC(museumofModernArt) ->","completion":" Museum of Modern Art (MoMA) is a museum if NYC. \n"}
{"prompt":"Include(metropolitanMuseumofArt, byzantineArt) ∧ Include(metropolitanMuseumofArt, islamicArt) ->","completion":" Metropolitan Museum of Art includes Bytantine and Islamic Art. \n"}
{"prompt":"Include(whitneyMuseumofAmericanArt, americanArt) ->","completion":" Whitney Museum of American Art includes American art.\n"}
{"prompt":"∀x (Spanish(x) ∨ Francophile(x)) ->","completion":" A person either likes eating cheese or is a francophile.\n"}
{"prompt":"∀x (Francophile(x) → ¬SpainFav(x)) ->","completion":" No francophiles are people who like Spain as their favorite country.\n"}
{"prompt":"∀x (SpainFav(x) ∨ Cheese(x)) ->","completion":" A person likes Spain as their favorite country or likes eating cheese.\n"}
{"prompt":"¬(Cheese(benji) ∧ Spanish(benji)) ->","completion":" Benji is not a person who likes eating cheese and a person who studies Spanish.\n"}
{"prompt":"¬(Spanish(benji) ∨ French(benji)) → ¬(Cheese(benji) ⊕ French(benji)) ->","completion":" If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French.\n"}
{"prompt":"Village(gasteren) ∧ Province(drenthe) ∧ LocatedIn(gasteren, drenthe) ->","completion":" Gasteren is village located in the province of Drenthe.\n"}
{"prompt":"Province(drenthe) ∧ Dutch(drenthe) ->","completion":" Drenthe is a Dutch province. \n"}
{"prompt":"∀x (City(x) → ¬Village(x)) ->","completion":" No cities are villages.\n"}
{"prompt":"∃x (Population155(x) ∧ Village(x) ∧ LocatedIn(x, drenthe)) ->","completion":" The population of a village in Drenthe was 155 people.\n"}
{"prompt":"∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x))) ->","completion":" The only types of mammals that lay eggs are platypuses and echidnas.\n"}
{"prompt":"∀x (Platypuses(x) → ¬Hyrax(x)) ->","completion":" Platypuses are not hyrax.\n"}
{"prompt":"∀x (Echidnas(x) → ¬Hyrax(x)) ->","completion":" Echidnas are not hyrax.\n"}
{"prompt":"∀x (Mammal(x) → ¬Invertebrate(x)) ->","completion":" No mammals are invertebrates.\n"}
{"prompt":"∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x)) ->","completion":" All animals are either vertebrates or invertebrates.\n"}
{"prompt":"∀x (Mammal(x) → Animal(x)) ->","completion":" Mammals are animals.\n"}
{"prompt":"∀x (Hyrax(x) → Mammal(x)) ->","completion":" Hyraxes are mammals.\n"}
{"prompt":"∀x (Grebes(x) → LayEgg(x)) ->","completion":" Grebes lay eggs.\n"}
{"prompt":"∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x))) ->","completion":" Grebes are not platypuses and also not echidnas.\n"}
{"prompt":"Singer(bobbyFlynn) ∧ SongWriter(bobbyFlynn) ->","completion":" Bobby Flynn is a singer-songwriter. \n"}
{"prompt":"Finished7th(bobbyFlynn) ∧ CompetedOnAustralianIdol(bobbyFlynn) ->","completion":" Bobby Flynn finished 7th while competing on Australian Idol.\n"}
{"prompt":"∀x (CompetedOnAustralianIdol(x) → AustralianCitizen(x)) ->","completion":" Australian Idol competitors are Australian citizens.\n"}
{"prompt":"MadeNationWideTour2007(theOmegaThreeBand)  ->","completion":" The Omega Three band made a nationwide tour in 2007.\n"}
{"prompt":"IsMember(bobbyFlynn, theOmegaThreeBand) ->","completion":" Bobby Flynn is a member of The Omega Three band.\n"}
{"prompt":"BornIn(bobbyFlynn, queensland) ->","completion":" Bobby Flynn was born in Queensland.\n"}
{"prompt":"∀x (Protein(x) → OrganicCompound(x)) ->","completion":" All proteins are organic compounds.\n"}
{"prompt":"∀x (Enzyme(x) → OrganicCompound(x)) ->","completion":" All enzymes are organic compounds.\n"}
{"prompt":"American(maggiefriedman) ∧ Screenwriter(maggiefriedman) ∧ Producer(maggiefriedman) ->","completion":" One American screenwriter and producer is Maggie Friedman.\n"}
{"prompt":"ShowRunnerOf(maggiefriedman, witchesofeastend) ∧ ExecutiveProducerOf(maggiefriedman, witchesofeastend) ∧ LifetimeTelevisionSeries(maggiefriedman) ->","completion":" Maggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.\n"}
{"prompt":"Fantasy-Drama(witchesofeastend) ∧ Series(witchesofeastend) ->","completion":" Witches of East End is a fantasy-drama series.\n"}
{"prompt":"Produced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastwick) ->","completion":" Maggie Friedman produced and developed Eastwick.\n"}
{"prompt":"Series(eastwick) ∧ By(eastwick, abc) ->","completion":" Eastwick is a series by ABC.\n"}
{"prompt":"Greek(evangeloseleftheriou) ∧ ElectricalEngineer(evangeloseleftheriou) ->","completion":" Evangelos Eleftheriou is a Greek electrical engineer.\n"}
{"prompt":"WorkedFor(evangeloseleftheriou, ibm) ∧ WorkedIn(evangeloseleftheriou, zurich) ->","completion":" Evangelos Eleftheriou worked for IBM in Zurich.\n"}
{"prompt":"∀x ∀x ∀z (Company(x) ∧ WorkedFor(y, x) ∧ WorkedIn(y, z) → HasOfficeIn(x, z)) ->","completion":" If a company has employees working for them somewhere, then they have an office there.\n"}
{"prompt":"Company(ibm) ->","completion":" IBM is a company.\n"}
{"prompt":"∃x (Song(x) ∧ By(x, boneym) ∧ N1GermanSingle(x)) ->","completion":" Before releasing their single, \"Hooray! Hooray! It's a Holi-Holiday!\", Boney M. had had seven consecutive German #1 singles.\n"}
{"prompt":"Song(hooray) ∧ HitEurope(hooray) ->","completion":" \"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe.\n"}
{"prompt":"Song(hooray) ∧ ¬N1GermanSingle(hooray) ->","completion":" Nevertheless, \"Hooray! Hooray! It's a Holi-Holiday!\" broke Boney M's streak of consecutive German #1 singles.\n"}
{"prompt":"∀x (PeaksBelowN1(x) ↔ ¬N1GermanSingle(x)) ->","completion":" A song that peaks below #1 on the german charts is also a song that is not the #1 single\n"}
{"prompt":"∀x (Chef(x) → Cook(x)) ->","completion":" Every chef can cook.\n"}
{"prompt":"∃x (¬Chef(x) ∧ Cook(x)) ->","completion":" Some people who aren’t chefs can cook.\n"}
{"prompt":"∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x))) ->","completion":" People who cook can make scrambled eggs and pasta.\n"}
{"prompt":"∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x)) ->","completion":" If someone can make cookies and muffins, they are a baker.\n"}
{"prompt":"∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x)) ->","completion":" Bakers who can also make scrambled eggs can make a good breakfast.\n"}
{"prompt":"MakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke) ->","completion":" Luke can make cookies, scrambled eggs, and muffins, but not pasta.\n"}
{"prompt":"∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation)) ->","completion":" ETS develops various standardized tests primarily in the United States for K-12 and higher education. \n"}
{"prompt":"∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x))) ->","completion":" ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.\n"}
{"prompt":"∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions)) ->","completion":" Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. \n"}
{"prompt":"∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting)) ->","completion":" ETS also develops K-12 statewide assessments used for accountability testing in many states.\n"}
{"prompt":"∀x (Gelato(x) → Italy(x)) ->","completion":" All people who enjoy eating gelato ice cream would enjoy a vacation to Italy.\n"}
{"prompt":"∀x (¬Resist(x)) ->","completion":" There are no people who can resist the hallmark delectable drinks and desserts that are famed in Italy.\n"}
{"prompt":"∀x (Gelato(x) ∨ Travel(x)) ->","completion":" People either enjoy eating gelato ice cream or love to travel and vacation often.\n"}
{"prompt":"∀x (Europe(x) → ¬Regret(x)) ->","completion":" If people often take study abroad semesters to Europe, then they do not regret their college experiences.\n"}
{"prompt":"∀x (Travel(x) → Europe(x)) ->","completion":" If people love to travel and vacation often, then they often take study abroad semesters to Europe.\n"}
{"prompt":"(Gelato(robert) ∧ Travel(robert)) ∨ (¬Gelato(robert) ∧ ¬Travel(robert)) ->","completion":" Robert either enjoys eating gelato ice cream and loves to travel and vacation often, or he neither enjoys eating gelato ice cream nor loves to travel and vacation often.\n"}
{"prompt":"∀x (StudentVisa(x) → FullTimeAcademic(x)) ->","completion":" To get a student visa, you must be full-time enrolled in an academic program.\n"}
{"prompt":"∀x (FullTimeAcademic(x) → ¬WorkFullTime(x)) ->","completion":" Those who are full-time enrolled in an academic program can not work full-time.\n"}
{"prompt":"∀x (StudyAbroad(x) → StudentVisa(x)) ->","completion":" Everyone who wants to study abroad needs to have a student visa.\n"}
{"prompt":"∀x (PhdGraduate(x) → WorkFullTime(x)) ->","completion":" All PhD graduates can work full time. \n"}
{"prompt":"¬StudyAbroad(tom) → FullTimeAcademic(tom) ->","completion":" If Tom does not want to study abroad, he is full-time enrolled in an educational program.\n"}
{"prompt":"∀x (UsesGAAP(x) → UsesInstallmentMethod(x)) ->","completion":" The installment sales method is the approach to recognize revenue under the US GAAP.\n"}
{"prompt":"∀x (UsesAccruralAccounting(x) → RecognizedWhen(revenues, realized)) ->","completion":" In accrual accounting, revenues are recognized when they are realized.\n"}
{"prompt":"∀x (UsesCashAccounting(x) → RecognizedWhen(revenues, cashrecieved)) ->","completion":" In cash accounting, revenues are recognized when cash is received.\n"}
{"prompt":"DevelopedBy(usgaap, ussecuritiesandexchangecommission) ∧ UsesGAAP(ussecuritiesandexchangecommission) ->","completion":" The US GAAP is the accounting standard developed and used by the US Securities and Exchange Commission.\n"}
{"prompt":"WorksFor(sally, ussecuritiesandexchangecommission) ->","completion":" Sally works for the US Securities and Exchange Commission.\n"}
{"prompt":"∀x (Respected(x) → ContributeToCountry(x)) ->","completion":" All people who are respected by others are people who contribute to the country. \n"}
{"prompt":"∀x (Respected(x) → ContributeToCountry(x)) ->","completion":" If a person is respected by others, then he\/she contributes to the country. \n"}
{"prompt":"∀x (HaveVisitWithoutAnyFees(x) → Respected(x)) ->","completion":" All people available to have a visit without any fees are those respected by others. \n"}
{"prompt":"∀x (Army(x) → HaveVisitWithoutAnyFees(x)) ->","completion":" All Customers who once served in the army are available to have a visit without any fees. \n"}
{"prompt":"∀x (Thief(x) → Prison(x)) ->","completion":" All people who once were sentenced for thief stayed in prison for some time. \n"}
{"prompt":"∀x (Prison(x) → BadRecord(x)) ->","completion":" All people who once stayed in prison for some time have a bad record in the local state. \n"}
{"prompt":"Thief(james) ⊕ Prison(james)  ->","completion":" James was either once sentenced for thief or stayed in prison for some time. \n"}
{"prompt":"BadRecord(james) ⊕ Respected(james) ->","completion":" James is either with a bad record in the local state or respected by others. \n"}
{"prompt":"DrainageBasinOf(crotonriverwatershed, crotonriver) ->","completion":" The Croton River watershed is the drainage basin of the Croton River.\n"}
{"prompt":"In(crotonriver, southwesternnewyork) ->","completion":" The Croton River is in southwestern New York.\n"}
{"prompt":"∃x (Water(x) ∧ From(x, crotonriverwatershed) ∧ FlowsTo(x, bronx)) ->","completion":" Water from the Croton River watershed flows to the Bronx.\n"}
{"prompt":"In(bronx, newyork) ->","completion":" The Bronx is in New York.\n"}
{"prompt":"∀x (NuclearPoweredSubmarine(x) → Warship(x)) ->","completion":" All nuclear-powered submarines are warships.\n"}
{"prompt":"∀x (NuclearPoweredSubmarine(x) → ¬CommercialVessel(x)) ->","completion":" No nuclear-powered submarines are commercial vessels.\n"}
{"prompt":"∀x ∀y ∀z (AlbumByBand(x, y) ∧ RockBand(y, z) → Genre(x, rock)) ->","completion":" If a album is written by a rock band, then the genre of the album is rock.\n"}
{"prompt":"∀x ∀y ∀z (AlbumByBand(x, y) ∧ AlbumAward(x, z) → RockBandAward(y, z)) ->","completion":" If a band writes a album winning an award, then this band wins this award.\n"}
{"prompt":"AlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip) ->","completion":" Trouble at the Henhouse is an album by The Tragically Hip.\n"}
{"prompt":"RockBand(the_Tragically_Hip, canada) ->","completion":" The Tragically Hip is a Canadian rock band.\n"}
{"prompt":"SongInAlbum(butts_Wigglin, trouble_at_the_Henhouse) ->","completion":" The song \"Butts Wigglin'\" is in Trouble at the Henhouse.\n"}
{"prompt":"AlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year) ->","completion":" Trouble at the Henhouse won the Album of the Year award.\n"}
{"prompt":"∃x (SongInFilm(x) ∧ SongInAlbum(x, trouble_at_the_Henhouse)) ->","completion":" A song in Trouble at the Henhouse appeared in a film.\n"}
{"prompt":"SoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTechnologies) ->","completion":" Daniel is a software engineer and he works at Palantir Technologies.\n"}
{"prompt":" StudiedBioengineering(daniel, riceUniversity) ->","completion":" Daniel studied bioengineering during his undergraduate at Rice University.\n"}
{"prompt":" WorksAtMeta(danielsOlderSister) ∧ TechnicalSourcer(danielsOlderSister) ->","completion":" Daniel’s older sister works at Meta as a technical sourcer. \n"}
{"prompt":" GraduatedFromStanfordUniversity(danielsOlderSister) ∧ GraduatedFromStanfordUniversity(danielsDad) ->","completion":" Daniel’s dad and older sister both graduated from Stanford University.\n"}
{"prompt":" DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis) ->","completion":" Daniel’s dad is a doctor practicing internal medicine at a veteran’s hospital in Minneapolis\n"}
{"prompt":"∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus)) ->","completion":" All commerical aircraft are produced by either Boeing or Airbus.\n"}
{"prompt":"∀x (AmericanAirlinesAircraft(x) → CommercialAircraft(x)) ->","completion":" All American Airlines jets are commerical aircraft. \n"}
{"prompt":"MoreinRevenue(airbus, boeing) ->","completion":" Airbus made more in revenue than Boeing last year.\n"}
{"prompt":"Island(luzon) ∧ In(luzon, philippines) ->","completion":" Luzon is an island in the Philippines.\n"}
{"prompt":"∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon)) ->","completion":" In December 1999, an earthquake struck Luzon.\n"}
{"prompt":"∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon) ∧ Killed(x)) ->","completion":" People died in the December 1999 earthquake in Luzon.\n"}
{"prompt":"∀x (Invests(x) ∨ Gambling(x)) ->","completion":" People either invest in the public stock market regularly or enjoy gambling regularly.\n"}
{"prompt":"∀x (Invests(x) → Newspapers(x)) ->","completion":" If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.\n"}
{"prompt":"∀x (Gambling(x) → Casinos(x)) ->","completion":" All people who enjoy gambling regularly spend a lot of money at casinos and other betting games.\n"}
{"prompt":"∀x (Casinos(x) → LasVegas(x)) ->","completion":" People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly.\n"}
{"prompt":"∀x (Casinos(x) → DisposableIncome(x)) ->","completion":" People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend.\n"}
{"prompt":"Invests(matt) → ¬DisposableIncome(matt) ∧ ¬Invests(matt) ->","completion":" If Matt invests in the public stock market regularly, then Matt neither has a lot of disposable income to spend nor invests in the public stock market regularly. \n"}
{"prompt":"∀x (Student(x) ∧ LearningPiano(x) → StrikeRightNotes(x)) ->","completion":" All students learning piano can strike the right notes. \n"}
{"prompt":"∀x (Student(x) ∧ StrikeRightNotes(x) → GetRhythmRight(x)) ->","completion":" All students who can strike the right note can get the rhythms right. \n"}
{"prompt":"∀x (Student(x) ∧ GetRhythmRight(x) → StartCoordination(x)) ->","completion":" If a student can get the rhythms right, he will start working on coordination between the left and the right hands. \n"}
{"prompt":"∀x (Student(x) ∧ StartCoordination(x) → GoodAtCoordination(x) ⊕ FindCoordinationChallenging(x)) ->","completion":" Some students who start working on coordination between the left and the right hands become good at it. The other students find it challenging. \n"}
{"prompt":"StrikeRightNotes(john) ∧ GetRhythmRight(john) ∧ GoodAtCoordination(john) → PutEmotion(john) ->","completion":" If John can strike the right notes, get the rhythms right and is good at coordination between right and left hands, then he puts emotions into his playing. \n"}
{"prompt":"Student(john) ∧ LearningPiano(john) ->","completion":" John is a student learning piano. \n"}
{"prompt":"¬FindCoordinationChallenging(john) ->","completion":" John does not find coordination between the left and the right hands challenging. \n"}
{"prompt":"FormerSwimmer(barbaraannmarshall) ∧ FormerWorldRecordHolder(barbaraannmarshall) ->","completion":" Barbara Ann Marshall is a former swimmer and former world record-holder.\n"}
{"prompt":"ParticipatedIn(barbaraannmarshall, summer1972olympics) ->","completion":" Barbara Ann Marshall participated in the 1972 Summer Olympics.\n"}
{"prompt":"HomeCountry(barbaraannmarshall, unitedstates) ->","completion":" Barbara Ann Marshall's home country is the United States.\n"}
{"prompt":"∀x ∃y (ParticipatedIn(x, summer1972olympics) ∧ HomeCountry(x, y) → Represented(x, y)) ->","completion":" All people who compete in the 1972 Summer Olympics represent their home country.\n"}
{"prompt":"ParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay) ->","completion":" Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.\n"}
{"prompt":"¬ParticipatedIn(barbaraannmarshall, finalheatfreestylerelay) ->","completion":" Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.\n"}
{"prompt":"∀x ((RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalheatfreerelay)) ↔ ¬Recieved(x, medal))) ->","completion":" Only relay swimmers who participated in the event final received medals.\n"}
{"prompt":"∃x (Player(x)) ->","completion":" A game is played with three stages: red stage, yellow stage, and green stage.\n"}
{"prompt":"∀x (Player(x) → StartRed(x)) ->","completion":" Each player begins at the red stage.\n"}
{"prompt":"∀x (Player(x) → YellowToGreen(x)) ->","completion":" All players must reach the yellow stage before they can reach the green stage.\n"}
{"prompt":"∀x (Player(x) → RedToYellow(x)) ->","completion":" The yellow stage comes after the red stage.\n"}
{"prompt":"∀x (Player(x) → ¬RedToGreen(x)) ->","completion":" All players must proceed one stage at a time.\n"}
{"prompt":"∀x (Physical(x) ∨ Words(x)) ->","completion":" People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.\n"}
{"prompt":"∀x (Physical(x) → GoodWithPets(x)) ->","completion":" If a person values physical touch as an especially important love language, then they are good with pets.\n"}
{"prompt":"∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x)) ->","completion":" No people that are good with pets are scared of animals.\n"}
{"prompt":"∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x)) ->","completion":" People are either scared of animals or love animals.\n"}
{"prompt":"Physical(adam) ⊕ LoveAnimals(adam) ->","completion":" Adam is either a person who values physical touch as an especially important love language or a person who loves animals.\n"}
{"prompt":"∀x (Bird(x) → Winged(x)) ->","completion":" All birds have wings.\n"}
{"prompt":"∀x (Winged(x) → ¬Reptile(x)) ->","completion":" No animal with wings is a reptile.\n"}
{"prompt":"∃x (Fly(x) ∧ Bird(x)) ->","completion":" Some animals that fly are birds.\n"}
{"prompt":"∀x (Iguana(x) → Reptile(x)) ->","completion":" If something is an iguana, then it is a reptile.\n"}
{"prompt":"¬Iguana(john) ⊕ Bird(john) ->","completion":" John is neither an iguana nor a bird.\n"}
{"prompt":"Movie(endGame) ∧ Released(endGame, year2006) ->","completion":" EndGame is a movie released in 2006.\n"}
{"prompt":"Set(endGame, washington) ->","completion":" EndGame was set in Washington.\n"}
{"prompt":"FilmedOutside(endGame, washington) ->","completion":" EndGame was filmed outside of Washington.\n"}
{"prompt":"∃x (FilmedIn(x, newYork)) ->","completion":" Some movies are filmed in New York.\n"}
{"prompt":"Directed(andyChang, endGame) ->","completion":" Andy Chang directed EndGame.\n"}
{"prompt":"From(andyChang, hongKong) ->","completion":" Andy Chang is from Hong Kong.\n"}
{"prompt":"RealNum(six) ∧ RealNum(seven) ∧ RealNum(eight) ->","completion":" Six, seven and eight are real numbers.\n"}
{"prompt":"∀x ∀y (RealNum(x) ∧ RealNum(y) ∧ EqualAddOne(x, y) → Larger(x, y)) ->","completion":" If a real number equals another real number adding one, the first number is larger.\n"}
{"prompt":"∀x ∀y (Larger(x, y) ↔ ¬Larger(y, x)) ->","completion":" If the number x is larger than number y, then y is not larger than x.\n"}
{"prompt":"EqualAddOne(seven, six) ->","completion":" Seven equals six plus one.\n"}
{"prompt":"EqualAddOne(eight, seven) ->","completion":" Eight equals seven plus one.\n"}
{"prompt":"Positive(two) ->","completion":" Two is positive.\n"}
{"prompt":"∀x ∀y ((Positive(x) ∧ EqualDouble(y, x)) → Positive(y)) ->","completion":" If a number is positive, then the double of it is also positive.\n"}
{"prompt":"EqualDouble(eight, four) ->","completion":" Eight is the double of four.\n"}
{"prompt":"EqualDouble(four, two) ->","completion":" Four is the double of two.\n"}
{"prompt":"∀x (Dog(x) → NeverTellsTruth(x)) ->","completion":" A dog never tells the truth.\n"}
{"prompt":"∃x (PokerPlayer(x) ∧ Dog(x)) ->","completion":" Some poker players are dogs.\n"}
{"prompt":"∀x ( Asian(x)→  Human(x)) ->","completion":" All Asians are human. \n"}
{"prompt":"∀x ( Chinese(x)→  Asian(x)) ->","completion":" All Chinese are Asian.\n"}
{"prompt":"∀x ( Chinese(x) ∨  British(x)) ->","completion":" A man is either Chinese or British.\n"}
{"prompt":"∀x ( British(x)→  European(x)) ->","completion":" All British are European. \n"}
{"prompt":"∀x ( Spanish(x)→  European(x)) ->","completion":" All Spanish are European. \n"}
{"prompt":"∀x ( Indian(x)→ ¬ European(x)) ->","completion":" No Indian is European. \n"}
{"prompt":"( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse)) ->","completion":" Jessee is either both an Indian and a human, or neither an Indian nor a human.\n"}
{"prompt":"∀x (NeverAdmitMistakes(x) → ¬GoodTeacher(x)) ->","completion":" No people who never admit a mistake are good teachers.\n"}
{"prompt":"∃x (WellInformed(x) ∧ NeverAdmitMistakes(x)) ->","completion":" Some well-informed people are people who never admit a mistake.\n"}
{"prompt":"∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x))) ->","completion":" Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material\n"}
{"prompt":"¬Stamp(mort) ->","completion":" Mort is not a Stamp catalogue.\n"}
{"prompt":"¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort)) ->","completion":" Mort is not a periodical, auction catalogue, bibliography, or background material.\n"}
{"prompt":"PhilatelicLit(mort) ->","completion":" Mort is a piece of Philatelic literature.\n"}
{"prompt":"DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty) ->","completion":" Adventures of Rusty is a drama film and children's film.\n"}
{"prompt":"Produced(columbiapictures, adventuresofrusty) ->","completion":" Columbia Pictures produced Adventures of Rusty\n"}
{"prompt":"Produced(paramount, tintin) ->","completion":" Tintin was produced by Paramount.\n"}
{"prompt":"AdventureFilm(tintin) ->","completion":" Tintin is an adventure film.\n"}
{"prompt":"ParamountLeaderOf(dengxiaoping, prc) ->","completion":" Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC). \n"}
{"prompt":"PraisedFor(dengxiaoping, reaffirmationofreformprogram) ∧ PraisedFor(dengxiaoping, reversionofhongkong) ∧ PraisedFor(dengxiaoping, returnofmacau) ->","completion":" Deng Xiaoping was praised for his reaffirmation of the reform program in his Southern Tour of 1992 as well as the reversion of Hong Kong to Chinese control in 1997 and the return of Macau in 1999.\n"}
{"prompt":"PartysSecretaryGeneral(dengxiaoping) ∧ Under(dengxiaoping, mao) ∧ VicePremier(dengxiaoping) ∧ PresidedOver(dengxiaoping, antirightistcampaign) ∧ LaunchedBy(antirightistcampaign, mao) ->","completion":" As the party's Secretary-General under Mao and Vice Premier in he 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.\n"}
{"prompt":"InstrumentalIn(dengxiaoping, chinaseconomicreconstruction) ∧ Following(chinaseconomicreconstruction, greatleapforward) ∧ Disastrous(greatleapforward) ->","completion":" Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958–1960).\n"}
{"prompt":"DiedIn(mao, y1976) ->","completion":" Mao Zedong died in 1976.\n"}
{"prompt":"GraduallyRoseTo(dengxiaoping, supremepower) ->","completion":" After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power.\n"}
{"prompt":"∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x)) ->","completion":" All imaginative processes are produced in human brains.\n"}
{"prompt":" ∀x (Science-fiction(x) → ImaginativeProcess(x))  ->","completion":" All science-fiction is from an imaginative process.\n"}
{"prompt":" ∀x (Science-fiction(x) ∨ Fact(x)) ->","completion":" Either science-fiction or fact. \n"}
{"prompt":" ∀x (Fact(x) → ¬ProvedToBeFalse(x))  ->","completion":" No facts are proven to be false.\n"}
{"prompt":" Science-fiction(dune) ∨ ProvedToBeFalse(dune) ->","completion":" Dune is a science-fiction or proven to be false.\n"}
{"prompt":"∀x (Superhero(x) ∧ American(x) → (ComeFrom(x, dc universe) ⊕ ComeFrom(x, marvel universe)))  ->","completion":" An American superhero comes from either DC universe or Marvel universe.\n"}
{"prompt":" Superhero(captain america)  ->","completion":" Captain America is a superhero.\n"}
{"prompt":" American(captain america)  ->","completion":" Captain America is an American.\n"}
{"prompt":" ¬ComeFrom(captain america, dc universe)  ->","completion":" Captain America does not come from DC universe.\n"}
{"prompt":" ∀x (Superhero(x) ∧ American(x) → Speak(x, english))  ->","completion":" If a superhero is American, he speaks English.\n"}
{"prompt":" ∀x (Superhero(x) → (Speak(x, english) ∨ Speak(x, spanish))) ->","completion":" A superhero speaks English or Spanish.\n"}
{"prompt":"BornInGermany(robertZimmer) ->","completion":" Robert Zimmer was born in Germany.\n"}
{"prompt":"IsEssayist(robertZimmer) ->","completion":" Robert Zimmer is an essayist.\n"}
{"prompt":"BornIn(robertZimmer, year1953) ->","completion":" Robert Zimmer was born in 1953.\n"}
{"prompt":"∀x (IsEssayist(x) → IsWriter(x)) ->","completion":" Every essayist is a writer.\n"}
{"prompt":"∀x (BornInGermany(x) → IsGerman(x)) ->","completion":" Every person born in Germany is German.\n"}
{"prompt":"∀x (Repay(x) → HighCreditScore(x)) ->","completion":" All people who repay their loans on time have a high credit score.\n"}
{"prompt":"∃x ((HighCreditScore(x) ∧ HighSalary(x)) → Mortgage(x)) ->","completion":" Some people with high credit scores and high salaries are approved for mortgages.\n"}
{"prompt":"HighSalary(john) ->","completion":" John has a high salary.\n"}
{"prompt":"∀x (Student(x) → MemberOfUniversity(x)) ->","completion":" All students are members of the university.\n"}
{"prompt":"∀x (GraduateStudent(x) → Student(x)) ->","completion":" All graduate students are students.\n"}
{"prompt":"∀x (PhDStudent(x) → GraduateStudent(x)) ->","completion":" All PhD students are graduate students.\n"}
{"prompt":"∃x (PhDStudent(x) ∧ HighIQ(x)) ->","completion":" Some PhD students have high IQs.\n"}
{"prompt":"¬PhDStudent(john) → ¬MemberOfUniversity(john) ->","completion":" If John is not a PhD student, then he is not a member of the university.\n"}
{"prompt":"HighIQ(john) → PhDStudent(john) ⊕ GraduateStudent(john) ->","completion":" If John has a high IQ, then he is a PhD student or a graduate student.\n"}
{"prompt":"EuropeanCountry(belgium) ∨ EuropeanCountry(france) ∨ EuropeanCountry(germany) ->","completion":" Belgium, France and Germany are European countries.\n"}
{"prompt":"CapitalOf(paris, france) ->","completion":" Paris is the capital of France.\n"}
{"prompt":"TouristAttraction(eiffelTower) ∧ LocatedIn(eiffelTower, paris) ->","completion":" The Eiffel Tower is one of the main tourist attractions located in Paris.\n"}
{"prompt":"∃x (LiveIn(x, belgium) → Speak(x, french)) ->","completion":" Some people who live in Belgium speak French.\n"}
{"prompt":"∃x (GoTo(john, europe) → (See(john, x) ∧ TouristAttraction(x))) ->","completion":" If John goes to Europe, he will see some tourist attractions.\n"}
{"prompt":"Speak(john, french) ->","completion":" John speaks French.\n"}
{"prompt":"∀x (SportsCar(x) → LoudCar(x)) ->","completion":" All sports cars are loud.\n"}
{"prompt":"∀x (LoudCar(x) → ¬ElectricCar(x)) ->","completion":" No loud cars are electric.\n"}
{"prompt":"∀x (Ferrari(x) → SportsCar(x)) ->","completion":" If a car is a Ferrari, then it is a sports car.\n"}
{"prompt":"∀x (MadeInMaranello(x) → Ferrari(x)) ->","completion":" All cars made in Maranello are Ferrari\n"}
{"prompt":"∀x (¬SportsCar(prius) ∨ ¬LoudCar(prius) → MadeInMaranello(prius) ∨ LoudCar(prius)) ->","completion":" If Prius is neither a sports car nor a loud car, then Prius is a Maranello-made car or a loud car.\n"}
{"prompt":"∀x (Plant(x) → ¬CuteAnimal(x)) ->","completion":" If something is a plant, then it is not a cute animal.\n"}
{"prompt":"∀x (Flower(x) → Plant(x)) ->","completion":" All flowers are plants.\n"}
{"prompt":"∀x (Kitten(x) → CuteAnimal(x)) ->","completion":" Every kitten is a cute animal.\n"}
{"prompt":"∀x (GrownInGarden(x) → Flower(x)) ->","completion":" If something is grown in a garden, then it is a flower.\n"}
{"prompt":"Kitten(piper) ∨ CuteAnimal(piper) ->","completion":" Piper is a kitten or a cute animal.\n"}
{"prompt":"ParticipatedIn(guam, winterolympics) ->","completion":" Guam has participated in the Winter Olympics.\n"}
{"prompt":"Year(y1988) → BeHeld(winterolympics, calgary) ->","completion":" In 1988, the Winter Olympics were held in Calgary.\n"}
{"prompt":"BeHeld(winterolympics, calgary) → SendAthletes(guam) ->","completion":" Guam sent an athlete to the Calgary Winter Olympics.\n"}
{"prompt":"SendAthletes(guam) → ParticipatedIn(guam, winterolympics) ->","completion":" If Guan sent an athlete to the Calgary Winter Olympics, then it participated in the Calgary Winter Olympics.\n"}
{"prompt":"BeFrom(bankert, guam) ∧ ParticipatedIn(bankert, winterolympics) ->","completion":" Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics.\n"}
{"prompt":"British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael) ->","completion":" Michael O'Donnell is a British physician, journalist, author and broadcaster.\n"}
{"prompt":"WordSetter(michael) ->","completion":" One of the word-setters of My Word! was Michael O'Donnell.\n"}
{"prompt":"Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael) ->","completion":" The magazine World Medicine was edited by Michael O'Donnell.\n"}
{"prompt":"∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x)) ->","completion":" Michael O'Donnell was born in Yorkshire as the son of a general practitioner.\n"}
{"prompt":"∀x (Homework(x) → ¬IsFun(x)) ->","completion":" No homework is fun.\n"}
{"prompt":"∃x (IsReading(x) ∧ Homework(x)) ->","completion":" Some reading is homework.\n"}
{"prompt":"∀x ((Violence(x) ∧ Good(x)) → Justified(x)) ->","completion":" If violence is good, it is justified.\n"}
{"prompt":"∀x (Justified(x) → Lawful(x)) ->","completion":" If something is justified, it is lawful.\n"}
{"prompt":"∀x (Ranch(x) → RegularlyRide(x)) ->","completion":" All people who have a horse ranch regularly ride horses for pleasure and sport.\n"}
{"prompt":"∀x (DisposableIncome(x) → Ranch(x)) ->","completion":" All people who have a lot of disposable income have a horse ranch.\n"}
{"prompt":"∀x (Compete(x) → DisposableIncome(x)) ->","completion":" If people compete in horse dressage shows, then they have a lot of disposable income.\n"}
{"prompt":"∀x (Compete(x) → Invested(x)) ->","completion":" If people compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment.\n"}
{"prompt":"∀x (RegularlyRide(x) → ¬Cramped(x)) ->","completion":" If people regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings.\n"}
{"prompt":"(Ranch(manny) ∧ Cramped(manny)) ⊕ (¬Ranch(manny) ∧ ¬Cramped(manny)) ->","completion":" Manny either has a horse ranch and lives in cramped residential buildings, or he neither has a horse ranch nor lives in cramped residential buildings.\n"}
{"prompt":"∀x (Roundel(x) → Rounded(x) ∧ ArtilleryFortification(x)) ->","completion":" A roundel is a rounded artillery fortification.\n"}
{"prompt":"∀x ∀y (Roundel(x) ∧ AdjacentWall(y) → ¬Higher(x, y)) ->","completion":" A roundel is not higher than adjacent walls. \n"}
{"prompt":"∀x (ArtilleryFortification(x) → DeployCannons(x)) ->","completion":" Cannons can be deployed on artillery fortifications. \n"}
{"prompt":"∀x ∀y (Roundel(x) ∧ ArtilleryFortification(x) ∧ ArtilleryFortification(y) → Older(x, y)) ->","completion":" Roundels are the oldest artillery fortifications.\n"}
{"prompt":"∀x (BatteryTower(x) → ArtilleryFortification(x)) ->","completion":" Battery towers are an artillery fortification.\n"}
{"prompt":"∀x (Tissue(x) → Soft(x)) ->","completion":" All tissues are soft.\n"}
{"prompt":"∃x (Paper(x) ∧ Tissue(x)) ->","completion":" Some papers are tissues.\n"}
{"prompt":"∀x (Volunteer(x) → GetIntangibleBenefits(x)) ->","completion":" All volunteers receive intangible benefits for their work.\n"}
{"prompt":"∀x (Volunteer(x) → WorkRegularly(x) ∨ WorkAsNeeded(x)) ->","completion":" Volunteers work regularly or on an as-needed basis.\n"}
{"prompt":"∃x (Volunteer(x) → Trained(x)) ->","completion":" Some volunteers are trained.\n"}
{"prompt":"∀x (Volunteer(x) → (WorkInGroup(x) ∨ WorkIndividually(x))) ->","completion":" Volunteers work in groups or individually.\n"}
{"prompt":"∀x (Volunteer(x) ∧ Environmental(x) → (ContributeTo(x, environmentalmanagement) ∨ ContributeTo(x, environmentalconservation))) ->","completion":" Environmental volunteers contribute toward environmental management or conservation.\n"}
{"prompt":"∃x (Volunteer(x) ∧ ContributeTo(x, naturaldisasterresponse) → WorkInGroup(x) ∧ WorkAsNeeded(x)) ->","completion":" Participating in natural disaster response is an example of volunteers working in groups on an as-needed basis.\n"}
{"prompt":"∀x (Consistent(x) → NoSurprises(x)) ->","completion":" All people who are very consistent and enjoy sticking to their regular routines do not like surprises.\n"}
{"prompt":"∀x (Flannel(x) → Consistent(x)) ->","completion":" If people wear flannel shirts every day, then they are very consistent and enjoy sticking to their regular routines.\n"}
{"prompt":"∀x (NoShopping(x) → Flannel(x)) ->","completion":" If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day.\n"}
{"prompt":"∀x (Old(x) → NoSurprises(x)) ->","completion":" All old people living in stable homes do not like surprises.\n"}
{"prompt":"∀x (Impulsive(x) → ¬NoSurprises(x)) ->","completion":" If people have very high energy and are impulsive, then they like surprises.\n"}
{"prompt":"¬(NoSurprises(mike) ∧ Impulsive(mike)) → Consistent(mike) ⊕ NoSurprises(mike) ->","completion":" If Mike is not a person who wears flannel shirts every day and has very high energy and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises.\n"}
{"prompt":"∃x (Owns(adam, x)) ->","completion":" Adam owns cars.\n"}
{"prompt":"∃x (Favorite(adam, x)) ->","completion":" Adam has a favorite car.\n"}
{"prompt":"∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → European(x)) ->","completion":" Among the cars he owns, Adam's favorite car is European.\n"}
{"prompt":"∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → Broke(adam, x)) ->","completion":" Adam broke his favorite car.\n"}
{"prompt":"∀x (NewHaven(x) → ¬High(x)) ->","completion":" No buildings in New Haven are higher than 400 meters. \n"}
{"prompt":"∀x (YaleHousing(x) → NewHaven(x)) ->","completion":" All buildings managed by Yale Housing are in New Haven. \n"}
{"prompt":"∀x (Manhattan(x) → High(x)) ->","completion":" All buildings in Manhattan are higher than 400 meters. \n"}
{"prompt":"∀x (Bloomberg(x) → Manhattan(x)) ->","completion":" All buildings owned by Bloomberg are in Manhattan. \n"}
{"prompt":"∀x (BloombergLogo(x) → Bloomberg(x)) ->","completion":" All buildings with the Bloomberg logo are buildings owned by Bloomberg. \n"}
{"prompt":"¬(NewHaven(towera) ⊕ Manhattan(towera)) ->","completion":" Tower A is neither in New Haven nor in Manhattan.\n"}
{"prompt":"BloombergLogo(towerb) ∧ Manhattan(towerb) ->","completion":" Tower B is a building with the Bloomberg logo and in Manhattan. \n"}
{"prompt":"∀x (Fish(x) → ¬Bird(x)) ->","completion":" No fish are birds.\n"}
{"prompt":"∀x (Osprey(x) → Bird(x)) ->","completion":" Everything that is an osprey is a bird.\n"}
{"prompt":"∀x (Carp(x) → Fish(x)) ->","completion":" If something is a carp, then it is a fish.\n"}
{"prompt":"∀x (Goldfish(x) → Carp(x)) ->","completion":" All goldfish are carp.\n"}
{"prompt":"Osprey(bubbles) ⊕ Carp(bubbles) → ¬Fish(bubbles) ->","completion":" If Bubbles is either an osprey or a goldfish, then Bubbles is not a fish.\n"}
{"prompt":"∀x (WantToGo(x) → (California(x) ∨ Florida(x)) ∧ (NeverGo(x))) ->","completion":" Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.\n"}
{"prompt":"∀x (((SanFrancisco(x) ∨ LosAngeles(x) ∨ SanDiego(x)) ∧ California(x)) → WantToGo(x)) ->","completion":" Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.\n"}
{"prompt":"∀x ((Orlando(x) ∨ Miami(x)) ∧ Florida(x)) → WantToGo(x)) ->","completion":" Cities in Florida that they are interested in are Orlando and Miami.\n"}
{"prompt":"CaliforniaCityVisited(mr.smith, two) ->","completion":" Mr. Smith has been to two cities in California.\n"}
{"prompt":"FloridaCityVisited(mrs.smith, one) ->","completion":" Mrs. Smith has been to one city in Florida.\n"}
{"prompt":"∀x (Big(x) ⊕ Small(x)) ->","completion":" Everything is either big or small.\n"}
{"prompt":"∀x (Big(x) → Heavy(x)) ->","completion":" All big things are heavy. \n"}
{"prompt":"∀x (Small(x) → Light(x)) ->","completion":" All small things are light. \n"}
{"prompt":"∀x (Heavy(x) → Still(x)) ->","completion":" All heavy things are still.\n"}
{"prompt":"∀x (Light(x) → Unstable(x)) ->","completion":" All light things are unstable.\n"}
{"prompt":"∀x (Unstable(x) → Changing(x)) ->","completion":" All unstable things are changing.\n"}
{"prompt":"∀x (Unstable(x) → Kinetic(x)) ->","completion":" All unstable things are kinetic. \n"}
{"prompt":"¬(Heavy(bird) ∧ Still(bird)) ->","completion":" A bird is not both heavy and still.\n"}
{"prompt":"TelevisionSeries(diRay) ->","completion":" DI Ray is a police procedural television series.\n"}
{"prompt":"Create(maya, diRay) ∧ Write(maya, diRay) ->","completion":" DI Ray was created and written by Maya Sondhi.\n"}
{"prompt":"Produce(jed, diRay) ->","completion":" DI Ray was produced by Jed Mercurio.\n"}
{"prompt":"British(maya) ∧ British(jed)  ->","completion":" Maya Sondhi and Jed Mercurio are both British.\n"}
{"prompt":"∀x (Man(x) → Human(x)) ->","completion":" All men are human.\n"}
{"prompt":"∀x (Gentleman(x) → Man(x)) ->","completion":" All gentlemen are men.\n"}
{"prompt":"∀x (Lawyer(x) → Gentleman(x)) ->","completion":" All lawyers are gentlemen.\n"}
{"prompt":"∀x (Woman(x) → Human(x)) ->","completion":" All women are human.\n"}
{"prompt":"∀x (Sheep(x) → ¬Human(x)) ->","completion":" No sheep are human.\n"}
{"prompt":"(¬Human(mike) ∨ ¬Sheep(mike)) → Man(mike) ⊕ Human(mike) ->","completion":" If Mike is not both a human and a sheep, then Mike is either a man or a human.\n"}
{"prompt":"∃x (Defender(x) ∧ Centerback(x)) ->","completion":" Some defenders are centerback.\n"}
{"prompt":"NBAPlayer(stephencurry) ->","completion":" Stephen Curry is an NBA player.\n"}
{"prompt":"∀x ∀y (Person(x) ∧ Product(y) ∧ ¬HaveEnoughMoneyFor(x, y) → ¬Buy(x, y)) ->","completion":" If a person doesn't have enough money to buy a product, then that person can't buy it.\n"}
{"prompt":"∀x (Monitor(x) → Product(x)) ->","completion":" Monitors are products.\n"}
{"prompt":"∀x ∀y ∀z (Monitor(x) ∧ Monitor(y) ∧ Monitor(z) ∧ FourK(x) ∧ OneOEightO(y) ∧ TwoK(z) → MoreExpensive(x, y) ∧ MoreExpensive(x, z)) ->","completion":" 4k monitors are more expensive than 1080 monitors and 2k monitors.\n"}
{"prompt":"Person(john) ->","completion":" John is a person.\n"}
{"prompt":"∀x (Monitor(x) ∧ TwoK(x) → ¬HaveEnoughMoneyFor(john, x)) ->","completion":" John doesn't have enough money to buy a 2k monitor.\n"}
{"prompt":"∀x (ArtificialSatellite(x) → ImportantScientificAchievement(x)) ->","completion":" All artificial satellites are important scientific achievements.\n"}
{"prompt":"∃x (ArtificialSatellite(x) ∧ ¬USInvention(x)) ->","completion":" Some artificial satellites are not U.S. inventions.\n"}
{"prompt":"∃x (Cat(x) ∧ ¬Pet(x)) ->","completion":" Some cats are not pets.\n"}
{"prompt":"∀x (Cat(x) → Mammal(x)) ->","completion":" All cats are mammals.\n"}
{"prompt":"∀x (CoffeeShop(x) → CaffeineAddict(x)) ->","completion":" If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.\n"}
{"prompt":"∀x (CoffeeShop(x) ∨ Takeout(x)) ->","completion":" People either visit a coffee shop at least three times a week or order takeout at least once a day.\n"}
{"prompt":"∀x (MakeFood(x) → Takeout(x)) ->","completion":" If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.\n"}
{"prompt":"∀x (KitchenAppliance(x) → ¬Takeout(x)) ->","completion":" If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.\n"}
{"prompt":"∀x (Busy(x) → MakeFood(x)) ->","completion":" All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.\n"}
{"prompt":"(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam)) ->","completion":" Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours\n"}
{"prompt":"¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x))) ->","completion":" No professional basketball players are soccer players.\n"}
{"prompt":"∀x (Centerback(x) → Defender(x)) ->","completion":" All centerbacks are defenders.\n"}
{"prompt":"¬(NBAPlayer(rogerfederer) ⊕ Defender(rogerfederer)) ->","completion":" Roger Federer is not an NBA player or a defender.\n"}
{"prompt":"∃x (TeacherWorkingAtPool(x) ∧ ¬Nice(x)) ->","completion":" Some teachers working at a pool are not nice.\n"}
{"prompt":"∀x (TeacherWorkingAtPool(x) → PoolManager(x)) ->","completion":" All teachers working at pools are pool managers.\n"}
{"prompt":"∀x (PoolManager(x) → Lifeguard(x)) ->","completion":" All pool managers are lifeguards.\n"}
{"prompt":"∀x (Lifeguard(x) → WorkAtPool(x)) ->","completion":" If someone is a lifeguard, then they work at a pool.\n"}
{"prompt":"¬WorkAtPool(mary)) ->","completion":" Mary does not work at a pool.\n"}
{"prompt":"∃x (ArtPiece(x) ∧ ¬RequiresTalent(x)) ->","completion":" Not all art pieces require talent.\n"}
{"prompt":"∀x (RequiresTalent(x) → RequiresPractice(x)) ->","completion":" Everything that requires talent requires practice.\n"}
{"prompt":"Painter(bernardaBrysonShahn) ∧ Lithographer(bernardaBrysonShahn)  ->","completion":" Bernarda Bryson Shahn was a painter and lithographer.\n"}
{"prompt":"BornIn(bernardaBrysonShahn, athensOhio) ->","completion":" Bernarda Bryson Shahn was born in Athens, Ohio. \n"}
{"prompt":"MarriedTo(bernardaBrysonShahn, benShahn) ->","completion":" Bernarda Bryson Shahn was married to Ben Shahn.\n"}
{"prompt":"∀x (BornIn(x, athensOhio) → American(x)) ->","completion":" People born in Athens, Ohio are Americans.\n"}
{"prompt":"∀x (Iphone(x) → ¬House(x)) ->","completion":" If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.\n"}
{"prompt":"∀x (Tech(x) → Iphone(x)) ->","completion":" If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.\n"}
{"prompt":"∀x (House(x) ∨ Apartment(x)) ->","completion":" People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.\n"}
{"prompt":"∀x (Roommate(x) → ¬Pet(x)) ->","completion":" If people live with at least one roommate then they do not own at least one pet.\n"}
{"prompt":"∀x (Apartment(x) → Roommate(x)) ->","completion":" All people who own at least one pet live with at least one roommate.\n"}
{"prompt":"¬(Pet(emma) ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma))) ->","completion":" If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. \n"}
{"prompt":"∀x (OnPayroll(x) → PaidBySchool(x)) ->","completion":" If you are on the payroll, then you are being paid by the school.\n"}
{"prompt":"∀x (JobAtSchool(x) → OnPayroll(x)) ->","completion":" If someone has a job at a school, then they are on the payroll.\n"}
{"prompt":"∀x (FacultyMember(x) → JobAtSchool(x)) ->","completion":" All faculty members have a job at a school.\n"}
{"prompt":"∀x (FacultyMember(x) ∨ Teacher(x)) ->","completion":" One can either be a faculty member or a teacher.\n"}
{"prompt":"∀x (Teacher(x) → HasStudents(x)) ->","completion":" Every teacher has students.\n"}
{"prompt":"Teacher(nancy) → OnPayroll(nancy) ->","completion":" If Nancy is a teacher, then they are on the payroll.\n"}
{"prompt":"¬Teacher(nancy) → ¬OnPayroll(nancy) ->","completion":" If Nancy is not a teacher, then they are not paid by the school.\n"}
{"prompt":"∀x (Kangaroo(x) → Animal(x)) ->","completion":" Kangaroo is an animal.\n"}
{"prompt":"∀x (Kangaroo(x) → ¬LiveIn(x, germany)) ->","completion":" No Kangaroos live in Germany.\n"}
{"prompt":"EnoughMoney(jane) → FlyTo(jane, germany) ->","completion":" If Jane saves enough money for the summer, she will fly to Germany.\n"}
{"prompt":"FlyTo(jane, germany) → GoTo(jane, berlinzoo)  ->","completion":" If Jane flies to Germany, she will go to the Berlin Zoo.\n"}
{"prompt":"∀x ∃y (GoTo(x, berlinzoo) ∧ Animal(y) → MaySee(y, x, berlinzoo)) ->","completion":" If someone goes to the Berlin Zoo, they will see some of the animals that live in Germany.\n"}
{"prompt":"∀x ∀y ((Prereq(x, y) ∧ Taken(x)) ↔ CanTake(y)) ->","completion":" If a class has prerequisites the student must take the prerequisites to take the class.\n"}
{"prompt":"∀x ∀y (¬Prereq(x, y) → CanTake(y)) ->","completion":" If a class has no prerequisites, then the student can take the class\n"}
{"prompt":"Prereq(cpsc201, cpsc323) ∧ Prereq(cpsc223, cpsc323) ->","completion":" CPSC 201 and CPSC 223 are prerequisites for CPSC 323.\n"}
{"prompt":"(Prereq(intromicro, intermediatemicro) ∧ Taken(intromicro)) → CanTake(intermediatemicro) ->","completion":" Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.\n"}
{"prompt":"∀x (¬Prereq(x, introgeology)) ->","completion":" Intro Geology has no prerequisites.\n"}
{"prompt":"∀x (SevenDistinctWorks(x) → Heptalogy(x)) ->","completion":" A heptalogy, is a compound literary or narrative work that is made up of seven distinct works.\n"}
{"prompt":"SevenDistinctWorks(harryPotter) ->","completion":" The Harry Potter series consists of 7 distinct works.\n"}
{"prompt":"SevenDistinctWorks(chroniclesofNarnia) ->","completion":" The Chronicles of Narnia consists of 7 distinct works.\n"}
{"prompt":"∀x (RenaissanceFair(x) → DressingUp(x)) ->","completion":" All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing.\n"}
{"prompt":"∀x (HistoryRenaissance(x) → RenaissanceFair(x)) ->","completion":" If people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly.\n"}
{"prompt":"∀x (HistoryRenaissance(x) ∨ NotAcademics(x)) ->","completion":" People are either fascinated by the history of the Renaissance and other past eras, or are not nostalgic academics who enjoy learning.\n"}
{"prompt":"∀x (Industry(x) → NotAcademics(x)) ->","completion":" If people are focused on the future and industry professions, then they are not nostalgic academics who enjoy learning.\n"}
{"prompt":"∀x (HistoryProf(x) → ¬NotAcademics(x)) ->","completion":" If people are historical professors who are passionate about their job and subject, then they are nostalgic academics who enjoy learning.\n"}
{"prompt":"¬Industry(clyde) → ¬(Industry(clyde) ∨ DressingUp(clyde)) ->","completion":" If Clyde is not focused on the future and industry professions, then he is neither focused on the future and industry professions nor enjoys dressing up in old-fashioned and historical period clothing.\n"}
{"prompt":"∀x (SportsCar(x) → ¬IntendedToBeDrivenAtModerateSpeeds(x)) ->","completion":" No sports cars are vehicles intended to be driven at moderate speeds.\n"}
{"prompt":"∀x (ForFamilyUse(x) → IntendedToBeDrivenAtModerateSpeeds(x)) ->","completion":" All automobiles designed for family use are vehicles intended to be driven at moderate speeds.\n"}
{"prompt":"∀x (WorkTeams(x) → Colleagues(x)) ->","completion":" If people work well in teams in their workplace, then they get along with all their colleagues at their work.\n"}
{"prompt":"∀x (PositiveAttitude(x) → WorkTeams(x)) ->","completion":" If people come to work every day with a positive attitude, then they work well in teams in their workplace.\n"}
{"prompt":"∀x (PositiveAttitude(x) ⊕ Tired(x)) ∧ (∀x (Tired(x) → BossPromotions(x))) ->","completion":" People either come into work every day with a positive attitude or are always tired every morning.\n"}
{"prompt":"∀x (BossPromotions(x) → ¬NegativeFeedback(x)) ->","completion":" If people get many promotions from their boss at work, then they receive negative feedback from teams at work.\n"}
{"prompt":"(WorkTeams(kat) ∧ Tired(kat)) ∨ ¬WorkTeams(kat) ∧ ¬Tired(kat)) ->","completion":" Kat is either both a person who works well in teams in their workplace and is always tired every morning, or she neither works well in teams in their workplace nor is always tired every morning.\n"}
{"prompt":"OpenSource(drishti) ->","completion":" Drishti is open-source.\n"}
{"prompt":"∀x (OpenSource(x) → ModifyFree(x)) ->","completion":" Open-source software is free to modify.\n"}
{"prompt":"Grade(a+) ∨ Grade(a) ∨ Grade(b+) ∨ Grade(b) ∨ Grade(c) ->","completion":" There are five grades including A+, A, B+, B, and C in English.\n"}
{"prompt":"∀x (GetGrade(x, a+) → GreaterThan95(x)) ->","completion":" If a student gets A+ in English, then his score is greater than 95.\n"}
{"prompt":"∀x (GetGrade(x, a) → Range90to95(x)) ->","completion":" If a student gets A in English, then his score is in the range of 90-95.\n"}
{"prompt":"GetGrade(zhang, a) ->","completion":" Zhang got an A in English.\n"}
{"prompt":"Better(wang, zhang) ->","completion":" Wang's English score is better than Zhang's.\n"}
{"prompt":"LowerThan90(wu) ->","completion":" Wu's English score is lower than 90.\n"}
{"prompt":"∀x (Day(x) → ¬PrefersWarmAt(olivia, x)) ->","completion":" Olivia doesn't prefer warm temperature during the day.\n"}
{"prompt":"∀x (SleepingDuring(olivia, x) → PrefersCoolAt(olivia, x)) ->","completion":" When Olivia sleeps, she prefers cool temperature.\n"}
{"prompt":"∀x (SleepingDuring(olivia, x) → Night(x)) ->","completion":" Olivia sleeps during the night.\n"}
{"prompt":"∀x (WorkingDuring(olivia, x) → Day(x)) ->","completion":" Olivia works during the day.\n"}
{"prompt":"∀x (WorkingDuring(olivia, x) ∨ SleepingDuring(olivia, x)) ->","completion":" Olivia either works or sleeps.\n"}
{"prompt":"∀x (Day(x) ∨ Night(x)) ->","completion":" The time is either the day or the night.\n"}
{"prompt":"∀x (PrefersWarmAt(olivia, x) ∨ PrefersCoolAt(olivia, x)) ->","completion":" Olivia either prefers warm temperature or prefers cool temperature.\n"}
{"prompt":"Speech(taylorSwift, nyc) ->","completion":" Taylor Swift gives a commencement speech in New York University in 2022.\n"}
{"prompt":"Manhattan(columbiaUniversity) ∧ Manhattan(nyc) ->","completion":" Both Columbia University and New York University are located in Manhattan.\n"}
{"prompt":"HaveAlbum(taylorSwift) ->","completion":" Taylor Swift has received three Grammy Album of the Year Awards.\n"}
{"prompt":"IvyLeague(columbiaUniversity) ->","completion":" Columbia University is one of the Ivy League schools.\n"}
{"prompt":"∀x (PlanA(x) ∨ PlanB(x)) ->","completion":" Customers either choose Plan A or Plan B.\n"}
{"prompt":"∀x (PlanB(x) → Award(x)) ->","completion":" All who choose Plan B are rewarded with a $30 gift card. \n"}
{"prompt":"∀x (¬NoPlan(x)) ->","completion":" There are no customers who do not choose any plans. \n"}
{"prompt":"∀x (Award(x) → ¬OlderThan80(x)) ->","completion":" No customers rewarded a $30 gift card are older than 80.\n"}
{"prompt":"∀x (OlderThan80(x) ∨ StudyAtSchool(x)) ->","completion":" Customers are either older than 80 or are currently studying at school. \n"}
{"prompt":"¬StudyAtSchool(james) ->","completion":" James is not a customer who is currently studying at school. \n"}
{"prompt":"Horse(detroitcity) ->","completion":" Detroit City is a horse.\n"}
{"prompt":"∃x (Horse(x) ∧ Racehorse(x)) ->","completion":" Some horses are racehorses.\n"}
{"prompt":"∀x (Horse(x) ∧ Racing(x) ∧ Falls(x) → Dead(x)) ->","completion":" If a horse falls during a race, then it dies.\n"}
{"prompt":"Racing(detroitcity) ∧ Falls(detroitcity) ->","completion":" Detroit City fell during a race.\n"}
{"prompt":"∀x (Horse(x) ∧ Racing(x) → Racehorse(x)) ->","completion":" A horse is a racehorse if it is in a race.\n"}
{"prompt":"Architect(monhoff) ∧ Artist(monhoff) ∧ Illustrator(monhoff) ->","completion":" Frederick Monhoff was an architect, artist, and illustrator.\n"}
{"prompt":"American(monhoff) ->","completion":" Frederick Monhoff was an American.\n"}
{"prompt":"∀x (Artist(x) → GoodAt(x, painting) ∨ GoodAt(x, music)) ->","completion":" An artist is good at painting or music.\n"}
{"prompt":"∀x (American(x) → Speak(x, english)) ->","completion":" All Americans speak English.\n"}
{"prompt":"Czech(miroslavfiedler) ∧ Mathematician(miroslavfiedler) ->","completion":" Miroslav Fiedler was a Czech mathematician.\n"}
{"prompt":"KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory) ->","completion":" Miroslav Fiedler is known for his contributions to linear algebra and graph theory.\n"}
{"prompt":"HonoredBy(miroslavfiedler, fiedlerEigenvalue) ->","completion":" Miroslav Fiedler is honored by the Fiedler eigenvalue.\n"}
{"prompt":"TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian) ->","completion":" Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian.\n"}
{"prompt":"∀x (Laptop(x) → Computer(x)) ->","completion":" A laptop is a computer.\n"}
{"prompt":"∀x (Computer(x) → CanPlayGames(x)) ->","completion":" You can play games on a computer.\n"}
{"prompt":"∀x (Phone(x) → ¬Computer(x)) ->","completion":" A phone is not a computer.\n"}
{"prompt":"AmericanPolitician(walterbrown) ∧ Lawyer(walterbrown) ∧ ServedAs(walterbrown, postamastergeneral) ->","completion":" Walter Folger Brown was an American politician and lawyer, and served as the postmaster general.\n"}
{"prompt":"Graduated(walterbrown, harvard) ∧ GraduatedWith(walterbrown, bachelorsofart) ->","completion":" Walter Folger Brown graduated from Harvard University with a Bachelors of Arts.\n"}
{"prompt":"In(walterbrown, toledo) ∧ In(walterbrownfather, toledo) ∧ PracticedLawTogether(walterbrownfather, walterbrown) ->","completion":" While they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.\n"}
{"prompt":"Married(ketherinhafer, walterbrown) ->","completion":" Katherin Hafer married Walter Folger Brown.\n"}
{"prompt":"∀x (ShipChina(x) → MadeInChina(x)) ->","completion":" All products shipped from China are made in China. \n"}
{"prompt":"∀x (SoldJD(x) → ShipChina(x)) ->","completion":" All products sold in JD are shipped from China. \n"}
{"prompt":"∀x (CommonlyUsedChina(x) → SoldJD(x)) ->","completion":" All products commonly used in China are sold in JD.\n"}
{"prompt":"∀x (FavoredByYoungPeople(x) → CommonlyUsedChina(x)) ->","completion":" All products favored by young people are commonly used in China. \n"}
{"prompt":"¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook)) ->","completion":" MacBook is not made in China and is not commonly used in China.\n"}
{"prompt":"OxfordStreet(oxfordCircus) ∧ RegentStreet(oxfordCircus) ->","completion":" Oxford Circus is a road junction connecting Oxford Street and Regent Street.\n"}
{"prompt":"∀x (OxfordStreet(x) → London(x)) ->","completion":" Oxford Street is in London.\n"}
{"prompt":"∃x (RegentStreet(x) ∧ Design(johnNash, x)) ->","completion":" John Nash designed the construction on Regent Street.\n"}
{"prompt":"Design(johnNash, oxfordCircus) ->","completion":" John Nash designed Oxford Circus.\n"}
{"prompt":"British(johnNash) ∧ Architect(johnNash) ->","completion":" John Nash is an architect in British.\n"}
{"prompt":"CentralLine(oxfordCircus) ->","completion":" Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900.\n"}
{"prompt":"∀x (Cat(x) ⊕ Dog(x)) ->","completion":" An animal is either a cat or a dog.\n"}
{"prompt":"∀x (Dog(x) → Bark(x)) ->","completion":" All dogs bark.\n"}
{"prompt":"∀x (¬Ghost(x)) ->","completion":" Ghosts do not exist.\n"}
{"prompt":"∀x (Bark(x) → ¬Alive(x)) ->","completion":" If something barks, then it is not alive.\n"}
{"prompt":"∀x (Alive(x) ⊕ Dead(x)) ->","completion":" A thing is either alive or dead.\n"}
{"prompt":"¬Dead(jojo) ->","completion":" Jojo is not dead.\n"}
{"prompt":"∀x (Tiger(x) → Cat(x)) ->","completion":" All animals that are tigers are cats.\n"}
{"prompt":"∀x (Cat(x) → ¬Dog(x)) ->","completion":" No cats are dogs.\n"}
{"prompt":"∀x (BengalTiger(x) → Tiger(x)) ->","completion":" All Bengal tigers are tigers.\n"}
{"prompt":"∀x (Husky(x) → Dog(x)) ->","completion":" Everything that is a husky is a dog.\n"}
{"prompt":"BengalTiger(fido) ∨ Cat(fido) ->","completion":" Fido is either a Bengal tiger or a cat.\n"}
{"prompt":"∀x ∀y (SummerOlympicsCity(x, y) ∧ CityInCountry(y, us) → SummerOlympicsCountry(x, us)) ->","completion":" If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.\n"}
{"prompt":"∀x ∀y (CityInState(x, y) ∧ StateInCountry(y, us) → CityInCountry(x, us)) ->","completion":" If a city is in a state which is in US, the city is a US city.\n"}
{"prompt":"∀x ∀y ∀z (CityInState(x, y) ∧ SummerOlympicsCity(z, x) → SummerOlympicsState(z, y)) ->","completion":" If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.\n"}
{"prompt":"SummerOlympicsCity(y2028, la) ->","completion":" The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).\n"}
{"prompt":"CityInState(la, ca) ->","completion":" LA is a city in California(CA).\n"}
{"prompt":"CityInCountry(atlanta, us) ->","completion":" Atlanta is a US city.\n"}
{"prompt":"StateInCountry(ca, us) ->","completion":" Atlanta is in Georgia(CA).\n"}
{"prompt":"CityInState(atlanta, ga) ->","completion":" CA is a state in the United States.\n"}
{"prompt":"¬InSummerOlympics(y2028, boxing) ∧ ¬InSummerOlympics(y2028, modern_pentathlon) ∧ ¬InSummerOlympics(y2028, weightlifting) ->","completion":" Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.\n"}
{"prompt":"SummerOlympicsCity(y1996, atlanta) ->","completion":" Atlanta in the United States hold the 1996 Summer Olympics.\n"}
{"prompt":"Vole(taigaVole) ∧ Find(taigaVole, northAmerica) ->","completion":" The taiga vole is a large vole found in northwestern North America. \n"}
{"prompt":"∀x (Vole(x) → CatLikePlayingWith(x)) ->","completion":" Cats like playing with all voles.\n"}
{"prompt":"Live(taigaVole, borealTaigaZone) ->","completion":" The taiga vole lives in the boreal taiga zone.\n"}
{"prompt":"∀x (Find(x, northAmerica) ∧ Live(x, borealTaigaZone) → LiveInColdPlace(x)) ->","completion":" The boreal taiga zone in North America is a cold place to live in.\n"}
{"prompt":"Larger(taigaVole, microtusVole) ->","completion":" Taiga vole is typically much larger than most other North American voles, especially those from the genus Microtus.\n"}
{"prompt":"∀x (Women(x) ∨ Men(x))  ->","completion":" Either in women or in men. \n"}
{"prompt":" ∀x (Men(x) → ¬BreastCancer(x)) ->","completion":" No men have breast cancer.\n"}
{"prompt":" ∀x (BreastCancer (x) ∨ Non-BreastCancer(x))  ->","completion":" Either breast cancer or non-breast cancer. \n"}
{"prompt":" ∀x (ATypeOfCancer(x) → ¬WithoutTumor (x))  ->","completion":" No type of cancer is without a tumor.\n"}
{"prompt":" ∀x (Non-BreastCancer(x) → ATypeOfCancer(x))  ->","completion":" All non-breast cancers are a type of cancer.\n"}
{"prompt":" ATypeOfCancer(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma) → women(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma) ->","completion":" If adenocarcinoma is a type of cancer or without a tumor, then adenocarcinoma is in women or without a tumor.\n"}
{"prompt":"∃x (Lab(x) ∧ AOC(x)) ->","completion":" Some monitors equipped in the lab are produced by the company named AOC. \n"}
{"prompt":"∀x (Lab(x) → Cheaper(x)) ->","completion":" All monitors equipped in the lab are cheaper than their original prices. \n"}
{"prompt":"∀x (Cheaper(x) → A1080p(x)) ->","completion":" If the monitor is cheaper than its original prices, then its resolution is 1080p. \n"}
{"prompt":"∀x (A1080p(x) → ¬TypeC(x)) ->","completion":" If a monitor is with a resolution of 1080p, then it does not support the type-c port. \n"}
{"prompt":"Lab(lg-34) ->","completion":" LG34 is equipped in the lab.  \n"}
{"prompt":"∀x (SoldBoston(x) → ShippedFromColumbia(x)) ->","completion":" All fruits sold in Boston are shipped from Columbia. \n"}
{"prompt":"∃x (SoldNewHaven(x) ∧ ShippedFromMexico(x)) ->","completion":" Some fruits sold in New Haven are shipped from Mexico.\n"}
{"prompt":"∀x (ShippedFromColumbia(x) → ¬SoldNewYork(x)) ->","completion":" No fruits shipped from Columbia are fruits sold in New York. \n"}
{"prompt":"SoldNewYork(avocado) ∨ SoldBoston(avocado) ->","completion":" Avocadoe are a kind of fruit sold in New York or New York. \n"}
{"prompt":"¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado)) ->","completion":" Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. \n"}
{"prompt":"∃x (Library(x) ∧ AOC(x)) ->","completion":" Some monitors equipped in the library are produced by AOC. \n"}
{"prompt":"∀x (Library(x) → Cheap(x)) ->","completion":" All monitors equipped in the library are cheaper than 800 dollars. \n"}
{"prompt":"∀x (Cheap(x) → A1080p(x)) ->","completion":" All monitors cheaper than 800 dollars are with a resolution of 1080p. \n"}
{"prompt":"∀x (A1080p(x) → ¬TypeC(x)) ->","completion":" If a monitor has a resolution of 1080p, then it does not support the type-c port. \n"}
{"prompt":"TypeC(a-2017) ->","completion":" A-2017 supports the type-c port. \n"}
{"prompt":"Hold(suduva, thelithuaniansupercup) ->","completion":" Sūduva Marijampolė holds the Lithuanian Supercup.\n"}
{"prompt":"SoccerTeam(suduva) ->","completion":" Sūduva Marijampolė is a soccer team.\n"}
{"prompt":"∀x (AinderbyQuernhow(x) → Village(x) ∧ CivilParish(x) ∧ Hambleton(x)) ->","completion":" Ainderby Quernhow is a village and civil parish in the Hambleton District.\n"}
{"prompt":"∀x (Hambleton(x) → NorthYorkshire(x)) ->","completion":" Hambleton District is in North Yorkshire.\n"}
{"prompt":"∀x (NorthYorkshire(x) → England(x)) ->","completion":" North Yorkshire is in England.\n"}
{"prompt":"Author(douglasAdams) ∧ Book(theSalmonOfDoubt) ->","completion":" Douglas Adams is an author who created the book collection called The Salmon of Doubt. \n"}
{"prompt":"AboutLifeExperience(theSalmonOfDoubt) ∧ AboutTechnology(theSalmonOfDoubt) ->","completion":" The Salmon of Doubt is about life experiences and technology.\n"}
{"prompt":"∀x (Author(x) → Writer(x)) ->","completion":" All authors are writers.\n"}
{"prompt":"∀x (Writer(x) → CreateInnovativeIdea(x)) ->","completion":" Writers create innovative ideas.\n"}
{"prompt":"∃x (ContainInnovativeIdea(x) ∧ AboutTechnology(x)) ->","completion":" Some books that contain innovative ideas are about technology.\n"}
{"prompt":"∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x)) ->","completion":" No disposable products can help slow down global warming. \n"}
{"prompt":" ∀x (Eco-friendlyBrand(x) → HelpSlowDownGlobalWarming(x)) ->","completion":" All eco-friendly brands can help slow down global warming. \n"}
{"prompt":" ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x)) ->","completion":" All sustainable fashion brands are eco-friendly brands.\n"}
{"prompt":" ∀x (FastFashionProducts(x) → DisposableProducts(x))  ->","completion":" All fast fashion products are disposable products.\n"}
{"prompt":" ¬HelpSlowDownGlobalWarming(reformation) → Eco-friendlyBrand(reformation) ∨ SustainableFashionBrand(reformation) ->","completion":" If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.\n"}
{"prompt":"Cricketeer(royrichardson) ∧ PlayedFor(royrichardson, sintmaartener) ∧ ConstituentCountry(sintmaartener) ->","completion":" Roy Richardson was a cricketer for Sint Maartener, a consituent country.\n"}
{"prompt":"RightHanded(royrichardson) ∧ Batsman(royrichardson) ∧ MediumPaceBowler(royrichardson) ->","completion":" Roy Richardson was a right handed batsman and medium pace bowler.\n"}
{"prompt":"Old(royrichardson) ∧ DebutedIn(royrichardson, cricket) ->","completion":" Roy Richardson was old when he debuted in cricket.\n"}
{"prompt":"Dismissed(shervillehuggins, royrichardson) ->","completion":" Sherville Huggins dismissed Roy Richardson.\n"}
{"prompt":"∀x (Employed(x, google) → WorkExp(x) ∨ GoodEduc(x)) ->","completion":" To get a job at Google, you need to have a lot of work experience or a good education.\n"}
{"prompt":"∀x ((Yale(x) ∧ CV(x, google)) → Employed(x, google)) ->","completion":" All Yale graduates who submitted their resumes to Google got jobs there.\n"}
{"prompt":"WorkExp(john) ->","completion":" John has a lot of work experience.\n"}
{"prompt":"CV(john, google) ∧ Employed(john, google) ->","completion":" John submitted his resume to Google and got a job there.\n"}
{"prompt":"∀x (Student(x) → ¬Doctor(x)) ->","completion":" No students are doctors.\n"}
{"prompt":"∀x (TakingClass(x) → Student(x)) ->","completion":" All people taking classes are students. \n"}
{"prompt":"∀x (GraduateStudent(x) → TakingClass(x)) ->","completion":" All graduate students are people taking classes. \n"}
{"prompt":"∀x (PhDStudent(x) → GraduateStudent(x)) ->","completion":" All PhD students are graduate students. \n"}
{"prompt":"GraduateStudent(joe) ⊕  Doctor(joe) → ¬(GraduateStudent(joe) ∧ Student(joe)) ->","completion":" If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student.\n"}
{"prompt":"WorldLeadingLightningDesigner(hughVanstone) ->","completion":" Hugh Vanstone is one of the world's leading lighting designers. \n"}
{"prompt":"FromUK(hughVanstone) ->","completion":" Hugh Vanstone is from the UK.\n"}
{"prompt":"LitOver160Productions(hughVanstone) ->","completion":" Hugh Vanstone has lit more than 160 productions.\n"}
{"prompt":"AttendedSchoolWhereFrom(hughVanstone) ->","completion":" Hugh Vanstone attended school where he is from. \n"}
{"prompt":"∀x (Man(x) → ¬FasterThanBolt(x)) ->","completion":" No man can run faster than Bolt. \n"}
{"prompt":"¬Man(superman)  ->","completion":" Superman is not a man.\n"}
{"prompt":"AmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth) ->","completion":" Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.\n"}
{"prompt":"BeCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms) ->","completion":" Knuth has been called the \"father of the analysis of algorithms\".\n"}
{"prompt":"FleaBeetle(neocrepidoderacorpulenta) ∨ Moth(neocrepidoderacorpulenta) ->","completion":" Neocrepidodera Corpulentas are flea beetles or moths.\n"}
{"prompt":"Species(neocrepidoderacorpulenta) ∧ Family(chrysomelidae) ∧ In(neocrepidoderacorpulenta, chrysomelidae) ->","completion":" The species Neocrepidodera Corpulenta is in the Chrysomelidae family.\n"}
{"prompt":"∀x (In(x, chrysomelidae) ∧ Family(chrysomelidae) → ¬Moth(x)) ->","completion":" There are no moths within the Chrysomelidae family.\n"}
{"prompt":"MilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901) ->","completion":" Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.\n"}
{"prompt":"SpecializedIn(carrozzeriacolli, usingaluminum) ->","completion":" Carrozzeria Colli is a company that specialized in using aluminum.\n"}
{"prompt":"∀x (FirstAutomobilesBy(x, carrozzeriacolli) → Racingcar(x)) ->","completion":" The first automobiles built by Carrozzeria Colli were racing cars.\n"}
{"prompt":"∃x (RacingCar(x) ∧ BuiltBy(x, carrozzeriacolli) ∧ Used(x, fiat110mechanicals) ∧ Used(x, chasis)) ->","completion":" Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.\n"}
{"prompt":"∃x (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x)) ->","completion":" Carrozzeria Colli worked for airforces.\n"}
{"prompt":"Made(carrozzeriacolli, carbodies) ->","completion":" Carrozzeria Colli made car bodies. \n"}
{"prompt":"GoToTheCinema(john, today) ↔ GoToTheCinema(jack, today) ->","completion":" John will go to the cinema if and only if Jack goes to the cinema today.\n"}
{"prompt":"GoToTheCinema(jack, today) ↔ (Movie(ironman) ∧ ¬BadWeather(today)) ->","completion":" Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today.\n"}
{"prompt":"∃x (Month(march) → BadWeather(x)) ->","completion":" Some days in March have bad weather.\n"}
{"prompt":"Movie(ironman) ->","completion":" Iron man is on.\n"}
{"prompt":"Month(march) ->","completion":" It's March now.\n"}
{"prompt":"∀x (QuiksilverSells(x) → Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x)) ->","completion":" Quiksilver sells sportswear, clothing, footwear, and accessories.\n"}
{"prompt":"Clothing(flannel) ->","completion":" Flannels are a type of clothing.\n"}
{"prompt":"∃x (QuiksilverSells(x) → JoeOwns(x)) ->","completion":" Joe owns an item fron Quiksilver.\n"}
{"prompt":"∀x (Nintendo(x) → ¬SupportPS4(x)) ->","completion":" No video games released by Nintendo support the PS4 platform.\n"}
{"prompt":"∀x (Pokemon(x) → Nintendo(x)) ->","completion":" All video games in the Pokemon series are released by Nintendo. \n"}
{"prompt":"∀x (FIFA(x) → SupportPS4(x)) ->","completion":" All video games in the FIFA series support the PS4 platform. \n"}
{"prompt":"∀x (SoccerOnline(x) → FIFA(x)) ->","completion":" All video games supporting users to simulate playing soccer games online are in the FIFA series.\n"}
{"prompt":"Pokemon(belionel) ⊕ SoccerOnline(belionel) ->","completion":" The video game named “Be Lionel” is in the Pokemon series or supports users to simulate playing football games online.\n"}
{"prompt":"∀x (RussianBank(x) → ¬ApplePay(x)) ->","completion":" No payment cards issued by Russian banks can be used with ApplePay.\n"}
{"prompt":"∀x (Mir(x) → RussianBank(x)) ->","completion":" All MIR payment cards are issued by Russian banks.\n"}
{"prompt":"∃x (International(x) → ApplePay(x)) ->","completion":" Some international payment cards can be used with ApplePay.\n"}
{"prompt":"∀x (SocialRussia(x) → Mir(x)) ->","completion":" Social payments in Russia can only be transferred to MIR payment cards.\n"}
{"prompt":"ApplePay(boapaymentcards) ->","completion":" Bank of America payment cards can be used with ApplePay.\n"}
{"prompt":"Chevrolet(luminaAPV) ->","completion":" The Lumina APV is produced by Chevrolet. \n"}
{"prompt":"Chevrolet(astro) ∧ Van(astro) ->","completion":" The Astro is a van produced by Chevrolet. \n"}
{"prompt":"∀x (Chevrolet(x) → Car(x) ⊕ Van(x)) ->","completion":" Cars produced by Chevrolet are either cars or vans.\n"}
{"prompt":"∀x (InPerson(x) → Commuter(x)) ->","completion":" Everyone who works in person is a commuter.\n"}
{"prompt":"∀x (InPerson(x) ⊕ FromHome(x)) ->","completion":" People either work in person or work from home.\n"}
{"prompt":"∀x (FromHome(x) → Relaxed(x)) ->","completion":" Everyone who works from home has a relaxed schedule.\n"}
{"prompt":"Commuter(george) ⊕ HomeOffice(george) ->","completion":" George is either a commuter or has a home office setup.\n"}
{"prompt":"FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george)) ->","completion":" If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter.\n"}
{"prompt":"MusicSupervisor(jasonKramer) ∧ American(jasonKramer) ->","completion":" Jason Kramer is an American music supervisor.\n"}
{"prompt":"∃x (American(x) ∧ MusicSupervisor(x) ∧ RadioPersonality(x)) ->","completion":" Some American radio personalities are also music supervisors. \n"}
{"prompt":"∀x (HostShowOnPublicRadioStation(x) → RadioPersonality(x)) ->","completion":" Anyone who hosts a show on a public radio station is a radio personality.\n"}
{"prompt":"RadioPersonality(joeRogan) ->","completion":" Joe Rogan is a radio personality.\n"}
{"prompt":"HostShowOnPublicRadioStation(jasonKramer) ->","completion":" Jason Kramer hosted a show on a public radio station.\n"}
{"prompt":"∀x (Walmart(x) → ¬France(x)) ->","completion":" No coffee sold in Walmart is produced in France. \n"}
{"prompt":"∀x (Company(x) → Walmart(x)) ->","completion":" All coffee supplied by the company is sold in Walmart. \n"}
{"prompt":"∀x (Columbia(x) → France(x)) ->","completion":" All coffee produced in Columbia is produced in France. \n"}
{"prompt":"∀x (Favored(x) → Columbia(x)) ->","completion":" All coffee favored by local residents is coffee produced in Columbia. \n"}
{"prompt":"∀x (HighPrice(x) → Favored(x)) ->","completion":" All coffee with high prices is favored by local residents. \n"}
{"prompt":"¬(Columbia(civetcoffee) ∧ HighPrice(civetcoffee)) ->","completion":" Civet Coffee is not produced in Columbia and is cheap.\n"}
{"prompt":"Walmart(jamaicablue) ∨ Favored(jamaicablue) ->","completion":" Jamaica Blue is sold in Walmart or favored by local residents.\n"}
{"prompt":"∀x (Galicia(x) → Spain(x) ⊕ Poland(x)) ->","completion":" There are two places named Galicia: either in Spain or in Poland.\n"}
{"prompt":"∀x (Spain(x) → Europe(x)) ->","completion":" Spain is in Europe.\n"}
{"prompt":"∀x (Poland(x) → Europe(x)) ->","completion":" Poland is in Europe.\n"}
{"prompt":"∀x (RochelleLive(x) → Europe(x)) ->","completion":" Rochelle lives in Europe.\n"}
{"prompt":"∀x (DominiqueLive(x) → ¬Europe(x)) ->","completion":" Dominique does not live in Europe.\n"}
{"prompt":"∀x (AlfonsoLive(x) → Galicia(x)) ->","completion":" Alfonso lives in Galicia.\n"}
{"prompt":"BornIn(ralphHammerthaler, wasserburgAmInn) ->","completion":" Ralph Hammerthaler was born in Wasserburg am Inn.\n"}
{"prompt":"LocatedIn(wasserbAmInn, germany) ->","completion":" Wasserburg am Inn is in Germany.\n"}
{"prompt":"LocatedIn(germany, europe) ->","completion":" Germany is in Europe.\n"}
{"prompt":"Writer(ralphHammerthaler) ->","completion":" Ralph Hammerthaler is a German writer.\n"}
{"prompt":"BornIn1965(ralphHammerthaler) ->","completion":" Ralph Hammerthaler was born in 1965. \n"}
{"prompt":"∀x (WrittenByTomas(x) → SoldOneMillion(x)) ->","completion":" All books written by Tomas have sold more than 1 million copies. \n"}
{"prompt":"∃x (WinningHugoAward(x) ∧ WrittenByTomas(x)) ->","completion":" Some books that have won Hugo Awards are written by Tomas.\n"}
{"prompt":"∀x (AboutFuture(x) → InspiredFromShakespeare(x)) ->","completion":" All books about the future are inspired by Shakespeare. \n"}
{"prompt":"InspiredFromShakespeare(y2001) ⊕ SoldOneMillion(y2001)  ->","completion":" 2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.\n"}
{"prompt":"SoldOneMillion(y2001) ⊕ WrittenByTomas(y2001) ->","completion":" 2001 is a book that has either sold more than 1 million copies or it was written by Tomas.\n"}
{"prompt":"∀x (Grass(x) → ¬Food(x)) ->","completion":" No grass is food. \n"}
{"prompt":"∀x (Meadow(x) → Grass(x)) ->","completion":" All meadows are grass.\n"}
{"prompt":"∀x (Edible(x) → Food(x)) ->","completion":" All edible things are food. \n"}
{"prompt":"∀x (Fruit(x) → Edible(x)) ->","completion":" All fruits are edible.\n"}
{"prompt":"∀x (Lemon(x) → Fruit(x)) ->","completion":" All lemons are fruit.\n"}
{"prompt":"¬(Edible(grape) ∧ Lemon(grape)) ->","completion":" Grapes are not edible and lemons.\n"}
{"prompt":"Grass(banana) ∨ Fruit(banana) ->","completion":" Bananas are grass or fruit.\n"}
{"prompt":"Team(goldenstatewarriors) ∧ From(goldenstatewarriors, sanfrancisco) ->","completion":" The Golden State Warriors are a team from San Francisco.\n"}
{"prompt":"Won(goldenstatewarriors, nbafinals) ->","completion":" The Golden State Warriors won the NBA finals.\n"}
{"prompt":"∀x (team(x) ∧ Attending(x, nbafinals) → HasMoreThan(x, thirtyyearsofhistory)) ->","completion":" All teams attending the NBA finals have more than thirty years of history.\n"}
{"prompt":"Team(bostonceltics) ∧ Lost(bostonceltics, nbafinals) ->","completion":" Boston Celtics are a team that lost the NBA finals.\n"}
{"prompt":"∀x (Team(x) ∧ Won(x, nbafinals) → MoreIncome(x)) ->","completion":" If a team wins the NBA finals, then they will have more income.\n"}
{"prompt":"∀x (Won(x, nbafinals) ∨ Lost(x, nbafinals) → Attending(x, nbafinals)) ->","completion":" If a team wins or loses at the NBA finals, then they are attending the finals.\n"}
{"prompt":"CanInjureFingures(maya) → ¬WillPlayViolin(maya) ->","completion":" Maya will play violin if and only if she never injures her fingers.\n"}
{"prompt":"∀x (VolleyballPlayer(x) → CanInjureFingures(x)) ->","completion":" Volleyball players can injure their ankle, fingers, or shoulder.\n"}
{"prompt":"VolleyballPlayer(maya) ->","completion":" Maya is a volleyball player.\n"}
{"prompt":"∀x (InCompany(x) → GoogleHome(x)) ->","completion":" All devices belonging to the company are connected to Google Home. \n"}
{"prompt":"∀x (CompanyLogo(x) → InCompany(x)) ->","completion":" All devices with the company logo belong to the company. \n"}
{"prompt":"∀x (CompanyLogo(x) ∨ Employee(x)) ->","completion":" A device is either with the company logo or belongs to employees. \n"}
{"prompt":"∀x (Employee(x) → Wifi(x)) ->","completion":" All devices belonging to employees are available to connect to the company's wifi. \n"}
{"prompt":"∀x (GoogleHome(x) → ControlledByManager(x)) ->","completion":" All devices connected to Google Home are controlled by managers. \n"}
{"prompt":"∀x (EasyToOperate(x) → ProducedAfter2020(x)) ->","completion":" All devices that are easy to operate are produced after 2020. \n"}
{"prompt":"¬ProducedAfter2020(iPod1) ->","completion":" IPod1 is produced before 2020. \n"}
{"prompt":"∀x (CDPlayer(x) → DelicateMechanism(x)) ->","completion":" All CD players are delicate mechanisms.\n"}
{"prompt":"∀x (DelicateMechanism(x) → ¬SuitableToyForChildren(x)) ->","completion":" No delicate mechanisms are suitable toys for children.\n"}
{"prompt":"∀x (Mammal(x) → LivingBeing(x))  ->","completion":" All mammals are living beings.\n"}
{"prompt":"∀x (Elephant(x) → Mammal(x)) ->","completion":" All elephants are mammals.\n"}
{"prompt":"∀x (BabyElephant(x) → Elephant(x)) ->","completion":" All baby elephants are elephants.\n"}
{"prompt":"∃x (BabyElephant(x) ∧ Sleepy(x)) ->","completion":" Some baby elephants are sleepy.\n"}
{"prompt":"LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo)) ->","completion":" If Jumbo is a living being, then Jumbo is not an elephant or a mammal.\n"}
{"prompt":"Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo) ->","completion":" If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant.\n"}
{"prompt":"∀x (Faculty(x) → ¬DoesHomework(x)) ->","completion":" No faculty does homework.\n"}
{"prompt":"∀x (Student(x) → DoesHomework(x)) ->","completion":" All students do homework.\n"}
{"prompt":"∀x (Kid(x) → Student(x)) ->","completion":" All kids are students.\n"}
{"prompt":"∀x (WorkAtSchool(x) → Faculty(x)) ->","completion":" If someone works at a school, then they are faculty.\n"}
{"prompt":"WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill) ->","completion":" If Jill works at a school or is a teacher, then Jill works at a school.\n"}
{"prompt":"∀x (MaxListensToClassicalMusic(x) ∨ MaxListensToRap(x)) ->","completion":" Either Max listens to classical music or Max listens to rap. \n"}
{"prompt":"∀x (MaxListensToClassicalMusic(x) → SongsFrom12thCentury(x)) ->","completion":" All the songs that Max listens to that are classical music are from the 12th century.\n"}
{"prompt":"∀x (MaxListensToRap(x) → SongsFromKanyeWest(x)) ->","completion":" If the song Max listens to is rap, then the song is from Kanye West. \n"}
{"prompt":"∀x (SongsFromKanyeWest(x) → SongsFullOfLyrics(x)) ->","completion":" If a songs is from Kanye West, then the song is full of lyrics. \n"}
{"prompt":"∀x (SongsFullOfLyrics(x) → NeedToBeWrittenWithWords(x)) ->","completion":" All songs that are full of lyrics need to be written with words\n"}
{"prompt":"MaxListensToClassicalMusic(asItWasByHarryStyles) ∨ SongsFrom12thCentury(asItWasByHarryStyles) → MaxListensToClassicalMusic(asItWasByHarryStyles) ⊕ SongsFrom12thCentury(asItWasByHarryStyles) ->","completion":" If “As it was” by Harry Styles is classical music that Max listens to or  from the 12th century, then “As it was” by Harry Styles is either classical music that Max listens to, or the songs are from 12th century.\n"}
{"prompt":"Produce(whiteTown, yourWoman) ->","completion":" \"Your Woman\" is a song by British one-man band White Town.\n"}
{"prompt":"Peak(yourWoman, uKSinglesChart) ->","completion":" \"Your Woman\" song peaked at No. 1 on the UK Singles Chart.\n"}
{"prompt":"∀x ∀y (Peak(x, y) → Popular(x)) ->","completion":" If a song peaked at No.1 at a cetain place, then it was extremely popular.\n"}
{"prompt":"Peak(yourWoman, iceland) ∧ Peak(yourWoman, isarel) ∧ Peak(yourWoman, spain) ->","completion":" \"Your Woman\" also peaked No. 1 in Iceland, Israel and Spain.\n"}
{"prompt":"∀x (Limp(x) → Medical(x)) ->","completion":" All people who limp often and regularly have long-term medical issues with underlying causes.\n"}
{"prompt":"∀x (Medical(x) → ¬Spry(x)) ->","completion":" If people have long-term medical issues with underlying causes, then they are not often spry and energetic.\n"}
{"prompt":"∀x (Spry(x) ⊕ Tired(x)) ∧ (∀x (Tired(x) → Indoors(x))) ->","completion":" People either stay indoors and rest a lot at home or people are often tired and disinterested in their activities.\n"}
{"prompt":"∀x (Indoors(x) → ¬Gym(x)) ->","completion":" If people stay indoors and rest a lot at home, then they do not visit the gym at least once a day.\n"}
{"prompt":"(Limp(Mark) ⊕ Spry(Mark)) → Limp(Mark) ∨ Tired(Mark) ->","completion":" If Mark either limps often and regularly or is often spry and energetic, then Mark limps often and regularly or is often tired and disinterested in his activities.\n"}
{"prompt":"∀x ∀y (SoccerTeam(x) ∧ SoccerTeam(y) ∧ SameScore(x, y) ∧ During(regularTime) → PlayExtra(x, y)) ->","completion":" If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time.\n"}
{"prompt":"∀x ∀y (SoccerTeam(x) ∧ SoccerTeam(y) ∧ SameScore(x, y) ∧ During(regularTime) ∧ During(extraTime) → PlayPenalty(x, y)) ->","completion":" If two soccer teams score the same number of goals in one UCL final during both the regular time and extra time, they need to play the penalty shoot-out.\n"}
{"prompt":"SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(regularTime) ->","completion":" Real Madrid and Atlético Madrid both scored one goal in 2016 UCL final during the regular time.\n"}
{"prompt":"SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(extraTime) ->","completion":" Real Madrid and Atlético Madrid both scored zero goals in 2016 UCL final during the extra time.\n"}
{"prompt":"BasedOn(system7, uk) ∧ ElectronicDanceMusicBand(system7) ->","completion":" System 7 is a UK-based electronic dance music band.\n"}
{"prompt":"Formed(stevehillage, system7) ∧ Formed(miquettegiraudy, system7) ->","completion":" Steve Hillage and Miquette Giraudy formed System 7.\n"}
{"prompt":"FormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong) ->","completion":" Steve Hillage and Miquette Giraudy are former members of the band Gong.\n"}
{"prompt":"∀x (ElectronicDanceMusicBand(x) → Band(x)) ->","completion":" Electric dance music bands are bands.\n"}
{"prompt":"∃x (ClubSingle(x) ∧ Released(system7, x)) ->","completion":" System 7 has released several club singles.\n"}
{"prompt":"∀x (ClubSingle(x) → ¬Single(x)) ->","completion":" Club singles are not singles.\n"}
{"prompt":"∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x)) ->","completion":" A summarization model is always faithful if it uses content from the input documents.\n"}
{"prompt":"∀x (Model(x) ∧ Extractive(x) → Summarization(x)) ->","completion":" Extractive models are a kind of summarization models.\n"}
{"prompt":"∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x)) ->","completion":" Extractive model can only use content from the input documents.\n"}
{"prompt":"∀x Coding(x) → ¬StudyingToBeDoctor(x) ->","completion":" If people practice coding questions, then they are not studying to go to medical school to become a doctor.\n"}
{"prompt":"∀x Industry(x) → Coding(x) ->","completion":" If people want to work in the software engineering industry, then they practice coding questions.\n"}
{"prompt":"∀x Healthcare(x) → StudyingToBeDoctor(x) ->","completion":" If people enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.\n"}
{"prompt":"∀x ParentDoctors(x) → Healthcare(x) ->","completion":" If people grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues.\n"}
{"prompt":"∀x Study(x) → ParentDoctors(x) ->","completion":" If people study hard, then they grew up with parents who worked as doctors.\n"}
{"prompt":"¬(Healthcare(Robin) ∨ ParentDoctors(Robin)) → (Study(Robin) ∨ ParentDoctors(Robin))  ->","completion":" If Robin neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Robin is either a person who studies hard or grew up with parents who worked as doctors.\n"}
{"prompt":"∀x Spa(x) → ¬Miserly(x) ->","completion":" If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.\n"}
{"prompt":"∀x Miserly(x) ∨ Frivolous(x) ->","completion":" People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.\n"}
{"prompt":"∀x Frivolous(x) → Luxury(x) ->","completion":" If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.\n"}
{"prompt":"∀x Luxury(x) → Shopping(x) ->","completion":" If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.\n"}
{"prompt":"¬Miserly(Jess) → ¬Luxury(Jess) ->","completion":" If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.\n"}
{"prompt":"Luxury(Jess) ⊕ Miserly(Jess)) →  Luxury(Jess) ->","completion":" If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out.\n"}
{"prompt":"AlbumsReleased(phoenix, l6) ->","completion":" The indie pop band Phoenix has released 6 albums. \n"}
{"prompt":"Album(wolfgangamadeusphoenix) ∧ IsAlbumOf(wolfgangamadeusphoenix, phoenix) ∧ SoldOver(wolfgangamadeusphoenix, l500000) ->","completion":" Phoenix's album \"Wolfgang Amadeus Phoenix\" sold over 500,000 copies. \n"}
{"prompt":"∀x ((Album(x) ∨ Single(x)) ∧ SoldOver(x, l500000) → CertifiedGold(x)) ->","completion":" A certified gold album or single is one which sold over half a million copies. \n"}
{"prompt":"Single(l1901) ∧ From(l1901, wolfgangamadeusphoenix) ∧ By(l1901, phoenix) ->","completion":" \"1901\" is a single from Phoenix's album \"Wolfgang Amadeus Phoenix.\"\n"}
{"prompt":"SoldOver(l1901, l400000) ->","completion":" Over 400,000 copies of \"1901\" have been sold. \n"}
{"prompt":"Superhero(peter) ⊕ Civilian(peter) ->","completion":" Peter Parker is a either a superhero or a civilian.\n"}
{"prompt":"Destroyer(hulk) ->","completion":" The Hulk is a destroyer.\n"}
{"prompt":"Angry(hulk) → Wake(hulk) ->","completion":" The Hulk wakes up when he is angry.\n"}
{"prompt":"Wake(hulk) → BreakBridge(hulk) ->","completion":" If the Hulk wakes up, then he will break a bridge.\n"}
{"prompt":"God(thor) ->","completion":" Thor is a god.\n"}
{"prompt":"Happy(thor) → BreakBridge(thor) ->","completion":" Thor will break a bridge when he is happy.\n"}
{"prompt":"∀x (God(x) ↔ ¬Destroyer(x)) ->","completion":" A god is not a destroyer and a destroyer is not a god.\n"}
{"prompt":"Superhero(peter) → WearUniform(peter) ->","completion":" Peter Parker wears a uniform when he is a superhero.\n"}
{"prompt":"∀x (¬Civilian(peter) ↔ (Destroyer(x) ∧ BreakBridge(x))) ->","completion":" Peter Parker is not a civilian if and only if a destroyer is breaking a bridge.\n"}
{"prompt":"Happy(thor) → Angry(hulk) ->","completion":" If Thor is happy, the Hulk is angry.\n"}
{"prompt":"∀x (Diethylcarbamazine(x) ∧ Medication(x) ∧ DiscoveredIn(x, year1947)) ->","completion":" Diethylcarbamazine is a medication discovered in the year 1947.\n"}
{"prompt":"∀x ∀y (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y)) ->","completion":" Diethylcarbamazine can be used to treat river blindness.\n"}
{"prompt":"∀x ∀y (RiverBlindness(y) ∧ PreferredTreatment(x, y) → Ivermectin(x)) ->","completion":" The only preferred treatment for river blindness is ivermectin.\n"}
{"prompt":"∀x (Diethylcarbamazine(x) → ¬Ivermectin(x)) ->","completion":" Diethylcarbamazine is not ivermectin.\n"}
{"prompt":"∀x (UnivariateAnalysis(x) → UsesGeneralizedLinearModel(x))  ->","completion":" All univariate analyses use a generalized linear model. \n"}
{"prompt":" ∀x (MultivoxelPatternAnalysis(x) → ImplementingMachineLearningAlgorithms(x)) ->","completion":" All multivoxel (pattern) analyses are implementing machine learning algorithms.\n"}
{"prompt":" ∀x (ImplementingMachineLearningAlgorithms(x) → LearnAndClassifyMultivariateData(x))  ->","completion":" All implementing machine learning algorithms are to learn and classify multivariate data.\n"}
{"prompt":" UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∨ UnivariateAnalysis(latentDirichletAllocationModel) ->","completion":" The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. \n"}
{"prompt":" ¬LearnAndClassifyMultivariateData(latentDirichletAllocationModel) → UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∧ MultivoxelPatternAnalysis(latentDirichletAllocationModel) ->","completion":" If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis.\n"}
{"prompt":"∀x (RequiresAMedicalDiagnosis(x) → LabTestsOrImagingRequired(x))  ->","completion":" If something requires a medical diagnosis, then lab tests or imaging is required. \n"}
{"prompt":"∀x (RareDiseases(x) → RequiresAMedicalDiagnosis(x)) ->","completion":" All rare diseases require a medical diagnosis.\n"}
{"prompt":"∀x (Mild(x) → ¬LabTestsOrImagingRequired(x))  ->","completion":" If something is mild, then no lab tests or imaging is required. \n"}
{"prompt":"∀x (BloodCancer(x) → RareDiseases(x)) ->","completion":" All blood cancers are rare diseases.\n"}
{"prompt":"∀x (Leukemia(x) → BloodCancer(x)) ->","completion":" All Leukemia is blood cancer. \n"}
{"prompt":"¬(BloodCancer(bladderCancer) ⊕ Leukemia(bladderCancer)) → Leukemia(bladderCancer) ->","completion":" If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia.\n"}
{"prompt":"∀x (PreciousMetals(x) → ¬NotScarce(x)) ->","completion":" No precious metals aren't scarce.\n"}
{"prompt":" ∀x (Non-rareEarthMetals(x) → NotScarce(x))  ->","completion":" All non-rare earth metals are not scarce.\n"}
{"prompt":" ∀x (Non-rareEarthMetals(x) ∨ RareEarthMetals(x))  ->","completion":" Either non-rare earth metals or rare earth metals. \n"}
{"prompt":" ∀x (RareEarthMetals(x) → BeUsedForBatteries(x))  ->","completion":" All rare earth metals can be used for batteries.\n"}
{"prompt":" ∀x (RareEarthMetals(x) → EssentialForElectricVehicles(x)) ->","completion":" All rare earth metals are essential for electric vehicles.\n"}
{"prompt":" ¬Non-rareEarthMetals(lithium) ⊕ ¬EssentialForElectricVehicles(lithium) ->","completion":" Lithium is neither a non-rare earth metal nor essential for electric vehicles.\n"}
{"prompt":"∀x (OwnPet(x) → ¬TidyHouse(x)) ->","completion":" If people own at least one pet, then they do not have tidy houses.\n"}
{"prompt":"∀x (ChildhoodPet(x) → OwnPet(x)) ->","completion":" If people grew up with childhood pets, then they own at least one pet.\n"}
{"prompt":"∀x (HireCleaning(x) → TidyHouse(x)) ->","completion":" If people hire a maid or cleaning service, then they have tidy houses.\n"}
{"prompt":"∀x (Suburbs(x) → ChildhoodPet(x)) ->","completion":" If people live in the suburbs, then they have tidy houses.\n"}
{"prompt":"¬(HireCleaning(jack) ⊕ OwnPet(jack)) ->","completion":" Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet.\n"}
{"prompt":"Upright(bottle) ⊕ ToppledOver(bottle) ->","completion":" A bottle is either standing upright or toppled over. \n"}
{"prompt":"¬Upright(bottle) ->","completion":" The bottle is not upright.\n"}
{"prompt":"∀x (Cereal(x) → BusyMorning(x)) ->","completion":" If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.\n"}
{"prompt":"∀x (YoungChildren(x) → BusyMorning(x)) ->","completion":" All young children below the age of ten eat cereal and milk every day for breakfast.\n"}
{"prompt":"∀x (YoungChildren(x) ⊕ Committments(x)) ->","completion":" People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.\n"}
{"prompt":"∀x (Committments(x) → Hardworking(x)) ->","completion":" If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.\n"}
{"prompt":"∀x (Hardworking(x) → ¬Organized(x)) ->","completion":" If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.\n"}
{"prompt":"(Hardworking(john) ∧ BusyMorning(john)) ⊕ (¬Hardworking(john) ∧ ¬BusyMorning(john)) ->","completion":" John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day.\n"}
{"prompt":"OfficeIn(ableton, germany) ->","completion":" Ableton has an office in Germany.\n"}
{"prompt":"OfficeIn(ableton, usa) ->","completion":" Ableton has an office in the USA.\n"}
{"prompt":"¬SameCountry(germany, usa) ->","completion":" USA and Germany are different countries.\n"}
{"prompt":"∀x ∀y ∀z (OfficeIn(x, y) ∧ OfficeIn(x, z) ∧ ¬SameCountry(y, z) → IsMultinationalCompany(x)) ->","completion":" Any company that has offices in different countries is a multinational company.\n"}
{"prompt":"MakesMusicSoftware(ableton) ->","completion":" Ableton makes music software.\n"}
{"prompt":"∀x (Swimmer(x) → GoesUnderwater(x)) ->","completion":" Every swimmer can go underwater.\n"}
{"prompt":"∀x (EatsFishCaughtThemselves(x) → Swimmer(x)) ->","completion":" Everyone that eats fish they catch themselves is a swimmer.\n"}
{"prompt":"∀x (Penguin(x) → EatsFishCaughtThemselves(x)) ->","completion":" Every penguin eats fish they catch themselves.\n"}
{"prompt":"∀x (NonFlyingBirdAntartica(x) → Penguin(x)) ->","completion":" All nonflying birds in Antarctica are penguins.\n"}
{"prompt":"Penguin(fido) ∨ Swimmer(fido) ->","completion":" Fido is a penguin or a swimmer.\n"}
{"prompt":"∀x (Professor(x) → Teacher(x)) ->","completion":" All professors are teachers.\n"}
{"prompt":"∀x (Researcher(x) → Professor(x)) ->","completion":" All researchers are professors.\n"}
{"prompt":"∀x (Teacher(x) → ¬Student(x)) ->","completion":" No teachers are students.\n"}
{"prompt":"∀x (Study(x) → Student(x)) ->","completion":" All people who study are students.\n"}
{"prompt":"¬Study(leon) ⊕ Researcher(leon) ->","completion":" Leon is not studying or a researcher.\n"}
{"prompt":"¬Study(leon) → Teacher(leon) ->","completion":" If Leon is not studying, then Leon is a teacher.\n"}
{"prompt":"∀x (Cutman(x) → Prevent(x, physicalDamage) ∧ Treat(x, physicalDamage)) ->","completion":" A cutman is responsible for preventing and treating physical damage to a fighter.\n"}
{"prompt":"∀x (Cutman(x) → Appear(x, boxing) ∨ Appear(x, kickboxing) ∨ Appear(x, mixedMartialBout)) ->","completion":" Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout. \n"}
{"prompt":"∀x (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleeds) ∧ Handle(x, lacerations)) ->","completion":" Cutmen typically handle swelling, nosebleeds and lacerations. \n"}
{"prompt":"Cutman(jack) ->","completion":" Jack is a cutman.\n"}
{"prompt":"Painting(monaLisa) ∧ WorldsBestKnown(monaLisa) ->","completion":" The Mona Lisa is one of the world's best-known artworks.\n"}
{"prompt":"PaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa) ->","completion":" The Mona Lisa is a portrait painted by Leonardo da Vinci.\n"}
{"prompt":"Scientist(leonardodaVinci) ∧ Painter(leonardodaVinci) ->","completion":" Leonardo da Vinci was a scientist and painter.\n"}
{"prompt":"∀x (Painting(x) → (History(x) ∨ Portrait(x) ∨ Animal(x) ∨ Landscape(x) ∨ StillLife(x))) ->","completion":" Painting genres are history, portrait, animal, landscape, and still life.\n"}
{"prompt":"∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x)) ->","completion":" No professional tennis umpires are professional tennis players.\n"}
{"prompt":"∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x)) ->","completion":" If you are a World Tour player, then you are a professional tennis player.\n"}
{"prompt":"∀x (GrandSlamChampion(x) → WorldTourPlayer(x)) ->","completion":" All Grand Slam champions are World Tour players.\n"}
{"prompt":"∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x)) ->","completion":" All Grand Slam umpires are professional tennis umpires.\n"}
{"prompt":"WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal) ->","completion":" Nadal is a World Tour player or a Grand Slam champion\n"}
{"prompt":"∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x)) ->","completion":" Buisnesses are either sanctioned or unsanctioned.\n"}
{"prompt":"∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x)) ->","completion":" Sanctioned buisnesses are limited.\n"}
{"prompt":"∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x)) ->","completion":" Unsanctioned buisnesses are free.\n"}
{"prompt":"Buisness(crudeoildataexchange) ∧ ¬Free(crudeoildataexchange) ->","completion":" The Crude Oil Data Exchange is a buisness that isn't free.\n"}
{"prompt":"∀x (Depressing(x) → Sad(x)) ->","completion":" When something is depressing, it is sad.\n"}
{"prompt":"∀x (V(x) → Depressing(x)) ->","completion":" V is depressing. \n"}
{"prompt":"∀x (Palstave(x) → From(x, earlybronzeage) ∧ Axe(x)) ->","completion":" Palstaves are a type of early bronze axe.\n"}
{"prompt":"∀x ∀y (Palstave(x) ∧ Mould(y) → FoundIn(x, northerneurope) ∧ FoundIn(x, westerneurope) ∧ FoundIn(x, south-westerneurope) ∧ CastIn(x, y)) ->","completion":" Commonly found in northern, western and south-western Europe, palstaves are cast in moulds.\n"}
{"prompt":"Archeologist(johnevans) ∧ Popularized(johnevans, termpalstave) ->","completion":" John Evans is an archeologist who popularized the term \"palstave\".\n"}
{"prompt":"∀x (Paalstab(x) → ¬Axe(x) ∧ DiggingShovel(x)) ->","completion":" A paalstab is not an axe, but rather a digging shovel.\n"}
{"prompt":"Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo) ->","completion":" Koei Tecmo is a Japanese video game and anime holding company.\n"}
{"prompt":"∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y)) ->","completion":" Holding companies hold several companies.\n"}
{"prompt":"Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei) ->","completion":" Tecmo was disbanded in Japan, while Koei survived, but was renamed.\n"}
{"prompt":"∀x (VideoGameHoldingCompany(x) → HoldingCompany(x)) ->","completion":" Video game holding companies are holding companies.\n"}
{"prompt":"Accessory(pseyetoy, ps2) ->","completion":" The PlayStation EyeToy is a camera accessory for the Playstation 2. \n"}
{"prompt":"Accessory(pseye, ps3) ->","completion":" The PlayStation Eye is a camera accessory for the Playstation 3.\n"}
{"prompt":"Accessory(pscamera, ps4) ∧ Accessory(pscamera, ps5) ->","completion":" The Playstation Camera is a camera accessory for the Playstation 4 and the Playstation 5.\n"}
{"prompt":"∀x ∀y (Accessory(x, y) → Compatible(x, y)) ->","completion":" Camera accessory for the system is compatible with that system\n"}
{"prompt":"¬Compatible(pseye, ps2) ∧ ¬Compatible(pseye, ps4)∧¬Compatible(pseye, ps5)∧¬Compatible(pseyetoy, ps3)∧¬Compatible(pseyetoy, ps4)∧¬Compatible(pseyetoy, ps5) ->","completion":" Only the Playstation Camera is compatible with more than one system.\n"}
{"prompt":"FootballPlayer(adambuska) ∧ European(adambuska) ->","completion":" Adam Buska is a European football player.\n"}
{"prompt":"∀x ((FootballPlayer(x) ∧ European(x)) → PlaysAmericanSoccer(x)) ->","completion":" If a European plays football, they play what Americans call soccer.\n"}
{"prompt":"∀x (SoldMillion(x) → BestSeller(x)) ->","completion":" If the game has sold more than 1 million copies, then it is on the Best Seller list. \n"}
{"prompt":"∀x (DevelopedByParadox(x) → SoldMillion(x)) ->","completion":" All Games developed by Paradox Development Studio sold more than 1 million copies. \n"}
{"prompt":"∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x))) ->","completion":" Some games published before 2010 support the Linux OS system. \n"}
{"prompt":"∀x (BestSeller(x) → Popular(x)) ->","completion":" All games on the Best Seller list are popular among young people. \n"}
{"prompt":"¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21)) ->","completion":" FIFA22 neither supports the Linux OS system nor is it popular among young people.\n"}
{"prompt":"∀x (China(x) → BRICS(x) ∧ EmergingEconomy(x)) ->","completion":" China is one of BRICS and its economy is emerging.\n"}
{"prompt":"∀x (India(x) → BRICS(x) ∧ EmergingEconomy(x)) ->","completion":" India is one of BRICS and its economy is emerging.\n"}
{"prompt":"∀x ∀y (From(x, y) ∧ China(y) → Speak(x, chinese)) ->","completion":" All people from China speak Chinese.\n"}
{"prompt":"∀x ∀y (From(x, y) ∧ India(y) → Speak(x, hindi) ∨ Speak(x, english)) ->","completion":" All people from India speak Hindi or English.\n"}
{"prompt":"∃x ∃y (From(x, y) ∧ India(y)) ->","completion":" There is an Indian.\n"}
{"prompt":"Actor(daveedDiggs) ∧ FilmProducer(daveedDiggs) ->","completion":" Daveed Diggs is an actor and film producer.\n"}
{"prompt":"PlayedTwoRoles(daveedDiggs) ∧ PlayedIn(daveedDiggs, hamilton) ∧ Musical(hamilton) ->","completion":" Daveed Diggs played two roles in the musical Hamilton.\n"}
{"prompt":"∃x (Actor(x) ∧ PlayedIn(x, hamilton) ∧ WonBestActorAward(x)) ->","completion":" One of the actors from Hamilton won the best actor award.\n"}
{"prompt":"∀x (Actor(x) ∧ Played(x, thomasJefferson) → WonBestActorAward(x)) ->","completion":" The actor playing Thomas Jefferson won the best actor award.\n"}
{"prompt":"Played(daveedDiggs, thomasJefferson) ->","completion":" Daveed Diggs played Thomas Jefferson.\n"}
{"prompt":"∀x (Musical(x) → ¬Film(x)) ->","completion":" Musicals are not films.\n"}
{"prompt":"PolishFootballPlayer(ernestpohl) ->","completion":" Ernest Pohl was a Polish football player. \n"}
{"prompt":"∃x (In(x, polishfirstdivision) ∧ ScoredMoreThan180Goals(x)) ->","completion":" A football player in the Polish First Division has scored over 180 goals. \n"}
{"prompt":"ScoredMoreThan180Goals(ernestpohl) ∧ In(ernestpohl, polishfirstdivision) ->","completion":" Ernest Pohl scored more than 180 goals in the Polish First Division. \n"}
{"prompt":"∃x (NamedAfter(gornikzabrze, x) ∧ FootballPlayer(x) ∧ From(x, rudaslaska)) ->","completion":" Górnik Zabrze's stadium was named after a soccer player from Ruda Śląska. \n"}
{"prompt":"From(ernestpohl, rudaslaska) ->","completion":" Ernest Pohl is from Ruda Śląska. \n"}
{"prompt":"PhiladephiaCouncil(annJLand) ∧ DemocraticParty(annJLand) ->","completion":" Ann J. Land was a member of the Philadelphia City Council and was also a member of the Democratic Party.\n"}
{"prompt":"Year(y1980) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand) ->","completion":" Ann J. Land ran unopposed for the Philadephia City Council in 1980.\n"}
{"prompt":"∀x (RunFor(x) ∧ PhiladephiaCouncil(x) → Elected(x)) ->","completion":" People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.\n"}
{"prompt":"Challenger(nutter) ->","completion":" Michael Nutter was a political challenger.\n"}
{"prompt":"Year(y1987) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand) ∧ Defeated(annJLand, nutter) ->","completion":" Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987.\n"}
{"prompt":"WonCup(aberdeen, twentythirteen) ->","completion":" Aberdeen won the cup in the 2013 final.\n"}
{"prompt":"WonCup(rangers, twentyfourteen) ->","completion":" Rangers won the cup in 2014 final.\n"}
{"prompt":"Different(aberdeen, rangers) ∧ Different(rangers, aberdeen) ->","completion":" Aberdeen and Rangers are different teams.\n"}
{"prompt":"∀x ∀y ∀z (Different(x, y)  ∧ WonCup(x, z)  → ¬WonCup(y, z)) ->","completion":" Different teams cannot win the same cup in a given year's final.\n"}
{"prompt":"∀x (Working(x) → Pets(x)) ->","completion":" All young working professionals who have regular 9-5 jobs also have pets.\n"}
{"prompt":"∃x (Manhattan(x) ∧ Working(x)) ->","completion":" Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.\n"}
{"prompt":"∀x (Pets(x) → Child(x)) ->","completion":" All people who have pets are people who have at least one child.\n"}
{"prompt":"∀x (Child(x) → ¬Car(x)) ->","completion":" People who do not have at least one child are people who own a sports car.\n"}
{"prompt":"¬(Car(mary) ⊕ Child(mary)) ->","completion":" Mary either does not own a sports car or, if they do, then they do not have at least one child.\n"}
{"prompt":"∀x (BlockDesign(x) ∨ Event-relatedDesign(x)) ->","completion":" Either block design or event-related design. \n"}
{"prompt":"∀x (Event-relatedDesign(x) → BrainImageAcquisition(x)) ->","completion":" All event-related designs are brain image acquisition.\n"}
{"prompt":"∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x)) ->","completion":" All brain image acquisition is preceded by data processing.\n"}
{"prompt":"∀x (PrecededByDataProcessing(x) → ¬AcquiringData(x)) ->","completion":" Nothing preceded by data processing acquires data.\n"}
{"prompt":"(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory)) ->","completion":" Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data.\n"}
{"prompt":"(USNavyShip(usslyon) ∧ InWWII(usslyon)) ->","completion":" The USS Lyon was a US Navy ship involved in WWII.\n"}
{"prompt":"∀x (InWWII(x) → (Decommissioned(x) ∨ InMuseum(x))) ->","completion":" All ships involved in WWII are currently decommissioned or in a museum.\n"}
{"prompt":"∀x (DisposableChopsticks(x) → MadeFromTrees(x)) ->","completion":" All disposable chopsticks are made from trees.\n"}
{"prompt":"∃x (EcoFriendly(x)) ->","completion":" Some chopsticks are eco-friendly.\n"}
{"prompt":"∀x (DisposableChopsticks(x) ⊕ Reusable(x))  ->","completion":" Either disposable chopsticks or reusable chopsticks. \n"}
{"prompt":"∀x (MadeFromMetals(x) → ¬MadeFromPlastics(x)) ->","completion":" If chopsticks are made from metals, then they are not made from plastics. \n"}
{"prompt":"∀x (Reusable(x) → MadeFromMetals(x)) ->","completion":" All reusable chopsticks are made from metal.\n"}
{"prompt":"¬(MadeFromMetals(chopsticksAtRestaurants) ⊕ MadeFromPlastics(chopsticksAtRestaurants)) ->","completion":" Chopsticks at restaurants are either made from metals and made from plastics, or neither made from metals nor made from plastics.\n"}
{"prompt":"∀x (Lazy(x) → Unproductive(x)) ->","completion":" Anything that is lazy is unproductive.\n"}
{"prompt":"∀x (Unproductive(x) → ¬Energetic(x)) ->","completion":" No one unproductive is an energetic person.\n"}
{"prompt":"∀x (Sloth(x) → Lazy(x)) ->","completion":" If something is a sloth, then it is lazy.\n"}
{"prompt":"∃x (Animal(x) ∧ Sloth(x)) ->","completion":" Some animals are sloths.\n"}
{"prompt":"¬Energetic(sid) ∨ Sloth(sid) ->","completion":" Sid is not either an energetic person or a sloth.\n"}
{"prompt":"∀x (European(x) ∧ SoccerClub(x) → Attend(x, ucl) ∨ Attend(x, uel) ∨ Attend(x, uecl)) ->","completion":" European soccer clubs can attend UCL, UEL and UECL.\n"}
{"prompt":"∀x ∀y (SoccerClub(x) ∧ SoccerClub(y) ∧ Attend(x, ucl) ∧ Attend(y, uel) → HigherRank(x, y)) ->","completion":" A soccer club eligible to attend UCL has a higher ranking than a soccer club eligible to attend UEL.\n"}
{"prompt":"∀x ∀y (SoccerClub(x) ∧ SoccerClub(y) ∧ Attend(x, uel) ∧ Attend(y, uecl) → HigherRank(x, y)) ->","completion":" A soccer club eligible to attend UEL has a higher ranking than a soccer club eligible to attend UECL.\n"}
{"prompt":"European(manchesterunited) ∧ SoccerClub(manchesterunited) ∧ European(manchestercity) ∧ SoccerClub(manchestercity) ->","completion":" Manchester United and Machester City are both European soccer clubs.\n"}
{"prompt":"Attend(manchesterunited, uel) ->","completion":" Manchester United is eligible to attend UEL next season.\n"}
{"prompt":"Attend(manchestercity, ucl) ->","completion":" Manchester City is eligible to attend UCL next season.\n"}
{"prompt":"∀x ∀y (Coach(x, y) ∧ IsFootballClub(y) → IsFootballCoach(x)) ->","completion":" If a person coach a football club, the person is a football coach.\n"}
{"prompt":"∀x ∀y ∀z (PlayFor(x, y) ∧ NFLTeamYear(y, z) ∧ InTeam(x, z) → PlayInNFL(x)) ->","completion":" If a person has a position in a club for a position in a year, and the club is in NFL in the same year, the person plays in NFL.\n"}
{"prompt":"IsFootballClub(minnesota_Vikings) ->","completion":" Minnesota Vikings is a football club.\n"}
{"prompt":"Coach(dennis_Green, minnesota_Vikings) ->","completion":" Dennis Green coached Minnesota Vikings.\n"}
{"prompt":"TouchDownReceptionTime(cris_Carter, t13) ->","completion":" Cris Carter had 13 touchdown receptions.\n"}
{"prompt":"NFLTeamYear(minnesota_Vikings, y1997) ->","completion":" Minnesota Vikings was in the National Football League in 1997.\n"}
{"prompt":"Position(john_Randle, defensive_tackle) ∧ InTeam(john_Randle, y1997) ∧ PlayFor(john_Randle, minnesota_Vikings) ->","completion":" John Randle was Minnesota Vikings defensive tackle in 1997.\n"}
{"prompt":"∀x (Cat(x) → Cute(x)) ->","completion":" All cats are cute.\n"}
{"prompt":"∀x (Cat(x) ∨ Dog(x)) ->","completion":" An animal is either a cat or a dog.\n"}
{"prompt":"∀x (Bark(x) → ¬Lovely(x)) ->","completion":" Nothing that barks is lovely. \n"}
{"prompt":"∀x (Dog(x) → Bark(x)) ->","completion":" If something is a dog, then it barks.\n"}
{"prompt":"(Cat(grace) ∧ Dog(grace)) ⊕ (¬Cat(grace) ∧ ¬Dog(grace)) ->","completion":" Grace is either a cat and a dog, or neither a cat nor a dog.\n"}
{"prompt":"LargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea) ->","completion":" Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.\n"}
{"prompt":"NorthwestOf(baku, shafaq-asiman) ->","completion":" Baku is northwest of Shafaq-Asiman.\n"}
{"prompt":"∀x ∀y (NorthwestOf(x, y) → SoutheastOf(y, x)) ->","completion":" If place A is northwest of place B, then place B is southeast of place A.\n"}
{"prompt":"Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus) ->","completion":" Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.\n"}
{"prompt":"Born(herodicus, selymbia) ∧ City(selymbia) ->","completion":" Herodicus was born in the city of Selymbria.\n"}
{"prompt":"Colony(selymbia, megara) ∧ CityState(megara) ->","completion":" Selymbria is a colony of the city-state Megara.\n"}
{"prompt":"Tutored(herodicus, hippocrates) ->","completion":" One of the tutors of Hippocrates was Herodicus.\n"}
{"prompt":"Recommended(herodicus, massages) ->","completion":" Massages were recommended by Herodicus.\n"}
{"prompt":"∃x (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine)) ->","completion":" Some of theories of Herodicus are considered to be the foundation of sports medicine.\n"}
{"prompt":"∀x (Kid(x) → ¬OperaLover(x)) ->","completion":" No kid loves the Opera.\n"}
{"prompt":"∀x (Adult(x) → OperaLover(x)) ->","completion":" All adults love the Opera.\n"}
{"prompt":"∀x (Scientist(x) → Adult(x)) ->","completion":" If someone is a scientist, then they are an adult.\n"}
{"prompt":"∃x (Student(x) ∧ Kid(x)) ->","completion":" Some students are kids.\n"}
{"prompt":"Kid(billy) ->","completion":" Billy is a kid.\n"}
{"prompt":"Scottish(brianwinter) ∧ FootballReferee(brianwinter) ->","completion":" Brian Winter is a Scottish football referee.\n"}
{"prompt":"Injured(brianwinter) ∧ Retired(brianwinter) ->","completion":" After being injured, Brian Winter retired in 2012.\n"}
{"prompt":"RefereeObserver(brianwinter) ->","completion":" Brian Winter was appointed as a referee observer after his retirement.\n"}
{"prompt":"∃x (FootballReferee(x) ∧ RefereeObserver(x)) ->","completion":" Some football referees become referee observers.\n"}
{"prompt":"Son(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical) ->","completion":" The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.\n"}
{"prompt":"∀x (Puzzles(x) ∨ BadChess(x)) ->","completion":" People are either interested in puzzles or bad at chess.\n"}
{"prompt":"∀x (BadChess(x) → ¬PlaysLots(x)) ->","completion":" If a person is bad at chess, then they don't play a lot of chess.\n"}
{"prompt":"∀x (Plans(x) ∨ Creative(x)) ->","completion":" A person is either a planner or a creative person.\n"}
{"prompt":"PlaysLots(erica) ->","completion":" Erica is someone who plays a lot of chess.\n"}
{"prompt":"¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica)) ->","completion":" If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.\n"}
{"prompt":"∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x)) ->","completion":" Soccer players have a right foot and a left foot.\n"}
{"prompt":"∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x)) ->","completion":" Top soccer players are soccer players who can use their both feet very efficiently.\n"}
{"prompt":"∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left)) ->","completion":" If a soccer player can score many goals using left foot, then they can use that foot very efficiently.\n"}
{"prompt":"∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right)) ->","completion":" If a soccer player can score many goals using right foot, then they can use that foot very efficiently.\n"}
{"prompt":"SoccerPlayer(ronaldo) ->","completion":" Cristiano Ronaldo is a soccer player.\n"}
{"prompt":"Efficient(ronaldo, right) ->","completion":" Cristiano Ronaldo can use his right foot very efficiently.\n"}
{"prompt":"ScoreManyGoals(ronaldo, left) ->","completion":" Cristiano Ronaldo have scored more than one hundred goals using his left foot.\n"}
{"prompt":"Hatchery(nationallobsterhatchery) ∧ LocatedIn(nationallobsterhatchery, padstowengland) ->","completion":" The National Lobster Hatchery is a hatchery located in Padstow England.\n"}
{"prompt":"OpenToVisitors(nationallobsterhatchery) ->","completion":" The National Lobster Hatchery is open to visitors.\n"}
{"prompt":"∀x (Hatchery(x) → ForConservation(x) ∨ ForProfit(x)) ->","completion":" A hatchery is either for profit, or for conservation.\n"}
{"prompt":"∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleasesAnimalsToWild(x)) ->","completion":" If a hatchery is for conservation, it might release animals into the wild.\n"}
{"prompt":"¬ForProfit(nationallobsterhatchery) ->","completion":" The National Lobster Hatchery is not for profit.\n"}
{"prompt":"∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ BasedInPonciau(x) ∧ Welsh(x)) ->","completion":" Rhos Aelwyd F.C. is a Welsh football club.\n"}
{"prompt":"∀x (BasedInPonciau(x) ↔ Rhosaelwydfc(x)) ->","completion":" Rhos Aelwyd F.C. is the only club based in Ponciau. \n"}
{"prompt":"∃x (BasedInPonciau(x) ∧ WonPremierDivisionDuring(x, y2005)) ->","completion":" The Premier Division was won in 2005–06 by a team from Ponciau. \n"}
{"prompt":"∀x (WonPremierDivisionDuring(x, y2009) → Promoted(x)) ->","completion":" The winner of the Premier Division in 2009–10 was promoted back to the Cymru Alliance.\n"}
{"prompt":"∀x (WonPremierDivisionDuring(x, y2009) ↔ WonPremierDivisionDuring(x, y2005)) ->","completion":" The Premier Division in 2009–10 was won by the same team that won in 2005-06. \n"}
{"prompt":"∀x (OS(x) → Software(x)) ->","completion":" All OS are software.\n"}
{"prompt":"∀x (Mac(x) → OS(x)) ->","completion":" All Mac are OS.\n"}
{"prompt":"∀x (Mac(x) ∨ Windows(x)) ->","completion":" An OS is either Mac or Windows.\n"}
{"prompt":"∀x (Windows(x) → Convenient(x)) ->","completion":" All Windows are convenient.\n"}
{"prompt":"∀x (Software(x) → Code(x)) ->","completion":" All software has code.\n"}
{"prompt":"∀x (Convenient(x) → Popular(x)) ->","completion":" If something is convenient, then it is popular.\n"}
{"prompt":"Code(burger) ∧ Mac(burger)) ->","completion":" Burger is a piece of code and a Mac.\n"}
{"prompt":"(Windows(pytorch) ∧ Software(pytorch)) ⊕ (¬Windows(pytorch) ∧ ¬Software(pytorch)) ->","completion":" PyTorch is either Windows and software, or neither Windows nor software.\n"}
{"prompt":"∀x (Road(x) → (MadeOfConcrete(x) ∨ MadeOfAsphalt(x)) ->","completion":" Roads are made of either concrete or asphalt.\n"}
{"prompt":"∀x ∀y (Road(x) ∧ MadeOfConcrete(x) ∧ Road(y) ∧ MadeOfAsphalt(y) → LastLonger(x, y)) ->","completion":" Roads made of concrete last longer than roads made with asphalt.\n"}
{"prompt":"∀x ∀y (Road(x) ∧ MadeOfAsphalt(x) ∧ Road(y) ∧ MadeOfConcrete(y) → Smoother(x, y)) ->","completion":" Roads made of asphalt are smoother than roads made of concrete.\n"}
{"prompt":"∀x ∀y ∀z (Road(x) ∧ Road(y) ∧ Smoother(x, y) → Prefers(z, x)) ->","completion":" Everyone prefers the smoother of two roads. \n"}
{"prompt":"Road(one) ∧ MadeOfConcrete(one) ∧ Road(two) ∧ MadeOfAsphalt(two) ->","completion":" Road one is made of concrete and Road two is made of asphalt.\n"}
{"prompt":"TraditionalSummerCamp(campdavern) ∧ ForBoysAndGirls(campdavern) ->","completion":" Camp Davern is a traditional summer camp for boys and girls.\n"}
{"prompt":"EstablishedIn(campdavern, year1946) ->","completion":" Camp Davern was established in the year 1946.\n"}
{"prompt":"OperatedByYMCAUntil(campdavern, year2015) ->","completion":" Camp Davern was operated by the YMCA until the year 2015.\n"}
{"prompt":"OneOf(campdavern, ontariosoldestsummercamps) ->","completion":" Camp Davern is one of Ontario's oldest summer camps.\n"}
{"prompt":"∀x (PublishJournals(x) → ¬Entertainment(x)) ->","completion":" If people publish journals, then they do not work in the entertainment industry.\n"}
{"prompt":"∀x (Novelist(x) → PublishJournals(x)) ->","completion":" All people who are award-winning novelists publish journals.\n"}
{"prompt":"∀x (Entertainment(x) ∨ Acclaimed(x)) ->","completion":" People either work in the entertainment industry or are highly acclaimed in their profession.\n"}
{"prompt":"∀x (Acclaimed(x) → Tenured(x)) ->","completion":" If people are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace.\n"}
{"prompt":"∀x (Acclaimed(x) → Glowing(x)) ->","completion":" If people are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues.\n"}
{"prompt":"(Acclaimed(emily) ∧ Tenured(emily)) ∨ (¬Acclaimed(emily) ∧ ¬Tenured(emily)) → ¬Acclaimed(emily) ->","completion":" If Emily is either both highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace, or she is neither highly acclaimed in her profession nor often holds tenured and high-ranking positions at her workplace, then Emily is not highly acclaimed in her profession. \n"}
{"prompt":"YoungAdultFantasyNovel(thickastheives) ∧ WrittenBy(thickastheives, megan) ->","completion":" Thick as Thieves is a young adult fantasy novel, written by Megan Whalen Turner.\n"}
{"prompt":"PublishedBy(thickastheives, greenwillowbooks) ->","completion":" Thick as Thieves was published by Greenwillow Books.\n"}
{"prompt":"∀x ∀y ∀z (WrittenBy(x, y) ∧ PublishedBy(x, z) → WorkedWith(y, z)) ->","completion":" If a book was published by a company, than the author of that book worked with the company that published the book.\n"}
{"prompt":"Fictional(medeempire) ∧ SetIn(thickastheives, medeempire) ->","completion":" The fictional Mede Empire is where Thick as Thieves is set.\n"}
{"prompt":"∃x (Country(x) Nearby(medeempire, x) ∧ PlotsToSwallowUp(medeempire, x)) ->","completion":" The Mede Empire plots to swallow up some nearby countries.\n"}
{"prompt":"Country(attolia) ∧ Nearby(medeempire, attolia) ∧ Country(sounis) ∧ Nearby(medeempire, sounis) ->","completion":" Attolia and Sounis are countries near the Mede Empire.\n"}
{"prompt":"SoldAs(thickastheives, hardcover) ∧ SoldAs(thickastheives, softcover) ->","completion":" Thick as Thieves was sold both as a hardcover and an e-book.\n"}
{"prompt":"∀x (WeTab(x) → MeeGoBased(x) ∧ TabletComputer(x)) ->","completion":" WeTab is a MeeGo-based tablet computer.\n"}
{"prompt":"∃x (WeTab(x)) ->","completion":" There is a WeTab product.\n"}
{"prompt":"∀x (WeTab(x) → Announce(neofonie, x)) ->","completion":" WeTab was announced by Neofonie.\n"}
{"prompt":"German(neofonie) ∧ Producer(neofonie) ->","completion":" Neofonie is a German producer.\n"}
{"prompt":"∀x (German(x) → Speak(x, english) ∨ Speak(x, german)) ->","completion":" Germans speak English or German.\n"}
{"prompt":"∃x ( BusinessAnalysis(x) ∧ GoodAtMath(x)) ->","completion":" Some employees working in business analysis are good at math. \n"}
{"prompt":"∀x (BusinessAnalysis(x) → WorkInCompany(x)) ->","completion":" All employees working in business analysis are working in this company. \n"}
{"prompt":"∀x (WorkInCompany(x) → ¬FromChina(x)) ->","completion":" No employees working in this company are from China. \n"}
{"prompt":"∀x (SoftwareEngineering(x) → FromChina(x)) ->","completion":" All employees working in software engineering are from China. \n"}
{"prompt":"SoftwareEngineering(james) ->","completion":" James is working in software engineering. \n"}
{"prompt":"Party(strawberry) ∨ Party(orange) ∨ Party(blueberry) ∨ Party(grape) ∨ Party(cherry)  ->","completion":" The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.\n"}
{"prompt":"∀x (Party(x) → SameWeight(x)) ->","completion":" All fruits are provided in the same weight at the beginning of the party.\n"}
{"prompt":"∀x (LowestAmount(x) → MostPopular(x))  ->","completion":" If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.\n"}
{"prompt":"LowestAmount(strawberries) ->","completion":" At the end of the party, strawberries had the lowest remaining weight.\n"}
{"prompt":"Lower(blueberry, cherry) ->","completion":" At the end of the party, the amount of leftover blueberries was lower than that of cherries.\n"}
{"prompt":"Eat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eat(blueberry, benjamin) ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin) ->","completion":" Benjamin only ate oranges and grapes at the party.\n"}
{"prompt":"∀x (Attend(x) → Registered(x)) ->","completion":" All students who attend in person have registered for the conference. \n"}
{"prompt":"∀x (Attend(x) → InPerson(x) ⊕ Remotely(x)) ->","completion":" Students either attend the conference in person or remotely. \n"}
{"prompt":"∀x ((Attend(x) ∧ China(x)) → ¬Remotely(x)) ->","completion":" No students from China attend the conference remotely. \n"}
{"prompt":"Attend(james) ∧ ¬Remotely(james) ->","completion":" James attends the conference but he does not attend the conference remotely.\n"}
{"prompt":"China(jack) ∧ Attend(jack) ->","completion":" Jack attends the conference and he is a student from China.\n"}
{"prompt":"PoliticalStrategist(davidhaivri) ->","completion":" David Ha'ivri is a political strategist. \n"}
{"prompt":"∀x ∃y (BornInIsrael(x) ∧ ParentOf(x, y) ∧ Israeli(y) → IsraeliCitizen(x)) ->","completion":" If you are born in Israel to at least one Israeli parent, then you receive citizenship at birth. \n"}
{"prompt":"∃x (EmigratedTo(davidhaivri, america) ∧ BornInIsrael(davidhaivri) ∧ ParentOf(davidhaivri, x) ∧ Israeli(x)) ->","completion":" David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. \n"}
{"prompt":"∃x (ZionistLeader(x) ∧ ElectedTo(x, shomronmunicipalcouncil)) ->","completion":" Several Zionist leaders have been elected to the Shomron Regional Municipal council. \n"}
{"prompt":"ZionstLeader(davidhaivri) ->","completion":" David Ha'ivri is a Zionist leader. \n"}
{"prompt":"Have(mary, flu) ->","completion":" Mary has the flu.\n"}
{"prompt":"∀x (Have(x, flu) ↔ Have(x, influenza)) ->","completion":" Flu and influenza are the same disease.\n"}
{"prompt":"¬Have(susan, influenza) ->","completion":" Susan doesn't have influenza.\n"}
{"prompt":"British(james) ∧ Lawyer(james) ->","completion":" James Cocks was a British lawyer.\n"}
{"prompt":"Whig(james) ∧ Politician(james) ∧ SatInHouseOfCommons(james) ->","completion":" James Cocks was a Whig politician who sat in the House of Commons.\n"}
{"prompt":"∀x (British(x) → European(x)) ->","completion":" A British is a European.\n"}
{"prompt":"∀x (Lawyer(x) → FamiliarWithLaws(x)) ->","completion":" Any lawyer is familiar with laws.\n"}
{"prompt":"∃x (Whig(x) ∧ SpeakFrench(x)) ->","completion":" Some Whigs speak French.\n"}
{"prompt":"Novel(beastsofprey) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(beastsofprey) ->","completion":" Beasts of Prey is either a fantasy novel or a science fiction novel.\n"}
{"prompt":"∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y)) ->","completion":" Science fiction novels are not about mythological creatures\n"}
{"prompt":"About(beastsofprey, shetani) ∧ Creature(shetani) ->","completion":" Beasts of Prey Is about a creature known as the Shetani.\n"}
{"prompt":"Mythological(shetani) ->","completion":" Shetanis are mythological.\n"}
{"prompt":"∀x (Odell(x) → Surname(x)) ->","completion":" Odell is an English surname originating in Odell, Bedfordshire.\n"}
{"prompt":"∃x (Odell(x) ∧ SpelledODell(x)) ->","completion":" In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.\n"}
{"prompt":"Odell(amyOdell) ∧ NotablePeople(amyOdell) ∧ Odell(jackOdell) ∧ NotablePeople(jackOdell) ∧ Odell(matsOdell) ∧ NotablePeople(matsOdell) ->","completion":" Notable people with the surname include Amy Odell, Jack Odell, and Mats Odell.\n"}
{"prompt":"British(amyOdell) ∧ Singer(amyOdell) ∧ SongWriter(amyOdell) ->","completion":" Amy Odell is a British singer-songwriter.\n"}
{"prompt":"English(jackOdell) ∧ ToyInvertor(jackOdell) ->","completion":" Jack Odell is an English toy inventor.\n"}
{"prompt":"∀x (Train(x) → ¬LoseTime(x)) ->","completion":" If you go somewhere by train, you will not lose time.\n"}
{"prompt":"∀x ((Car(x) ∧ MeetJam(x)) → LoseTime(x)) ->","completion":" If you go somewhere by car and meet traffic jam, you will lose time.\n"}
{"prompt":"∀x (LoseTime(x) ↔ LateForWork(x)) ->","completion":" If you lose time, you will be late for work.\n"}
{"prompt":"Train(mary) ⊕ Car(mary) ->","completion":" Mary can get from New Haven to New York City either by train or car.\n"}
{"prompt":"LateForWork(mary) ->","completion":" Mary is late for work.\n"}
{"prompt":"∀x (Hungry(x) → Uncomfortable(x)) ->","completion":" If a person is hungry, the person is uncomfortable.\n"}
{"prompt":"∀x (Uncomfortable(x) → ¬Happy(x)) ->","completion":" If a person is uncomfortable, the person is unhappy.\n"}
{"prompt":"∀x (Tipped(x) → ¬GetMinWage(x)) ->","completion":" Tipped employees do not get a guaranteed minimum wage.\n"}
{"prompt":"∀x (WhiteCollar(x) → GetMinWage(x)) ->","completion":" If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).\n"}
{"prompt":"∀x (Lawyer(x) → WhiteCollar(x)) ->","completion":" All lawyers are white-collar workers.\n"}
{"prompt":"∀x (Advocate(x) → Lawyer(x)) ->","completion":" Every advocate is a lawyer.\n"}
{"prompt":"¬Lawyer(mary) ⊕ Tipped(mary) ->","completion":" Mary is not a lawyer or a tipped employee.\n"}
{"prompt":"BornIn(asaHoffmann, newyorkcity) ->","completion":" Asa Hoffmann was born in New York City.\n"}
{"prompt":"LivesIn(asaHoffmann, manhattan) ->","completion":" Asa Hoffman lives in Manhattan.\n"}
{"prompt":"IsChessPlayer(asaHoffmann) ->","completion":" Asa Hoffman is a chess player.\n"}
{"prompt":"∃x (IsChestPlayer(x) ∧ IsGrandMaster(x)) ->","completion":" Some chess players are grandmasters.\n"}
{"prompt":"∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x)) ->","completion":" People born and living in New York City are New Yorkers.\n"}
{"prompt":"∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity)) ->","completion":" People liviing in Manhattan live in New York City.\n"}
{"prompt":"∃x (ApplyVisa(x) → GetVisa(x)) ->","completion":" Some of those who apply for a Schengen Visa get it.\n"}
{"prompt":"∀x (ApplyVisa(x) → FinancialGuarantees(x)) ->","completion":" To apply for a Schengen Visa, you need to provide financial guarantees.\n"}
{"prompt":"∀x (FinancialGuarantees(x) → RequestDocuments(x)) ->","completion":" If you need to provide financial guarantees, you must request documents from the bank.\n"}
{"prompt":"∀x (RequestDocuments(x) → ¬CloseBankAccount(x)) ->","completion":" Do not close your bank account if you request documents from the bank.\n"}
{"prompt":"CloseBankAccount(philip) ->","completion":" Philip closed his bank account.\n"}
{"prompt":"∃x (Fear(x) ∧ Anxiety(x)) ->","completion":" Some fears lead to anxiety.\n"}
{"prompt":"∃x (Anxiety(x) ∧ Terror(x)) ->","completion":" Some anxiety leads to terror.\n"}
{"prompt":"∀x (GreatLake(x) → Superior(x) ∨ Michigan(x) ∨ Huron(x) ∨ Erie(x) ∨ Ontario(x)) ->","completion":" The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.\n"}
{"prompt":"∃x ∀y (Erie(y) ∧ MajorSettlementOf(x, y) ∧ In(x, ny) ∨ In(x, pa) ∨ In(x, oh) ∨ In(x, mi)) ->","completion":" Some major settlements of Lake Erie are in NY, PA, OH, and MI.\n"}
{"prompt":"State(ny, us) ∧ State(pa, us) ∧ State(oh, us) ∧ State(mi, us) ->","completion":" NY, PA, OH, MI are states in the US.\n"}
{"prompt":"State(on, canada) ->","completion":" ON is a state of Canada.\n"}
{"prompt":"∃x ∀y (Huron(y) ∧ MajorSettlementOf(x, y) ∧ In(x, on)) ->","completion":" There is a major settlement of Lake Huron in ON. \n"}
{"prompt":"∀x ∀y (State(x, y) → In(x, y)) ->","completion":" All states are in their country.\n"}
{"prompt":"In(us, northamerica) ->","completion":" The US is in North America.\n"}
{"prompt":"∀x (GreatLake(x) → FormAtEndOf(x, lastglacialperiod)) ->","completion":" The Great Lakes began to form at the end of the Last Glacial Period.\n"}
{"prompt":"∀x (SoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x)) ->","completion":" No soccer players are professional basketball players.\n"}
{"prompt":"∀x (CenterBack(x) → Defender(x)) ->","completion":" All centerbacks are defenders.\n"}
{"prompt":"¬NBAPlayer(stephencurry) → ¬(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) ->","completion":" If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player.\n"}
{"prompt":"Proposed(justinKruger, naiveCynicism) ∧ Proposed(colleagueOfJustinKruger, naiveCynicism)  ->","completion":" Naive cynicism was proposed by Justin Kruger and a colleague.\n"}
{"prompt":"Colleague(thomasGilovich, justinKruger) ->","completion":" Thomas Gilovich is a colleague of Justin Kruger. \n"}
{"prompt":"PhilosophyOfMind(naiveCynicism) ->","completion":" Naive cynicism is a philosophy of mind.\n"}
{"prompt":"TuringAwarded(donaldKnuth) ∧ TuringAwarded(marvinMinsky) ∧ TuringAwarded(richardHamming) ∧ TuringAwarded(johnMccarthy) ->","completion":" The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. \n"}
{"prompt":"ContributedTo(donaldKnuth, algorithms) ->","completion":" Donald Knuth made major contributions to the analysis of algorithms.\n"}
{"prompt":"ContributedTo(marvinMinsky, ai) ->","completion":" Marvin Minsky is recognized by his contributions to the field of artificial intelligence.\n"}
{"prompt":"ContributedTo(richardHamming, numericalMethods) ->","completion":" Richard Hamming did research on numerical methods.\n"}
{"prompt":"ContributedTo(johnMccarthy, ai) ->","completion":" John McCarthy had a central role in creating and shaping the field of artificial inteligence. \n"}
{"prompt":"∀x (Easy(x) → ¬LowerAC(x)) ->","completion":" No easy Leetcode problems have an AC rate lower than 20 percent. \n"}
{"prompt":"∀x (Recommended(x) → Easy(x)) ->","completion":" All Leetcode problems recommended to novices are easy.                                                                                                       \n"}
{"prompt":"∀x (LowerAC(x) ⊕ Starred(x)) ->","completion":" Leetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. \n"}
{"prompt":"∀x (Hard(x) → Starred(x)) ->","completion":" All hard Leetcode problems are starred by more than 1 thousand users. \n"}
{"prompt":"∀x (PublishedAfter2022(x) → ¬Starred(x)) ->","completion":" No Leetcode problems published after 2022 are starred by more than 1 thousand users. \n"}
{"prompt":"¬(Recommended(twosum) ∧ Hard(twosum)) ->","completion":" 2Sum is not recommended to novices and hard. \n"}
{"prompt":"¬(Starred(foursum) ⊕ PublishedAfter2022(foursum)) ->","completion":" 4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. \n"}
{"prompt":"Song(showyourlove) ∧ RecordedBy(showyourlove, btob4u) ∧ SouthKorean(btob4u) ∧ BoyBand(btob4u) ->","completion":" Show Your Love is a song recorded by the South Korean boy band BtoB 4u.\n"}
{"prompt":"ExtendedPlay(inside) ∧ LeadSingle(showyourlove) ∧ LeadSingleOf(showyourlove, inside) ->","completion":" The lead single of the extended play Inside is Show Your Love.\n"}
{"prompt":"Contains(showyourlove, hopefulmessage) ->","completion":" Show Your Love contains a hopeful message.\n"}
{"prompt":"Member(hyunsik, btob4u) ∧ Wrote(hyunsik, showyourlove) ->","completion":" BtoB 4u member Hyunsik wrote Show Your Love.\n"}
{"prompt":"HasMusicVideo(showyourlove) ->","completion":" There is a music video for Show Your Love.\n"}
{"prompt":"∀x (Table(x) → Round(x)) ->","completion":" All tables are round.\n"}
{"prompt":"∃x (Furniture(x) ∧ Table(x)) ->","completion":" Some furniture are tables.\n"}
{"prompt":"∀x (JuvenileDelinquent(x) → MaladjustedIndividual(x)) ->","completion":" All juvenile delinquents are maladjusted individuals.\n"}
{"prompt":"∃x (JuvenileDelinquent(x)  ∧ ProductOfBrokenHome(x)) ->","completion":" Some juvenile delinquents are products of broken homes.\n"}
{"prompt":"∀x (BrainReading(x) ∨ BrainDecoding(x))  ->","completion":" Either brain reading or brain decoding. \n"}
{"prompt":"∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x)) ->","completion":" All brain decoding is extracting information from BOLD signals.\n"}
{"prompt":"∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x)) ->","completion":" No extracting information from BOLD signals is without statistical pattern analysis. \n"}
{"prompt":"∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x))  ->","completion":" Writing a novel is without statistical pattern analysis.\n"}
{"prompt":"WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis) ->","completion":" If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.\n"}
{"prompt":"∀x (RoomFor(x, dessert) → RoomFor(x, broccoli)) ->","completion":" If you have room for dessert, you have room for broccoli.\n"}
{"prompt":"∀x (AtLuisParty(x) → RoomFor(x, dessert)) ->","completion":" Everyone at Luis's dinner party has room for dessert, including Luis.\n"}
{"prompt":"¬RoomFor(mauricia, broccoli) ->","completion":" Mauricia does not have room for broccoli.\n"}
{"prompt":"FirstDinnerParty(allison, luisparty) ∧ AtLuisParty(allison) ->","completion":" Luis's dinner party is the first ever dinner party that Allison has attended.\n"}
{"prompt":"RoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus) ->","completion":" Gustave has room for both broccoli and asparagus.\n"}
{"prompt":"Vegetable(broccoli) ∧ Vegetable(asparagus) ->","completion":" Broccoli and asparagus are both vegetables.\n"}
{"prompt":"American(imagineDragon) ∧ RockBand(imagineDragon) ->","completion":" Imagine Dragons is an American pop rock band.\n"}
{"prompt":"LeadSinger(imagineDragon, dan) ->","completion":" The lead singer of Imagine Dragons is Dan.\n"}
{"prompt":"SongWriter(dan) ->","completion":" Dan is also a songwriter.\n"}
{"prompt":"∀x ∀y (LeadSinger(x, y) → Singer(y)) ->","completion":" All lead singers are singers.\n"}
{"prompt":"∀x (Singer(x) → Musician(x)) ->","completion":" All singers are musicians.\n"}
{"prompt":"PopularSingle(imagineDragon, demons) ->","completion":" Demons is one of the most popular singles of Imagine Dragons.\n"}
{"prompt":"∃x (PopularSingle(imagineDragon, x) ∧ BillboardHot100(x)) ->","completion":" Some singles of Imagine Dragons have been on Billboard Hot 100.\n"}
{"prompt":"∀x (Bread(x) → Food(x)) ->","completion":" All bread is food.\n"}
{"prompt":"∃x (Sandwich(x) ∧ Bread(x)) ->","completion":" Some sandwiches are bread.\n"}
{"prompt":"∀x (Food(x) → Edible(x)) ->","completion":" All food is edible. \n"}
{"prompt":"∀x (Edible(x) → ¬Poisonous(x)) ->","completion":" No edible things are poisonous.\n"}
{"prompt":"Poisonous(deodorant) ->","completion":" Deodorant is poisonous.\n"}
{"prompt":"CommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating) ->","completion":" Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.\n"}
{"prompt":"∃x (Cover(x, water) ∧ Cover(x, electricity)) ->","completion":" Many apartment rents cover the cost of water and electricity.\n"}
{"prompt":"∀x (Cover(susan, x)) ->","completion":" Susan lives in an apartment where the rent covers all utilities.\n"}
{"prompt":"∀x (¬Cover(ava, x)) ->","completion":" The rent of the apartment where Ava lives does not cover any utility expenses.\n"}
{"prompt":"¬Cover(noah, heating) ->","completion":" Noah lives in an apartment where the rent does not cover heating.\n"}
{"prompt":"∀x (Clothes(x) → Product(x)) ->","completion":" All clothes are products. \n"}
{"prompt":"∀x (Product(x) → ¬Perfect(x)) ->","completion":" No products are perfect. \n"}
{"prompt":"∀x (Dress(x) → Clothes(x)) ->","completion":" All dresses are clothes.\n"}
{"prompt":"∀x (Skirt(x) → Dress(x)) ->","completion":" All skirts are dresses. \n"}
{"prompt":"Clothes(nike) → Perfect(nike) ∧ Dress(nike) ->","completion":" If Nike is clothes, then Nike is perfect and a dress.\n"}
{"prompt":"∀x (Pet(x) → Animal(x)) ->","completion":" All pets are animals.\n"}
{"prompt":"∀x (Pet(x) → Dog(x) ⊕ Cat(x)) ->","completion":" Pets can be either a dog or a cat.\n"}
{"prompt":"∀x ∀y (HasPet(x) → Cares(x, y)) ->","completion":" If a person has a pet, they care for that pet. \n"}
{"prompt":"∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x))) ->","completion":" Dogs and Cats can be naughty. \n"}
{"prompt":"∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y)) ->","completion":" Pets who are naughty are not liked as much. \n"}
{"prompt":"HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo) ->","completion":" Charlie has a naughty pet dog named Leo. \n"}
{"prompt":"∀x (Surprise(x) → (Fun(x) ⊕ Dreadful(x))) ->","completion":" Surprises are either fun or dreadful.\n"}
{"prompt":"∀x (Scare(x) → Surprise(x)) ->","completion":" All scares are surprises.\n"}
{"prompt":"∀x (Book(x) ∧ WrittenBy(x, cixinliu) → SoldMoreThan(x, onemillion)) ->","completion":" All books written by Cixin Liu have sold more than 1 million copies. \n"}
{"prompt":"∃x (Won(x, hugoaward) ∧ Book(x) ∧ WrittenBy(x, cixinliu)) ->","completion":" Some books that have won the Hugo Award were written by Cixin Liu.\n"}
{"prompt":"∀x (Book(x) ∧ AboutFuture(x) → InfluencedBy(x, isaacasimov)) ->","completion":" All books about the future are influenced by Isaac Asimov.\n"}
{"prompt":"Book(threebodyproblem) ∧ SoldMoreThan(threebodyproblem, onemillion) ->","completion":" The book the Three Body Problem has sold more than 1 million copies.\n"}
{"prompt":"AboutFuture(threebodyproblem) ->","completion":" The Three Body Problem is about the future.\n"}
{"prompt":"∃x (ComputerScience(x) ∧ GetUpEarly(x)) ->","completion":" Some students who major in computer science get up early. \n"}
{"prompt":"∀x (GetUpEarly(x) → StudyMorning(x)) ->","completion":" If a student gets up early, then he\/she will study in the morning. \n"}
{"prompt":"∀x (StudyMorning(x) → GoodAtTimeManagement(x)) ->","completion":" All students studying in the morning are good at time management. \n"}
{"prompt":"∀x (GoodAtTimeManagement(x) → Popular(x)) ->","completion":" All students good at time management are popular among students. \n"}
{"prompt":"¬Popular(james) ->","completion":" James is not popular among students. \n"}
{"prompt":"¬(∃x (Dog(x) ∧ OnRoof(x))) ->","completion":" There is no dog on the roof.\n"}
{"prompt":"∀x ∃y ((Dog(x) ∧ OnRoof(x)) → WentWrong(y)) ->","completion":" If there is a dog on the roof something went wrong.\n"}
{"prompt":"∀x (Elephantopus(x) → Genus(x, perennialplants) ∧ BelongTo(x, daisyfamily)) ->","completion":" Elephantopus is a genus of perennial plants in the daisy family.\n"}
{"prompt":"∀x (Elephantopus(x) → WidespreadOver(x, africa) ∧ WidespreadOver(x, southernasia) ∧ WidespreadOver(x, australia) ∧ WidespreadOver(x, americas)) ->","completion":" Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.\n"}
{"prompt":"∃x (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates)) ->","completion":" Several species of Elephantopus are native to the southeastern United States.\n"}
{"prompt":"∀x (ElephantopusScaber(x) → TraditionalMedicine(x)) ->","completion":" Elephantopus scaber is a traditional medicine.\n"}
{"prompt":"∀x (YaleDormitory(x) → InYorkStreet(x)) ->","completion":" All Yale dormitories are located on York Street. \n"}
{"prompt":"∀x (ManagedByYaleHousing(x) → YaleDormitory(x)) ->","completion":" All buildings managed by Yale Housing are dormitories. \n"}
{"prompt":"∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x)) ->","completion":" All buildings operated by Yale Housing staff are managed by Yale Housing. \n"}
{"prompt":"∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x)) ->","completion":" No buildings open to students are established after 1800. \n"}
{"prompt":"∀x (InYorkStreet(x) → OpenToStudents(x)) ->","completion":" All buildings located on York Street are open to students. \n"}
{"prompt":"OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness) ->","completion":" Harkness is either a building operated by Yale Housing staff or located on York Street. \n"}
{"prompt":"∀x (UrbanArea(x) → ¬MansionHouse(x)) ->","completion":" There are no mansion houses in an urban area.\n"}
{"prompt":"∀x (Skyscraper(x) → UrbanArea(x)) ->","completion":" All skyscrapers reside in urban areas.\n"}
{"prompt":"∀x (CreepyHauntedHouse(x) → MansionHouse(x)) ->","completion":" Every creepy haunted house is in a mansion house.\n"}
{"prompt":"∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x)) ->","completion":" Every terrifying Halloween scare comes from a creepy haunted house.\n"}
{"prompt":"CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream) ->","completion":" The Scream is a creepy haunted house or a terrifying Halloween scare.\n"}
{"prompt":"NationalPark(phuocBinh) ∧ Locatedin(phuocBinh, vietnam) ->","completion":" Phuoc Binh national park is a national park in Vietnam. \n"}
{"prompt":"∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → NatureReserve(x)) ->","completion":" Any national park in Vietnam is classified as a nature reserve. \n"}
{"prompt":"∃x (NationalPark(x) ∧ Locatedin(x, vietnam) ∧ UNESCOWorldHeritageSite(x)) ->","completion":" There is a national park in Vietnam classified as a UNESCO World Heritage Site.\n"}
{"prompt":"∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → Mangedby(x, ministryofAgriculture) ∨ Mangedby(x, peoplesCommittee)) ->","completion":" All national parks in Vietnam are either managed by the Ministry of Agriculture or by the People's Committee. \n"}
{"prompt":"¬Mangedby(phuocBinh, ministryofAgriculture) ->","completion":" Phuoc Binh is not managed by the Ministry of Agriculture.\n"}
{"prompt":"∀x ∃y (GreyhoundRacing(x) → CompetitiveSport(x) ∧ Greyhound(y) ∧ SpectatorsBetOn(x, y)) ->","completion":" Greyhound racing is a competitive sport where spectators bet on greyhounds.\n"}
{"prompt":"∀x (GreyhoundRacing(x) ↔ Coursing(x)) ->","completion":" Coursing is a part of Greyhound racing.\n"}
{"prompt":"∃x ∃y (CompetitiveSport(x) ∧ SpectaorsBetOn(x, y) ∧ Banned(x)) ->","completion":" Some competitive sports where spectators bet on things are banned.\n"}
{"prompt":"∀x ∃y ∃z (Coursing(x) → Hare(y) ∧ SpectatorsBetOn(x, y) ∧ GreyHound(z) ∧ Pursue(z, y)) ->","completion":" Coursing involves spectators betting on a hare being pursued by greyhounds.\n"}
{"prompt":"∀x (Hare(x) → SmallGame(x)) ->","completion":" Hares are small game.\n"}
{"prompt":"∀x ∃y (CompetitiveSport(x) ∧ SmallGame(y) ∧ SpectatorsBetOn(x, y) → Banned(x)) ->","completion":" If a competitive sport involves spectators betting on small game, then it is banned.\n"}
{"prompt":"∀x (SoccerPlayer(x) ∧ TwoYellow(x) → Eject(x)) ->","completion":" If a soccer player receives two yellow cards in one game, this player will be ejected from the rest of the game.\n"}
{"prompt":"∀x (SoccerPlayer(x) ∧ OneRed(x) → Eject(x))    ->","completion":" If a soccer player receives one red card in one game, this player will be ejected from the rest of the game.\n"}
{"prompt":"SoccerPlayer(henry) ->","completion":" Henry is a soccer player.\n"}
{"prompt":"¬TwoYellow(henry) ∧ OneRed(henry) ->","completion":" In one game, Henry first receives one yellow card, then he receives one red card.\n"}
{"prompt":"∀x (Tree(x) → Plant(x)) ->","completion":" All trees are plants. \n"}
{"prompt":"∃x (Living(x) ∧ Tree(x)) ->","completion":" Some living things are trees.\n"}
{"prompt":"∀x (Dagfinn(x) → GivenName(x)) ->","completion":" Dagfinn is a given name.\n"}
{"prompt":"Dagfinn(dagfinnAarskog) ∧ NotablePeople(dagfinnAarskog) ∧ Dagfinn(dagfinnBakke) ∧ NotablePeople(dagfinnBakke) ∧ Dagfinn(dagfinnDahl) ∧ NotablePeople(dagfinnDahl) ->","completion":" Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl. \n"}
{"prompt":"Norwegian(dagfinnAarskog) ∧ Physician(dagfinnAarskog) ->","completion":" Dagfinn Aarskog is a Norwegian physician.\n"}
{"prompt":"Norwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl) ->","completion":" Dagfinn Dahl is a Norwegian barrister.\n"}
{"prompt":"∀x ((Entertainment(x) ∧ Interesting(x)) → Popular(x)) ->","completion":" If entertainment is interesting, it will be popular.\n"}
{"prompt":"∀x (Popular(x) → WellKnown(x)) ->","completion":" All popular things are well-known.\n"}
{"prompt":"¬(∃x (LanguageModel(x) ∧ Giant(x) ∧ ¬GoodPerformance(x))) ->","completion":" It is not true that some giant language models do not have good performance. \n"}
{"prompt":"∀x ((LanguageModel(x) ∧ GoodPerformance(x)) → UsedBySomeResearchers(x)) ->","completion":" All language models with good performance are used by some researchers.\n"}
{"prompt":"∀x (UsedBySomeResearchers(x) → Popular(x)) ->","completion":" If a language model is used by some researchers, it is popular. \n"}
{"prompt":"(LanguageModel(bert) ∧ Giant(bert)) → (LanguageModel(gpt-3) ∧ Giant(gpt-3)). ->","completion":" If BERT is a giant language model, then GPT-3 is also a giant language model. \n"}
{"prompt":"LanguageModel(bert) ∧ Giant(bert)  ->","completion":" BERT is a giant language model. \n"}
{"prompt":"Scottish(johnstone) ->","completion":" St Johnstone is a Scottish team.\n"}
{"prompt":"PartOf(johnstone, scottishpremiership) ->","completion":" St Johnstone is part of the Scottish Premiership.\n"}
{"prompt":"∀x ∀y (PartOf(x, y) → Joined(x, y)) ->","completion":" If a team is part of the league, it has joined the league.\n"}
{"prompt":"Different(misnk, johnstone) ∧ Different(johnstone, minsk) ->","completion":" St Johnstone and Minsk are different teams.\n"}
{"prompt":"∀x ∀y (Different(x, y) → WonGame(x, y) ⊕ WonGame(y, x)) ->","completion":" For two different teams, either one team wins or the other team wins.\n"}
{"prompt":"WonGame(minsk, johnstone) ->","completion":" Minsk won against St Johnstone.\n"}
{"prompt":"∀x (Boeing737(x) → ¬Seats300(x)) ->","completion":" No Boeing-737 plane is equipped with more than 300 seats. \n"}
{"prompt":"∀x (Delta(x) → Boeing737(x)) ->","completion":" All planes in Delta are of type Boeing-737. \n"}
{"prompt":"∀x (Seats300(x) ∨ Passengers100(x)) ->","completion":" Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. \n"}
{"prompt":"∀x (Passengers100(x) → ShortDistance(x)) ->","completion":" All planes with a capacity of 100 passengers are scheduled for a short-distance flight. \n"}
{"prompt":"∀x (Passengers100(x) → ProducedBefore2010(x)) ->","completion":" All planes with a capacity of 100 passengers are produced before 2010. \n"}
{"prompt":"Boeing737(jake32) ⊕ Delta(jake32)  ->","completion":" Jake32 is either a Boeing-737 plane or a plane in Delta. \n"}
{"prompt":"Boeing737(t10) ⊕ Delta(t10) ->","completion":" T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. \n"}
{"prompt":"Own(sat, collegeBoard) ∧ ¬Own(sat, others) ->","completion":" The SAT test is wholly owned and developed by the College Board.\n"}
{"prompt":"Test(sat, readiness) ->","completion":" The SAT test is intended to assess student's readiness for college.\n"}
{"prompt":"∀x (Year(x) ∧ Before2016(x) → ¬AlignHighSchool(x))  ->","completion":" The SAT was originally designed not to be aligned with high school curricula. \n"}
{"prompt":"∃x (Year(x) ∧ Since2016(x) ∧ AlignHighSchool(x))  ->","completion":" Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. \n"}
{"prompt":"BornIn(rafaNadal, mallorca) ->","completion":" Rafa Nadal was born in Mallorca.\n"}
{"prompt":"ProfessionalTennisPlayer(rafaNadal) ->","completion":" Rafa Nadal is a professional tennis player.\n"}
{"prompt":"HighWinRatio(rafaNadal) ->","completion":" Nadal's win ratio is higher than 80%.\n"}
{"prompt":"∀x (ProfessionalTennisPlayer(x) ∧ HighWinRatio(x) → InBig3(x)) ->","completion":" All players in the Big 3 are professionals who have a high win ratio.\n"}
{"prompt":"∀x (Cookie(x) → ¬Healthy(x)) ->","completion":" No cookie is healthy.\n"}
{"prompt":"∀x (Oreo(x) → Cookie(x)) ->","completion":" All oreos are cookies.\n"}
{"prompt":"∀x (Animal(x) → ¬Plant(x)) ->","completion":" No animals are plants. \n"}
{"prompt":"∀x (Human(x) → Animal(x)) ->","completion":" All humans are animals.\n"}
{"prompt":"∀x (Pupil(x) → Human(x)) ->","completion":" All pupils are human.\n"}
{"prompt":"Human(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack) ->","completion":" If Jack is a human or a flower, then Jack is a human and a flower.\n"}
{"prompt":"∀x (Shoes(x) → ¬Food(x)) ->","completion":" No shoes are food. \n"}
{"prompt":"∀x (Slipper(x) → Shoes(x)) ->","completion":" All slippers are shoes.\n"}
{"prompt":"∀x (Food(x) ⊕ Clothes(x)) ->","completion":" A thing is either food or clothes.\n"}
{"prompt":"∀x (Wearable(x) → ¬AirTight(x)) ->","completion":" No wearable things are airtight.\n"}
{"prompt":"∀x (Clothes(x) → Wearable(x)) ->","completion":" All clothes are wearable. \n"}
{"prompt":"¬(AirTight(watch) ∧ Clothes(watch)) → (AirTight(watch) ∧ Clothes(watch)) ⊕ (¬AirTight(watch) ∧ ¬Clothes(watch)) ->","completion":" If a watch is not airtight and clothes, then a watch is either both airtight and clothes, or neither airtight nor clothes.\n"}
{"prompt":"∀x (DoesOlympicSport(x) ∧ GoesToOlympicGames(x) → IsOlympian(x)) ->","completion":" An Olympian is a person who trains for an Olympic sport and goes to the Olympics.\n"}
{"prompt":"DoesOlympicSport(carlosReyes) ->","completion":" Carlos Reyes trains for an Olympic sport.\n"}
{"prompt":"GoesToOlympicGames(carlosReyes) ->","completion":" Carlos Reyes went to the Olympics.\n"}
{"prompt":"IsWelterWeight(carlosReyes) ->","completion":" Carlos Reyes is a welterweight.\n"}
{"prompt":"∀x (IsWelterWeight(x) → ¬IsHeavyWeight(x)) ->","completion":" Heavy weights are not welterweights.\n"}
{"prompt":"∀x (Decor(x) → ¬MoveOut(x)) ->","completion":" If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.\n"}
{"prompt":"∀x (Ambitious(x) → MoveOut(x)) ->","completion":" If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.\n"}
{"prompt":"∀x (Fans(x) → Decor(x)) ->","completion":" If people are big fans of pop bands and singers, then they have a lot of decorations in their room.\n"}
{"prompt":"∀x (CollegeTeen(x) → Ambitious(x)) ->","completion":" All young teenage girls who attend college are big fans of pop bands and singers.\n"}
{"prompt":"Ambitious(sam) → Fans(sam) ->","completion":" If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.\n"}
{"prompt":"∀x (Student(x) ∧ Shriek(x) → Punished(x)) ->","completion":" A student who loves shrieking will be punished.\n"}
{"prompt":"∀x (Swear(x) → Student(x)) ->","completion":" If a person swears, then he is a student.\n"}
{"prompt":"∀x (Teacher(x) → Talk(bob, x)) ->","completion":" If someone is a teacher, then Bob will talk to him.\n"}
{"prompt":"∀x (Gentleman(x) → Suit(x)) ->","completion":" All gentlemen are in a suit.\n"}
{"prompt":"∀x (Teacher(x) → Man(x)) ->","completion":" All teachers are men.\n"}
{"prompt":"∃x (Teacher(x)) ->","completion":" There is a teacher.\n"}
{"prompt":"∀x (¬Gentleman(x) → ¬Nice(x)) ->","completion":" If someone is not a gentlemen, then he is not nice.\n"}
{"prompt":"Nice(willy) ->","completion":" Willy is nice.\n"}
{"prompt":"Shriek(bob) ∧ Swear(bob) ->","completion":" Bob loves shrieking and swearing.\n"}
{"prompt":"American(quincymcduffie) ∧ Professional(quincymcduffie) ∧ WideReciever(quincymcduffie) ∧ In(quincymcduffie, canadianfootball) ->","completion":" Quincy McDuffie is an American professional wide receiver in Canadian Football.\n"}
{"prompt":"∀x ∃y (CanCatch(x, y) ∧ Ball(y) → Good(x, widereciever)) ->","completion":" People who can catch balls are good wide receivers. \n"}
{"prompt":"∃x (Football(x) ∧ CanCatch(quincymcduffie, x)) ->","completion":" Quincy McDuffie can catch many footballs easily.\n"}
{"prompt":"∀x (Good(x, widereciever) → Professional(x)) ->","completion":" Good wide receivers play professionally.\n"}
{"prompt":"∀x (Good(x, widereciever) → CanCatchWith(x, lefthand) ∧ CanCatchWith(x, righthand)) ->","completion":" Good wide receivers can catch with both their left and right hand.\n"}
{"prompt":"∀x (Football(x) → Ball(x)) ->","completion":" All footballs are balls.\n"}
{"prompt":"RailwayStation(boves) ∧ Locate(boves, france) ->","completion":" Boves is a railway station located in France. \n"}
{"prompt":"Precede(boves, longueau) ->","completion":" The preceding station of Boves is Longueau.\n"}
{"prompt":"Precede(dommartin, boves) ->","completion":" The preceding station of Dommartin is Boves.\n"}
{"prompt":"Locate(france, europe) ->","completion":" France is a European country.\n"}
{"prompt":"Situate(dommartin, pairsLille) ->","completion":" Dommartin is situated on the Paris–Lille railway. \n"}
{"prompt":"∀x ∀y ∀z ((Situate(x, z) ∧ (Precede(x, y) ∨ Precede(y, x))) → Situate(y, z)) ->","completion":" Any two contiguous stations are on the same railway.\n"}
{"prompt":"Serve(hautsDeFrance, boves) ->","completion":" Boves is served by regional TER Hauts-de-France trains.\n"}
{"prompt":"∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z)) ->","completion":" If A is located in B and B is located in C, then A is located in C.\n"}
{"prompt":"∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z)) ->","completion":" If A precedes B and B preceds C, than A preceds C.\n"}
{"prompt":"From(edwinsmith, newzealand) ∧ Rower(edwinsmith) ∧ From(edwinsmith, auckland) ->","completion":" Edwin Smith was a New Zealand Rower from Auckland.\n"}
{"prompt":"KnownAs(edwinsmith, tedsmith) ->","completion":" Edwin Smith was also known as Ted Smith.\n"}
{"prompt":"WentTo(edwinsmith, roseroadprimaryschool) ∧ LocatedIn(roseroadprimaryschool, greylynn) ->","completion":" Edwin Smith went to Rose Road Primary School, located in Grey Lynn.\n"}
{"prompt":"Sergeant(edwinsmith) ∧ ServedWith(edwinsmith, newzealand24thbattalion) ∧ ServedIn(edwinsmith, italy) ∧ ServedIn(edwinsmith, egypt) ->","completion":" Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.\n"}
{"prompt":"Buisness(broadwaysheetmetals) ∧ Ran(edwinsmith, broadwaysheetmetals) ∧ Owned(edwinsmith, broadwaysheetmetals) ∧ SheetmetalWorker(edwinsmith) ->","completion":" Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker.\n"}
{"prompt":"∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x)) ->","completion":" A werewolf is a human that can turn into a wolf.\n"}
{"prompt":"∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y)) ->","completion":" A werewolf has been scratched or bitten by another werewolf.\n"}
{"prompt":"∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y) ->","completion":" If someone has been scratched or bitten, they have been attacked.\n"}
{"prompt":"Event(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight) ->","completion":" UFC Fight Night was a mixed martial arts event and was held in Sweden.\n"}
{"prompt":"Event(uFCFightNight) → ScheduledToFight(sadollah, musoke) ->","completion":" At UFC Fight Night, Sadollah was scheduled to fight Musoke.\n"}
{"prompt":"Event(uFCFightNight) → Fight(sadollah, akiyama) ->","completion":" Sadollah fought Akiyama at UFC Fight Night.\n"}
{"prompt":"Event(uFCFightNight) → Fight(musoke, yakovlev) ->","completion":" Musoke fought Yakovlev at UFC Fight Night.\n"}
{"prompt":"Event(uFCFightNight) → Injured(jung) ->","completion":" Jung was injured at UFC Fight Night.\n"}
{"prompt":"∀x (Injured(x) → ¬FightInUFC(x)) ->","completion":" Injured people did not fight at UFC Fight Night.\n"}
{"prompt":"∀x (Drink(x) → Edible(x)) ->","completion":" All drinks are edible. \n"}
{"prompt":"∀x (Juice(x) → Drink(x)) ->","completion":" All juices are drinks. \n"}
{"prompt":"∀x (OrangeJuice(x) → Juice(x)) ->","completion":" All orange juice is a juice. \n"}
{"prompt":"∀x (OrangeJuice(x) ∨ AppleJuice(x)) ->","completion":" A juice is either an orange juice or an apple juice.\n"}
{"prompt":"∀x (AppleJuice(x) → Sweet(x)) ->","completion":" All apple juice is sweet.\n"}
{"prompt":"AppleJuice(coke) → Drink(coke) ->","completion":" If coke is apple juice, then coke is a drink.\n"}
{"prompt":"¬AppleJuice(coke) → ¬Edible(coke) ->","completion":" If coke is not apple juice, then coke is not edible.\n"}
{"prompt":"TalentedPoet(lorca) ∧ SupportPopulists(lorca) ->","completion":" Federico Garcia Lorca was a talented Spanish poet and he supported the Popular Front.\n"}
{"prompt":"∀x (SupportPopulists(x) → Opposed(nationalists, x)) ->","completion":" The Spanish Nationalists opposed anyone who supported the Popular Front\n"}
{"prompt":"∀x (TalentedPoet(x) → Popular(x)) ->","completion":" Talented poets are popular.\n"}
{"prompt":"∀x (Opposed(nationalists, x) ∧ Popular(x) → Killed(nationalists, x)) ->","completion":" Spanish Nationalists killed anyone who they opposed and were popular.\n"}
{"prompt":"SupportPopulists(daniel) ∧ ¬Popular(daniel) ->","completion":" Daniel supported the Popular Front but was not popular.\n"}
{"prompt":"∀x (Kombucha(x) ∨ CocaCola(x)) ->","completion":" People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.\n"}
{"prompt":"∀x (CocaCola(x) → BusyParents(x)) ->","completion":" If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.\n"}
{"prompt":"∀x (CocaCola(x) → Dentist(x)) ->","completion":" If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.\n"}
{"prompt":"∀x (BusyParents(x) → Erratic(x)) ->","completion":" If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.\n"}
{"prompt":"∀x (Erratic(x) → ¬Consistent(x)) ->","completion":" If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.\n"}
{"prompt":"(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny)) ->","completion":" Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  \n"}
{"prompt":"∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x)) ->","completion":" If a customer subscribes to AMC A List, then he\/she can watch 3 movies every week without any additional fees. \n"}
{"prompt":"∃x (CinemaEveryWeek(x)) ->","completion":" Some customers go to cinemas every week. \n"}
{"prompt":"∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas)) ->","completion":" Customers who prefer TV series will not watch TV series in cinemas.\n"}
{"prompt":"WatchTVIn(james, cinemas) ->","completion":" James watches TV series in cinemas. \n"}
{"prompt":"SubscribedTo(james, amcalist) ->","completion":" James subscribes to AMC A List.\n"}
{"prompt":"Prefer(peter, tvseries) ->","completion":" Peter prefers TV series.\n"}
{"prompt":"InGenus(bulbophyllumattenuatum, bulbophyllum) ->","completion":" Bulbophyllum attenuatum is in the genus bulbophyllum.\n"}
{"prompt":"∀x (InGenus(x, bulbophyllum) → Orchid(x)) ->","completion":" All bulbophyllum are orchids.\n"}
{"prompt":"FederalDistrictOfRussia(central) ∨ FederalDistrictOfRussia(northwestern) ∨ FederalDistrictOfRussia(southern) ∨ FederalDistrictOfRussia(northcaucasian) ∨ FederalDistrictOfRussia(volga) ∨ FederalDistrictOfRussia(ural) ∨ FederalDistrictOfRussia(siberian) ∨ FederalDistrictOfRussia(fareastern) ->","completion":" There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian and Far Eastern.\n"}
{"prompt":"FederalDistrictOfRussia(central) ∧ LargestPopulationIn(central)  ->","completion":" The Central federal district has the largest population among all federal districts in Russia.\n"}
{"prompt":"AdministrativeCenterOf(moscow, central) ->","completion":" Moscow is the administrative center of the Central federal district.\n"}
{"prompt":"AdministrativeCenterOf(yekaterinburg, ural) ->","completion":" Yekaterinburg is the administrative center of the Ural federal district.\n"}
{"prompt":"AdministrativeCenterOf(vladivostok, fareastern) ->","completion":" Vladivostok is the administrative center of the Far Eastern federal district.\n"}
{"prompt":"FederalDistrictOfRussia(fareastern) ∧ LargestAreaIn(fareastern) ->","completion":" The Far Eastern federal district has the largest area among all federal districts in Russia.\n"}
{"prompt":"∃x (FederalDistrictOfRussia(x) → EstablishedIn(x, 2000)) ->","completion":" Some federal districts of Russia were established in 2000.\n"}
{"prompt":"∀x (Cancer(x) → MalignantTumor(x)) ->","completion":" All cancers are malignant tumors.\n"}
{"prompt":"∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x)) ->","completion":" No malignant tumor can be treated at home.\n"}
{"prompt":"∀x (ColorectalCancer(x) → Cancer(x)) ->","completion":" All colorectal cancer is cancer.\n"}
{"prompt":"∀x (HavingACold(x) → CanBeTreatedAtHome(x)) ->","completion":" Having a cold can be treated at home.\n"}
{"prompt":"¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer)) ->","completion":" Breast cancer is neither having a cold nor a malignant tumor (exclusive).\n"}
{"prompt":"∀x (OutsideControl(x) → ¬ShouldWorry(x)) ->","completion":" I should not worry about things outside of my control.\n"}
{"prompt":"∀x (Traffic(x) → OutsideControl(x)) ->","completion":" Traffic is outside of my control.\n"}
{"prompt":"∀x (UseAsSurname(x, roversi) → UseItalianSurname(x)) ->","completion":" Roversi is an Italian surname.\n"}
{"prompt":"UseAsSurname(alba, roversi) ->","completion":" Alba Roversi uses Roversi as a surname.\n"}
{"prompt":"UseAsSurname(paolo, roversi) ->","completion":" Paolo Roversi uses Roversi as a surname.\n"}
{"prompt":"UseAsSurname(roberto, roversi) ->","completion":" Roberto Roversi uses Roversi as a surname.\n"}
{"prompt":"Photographer(paolo) ->","completion":" Paolo Roversi is a photographer.\n"}
{"prompt":"∀x (Photographer(x) → Professional(x) ∨ Amateur(x)) ->","completion":" A photographer is a professional or an amateur.\n"}
{"prompt":"British-IraqiArchitect(zahaHadid) ->","completion":" Zaha Hadid is a British-Iraqi architect, artist and designer.\n"}
{"prompt":"BornIn(zahaHadid, y1950) ->","completion":" Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.\n"}
{"prompt":"Visitingprofessor(zahaHadid, yaleSchoolofArchitecture) ->","completion":" Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.\n"}
{"prompt":"AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture) ->","completion":" Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. \n"}
{"prompt":"∀x (InvasiveNeuroimagingTechnique(x) ∨ NoninvasiveNeuroimagingTechnique(x))  ->","completion":" Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. \n"}
{"prompt":" ∀x (NoninvasiveNeuroimagingTechnique(x) → ProvidesSpatialResolutionOfBrains(x))  ->","completion":" All noninvasive neuroimaging techniques provide a spatial resolution of brains.\n"}
{"prompt":" ∀x (ProvidesSpatialResolutionOfBrains(x) → MeasurementOfBrainActivity(x))  ->","completion":" If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. \n"}
{"prompt":" ∀x (MeasurementOfBrainActivity(x) → UsedByNeuroscienceResearchers(x)) ->","completion":" All measurements of brain activity are used by neuroscience researchers.\n"}
{"prompt":" MeasurementOfBrainActivity(fMRI) ⊕ NoninvasiveNeuroimagingTechnique(fMRI) ->","completion":" FMRI is either a measurement of brain activity or a noninvasive neuroimaging technique.\n"}
{"prompt":"∀x ( Present(x) ∨ Tutorial(x)) ->","completion":" Either present their work at the conference or provide a tutorial session at the conference. \n"}
{"prompt":"∀x (Present(x) → InPerson(x)) ->","completion":" All who present their work at the conference will attend in person. \n"}
{"prompt":"∀x (Tutorial(x) → Invited(x)) ->","completion":" All those providing a tutorial session at the conference are invited to join the club. \n"}
{"prompt":"∀x (InPerson(x) → Souvenirs(x)) ->","completion":" All who attend the conference in person are provided with souvenirs. \n"}
{"prompt":"∀x (Invited(x) → Meals(x)) ->","completion":" All invited to join the club are provided with delicious meals. \n"}
{"prompt":"∀x (Meals(x) → HappyCommunicate(x)) ->","completion":" All provided with delicious meals are happy to communicate with each other during the dinner. \n"}
{"prompt":"∀x (Meals(x) → InvitedTakePhoto(x)) ->","completion":" All provided with delicious meals are invited to take a photo with the audience. \n"}
{"prompt":"¬(InPerson(james) ∧ Souvenirs(james)) ->","completion":" James does not attend the conference in person and is not provided with souvenirs.\n"}
{"prompt":"HeavyCruiser(usssalem) ∧ BuiltFor(usssalem, unitedstatesnavy) ->","completion":" The USS Salem is a heavy cruiser built for the United States navy.\n"}
{"prompt":"LastHeavyCruiserToEnterService(usssalem) ->","completion":" The last heavy cruiser to enter service was the USS Salem.\n"}
{"prompt":"MuseumShip(usssalem) ->","completion":" The USS Salem is a museum ship.\n"}
{"prompt":"∀x (MuseumShip(x) → OpenToPublic(x)) ->","completion":" Museum ships are open to the public.\n"}
{"prompt":"ServedIn(usssalem, atlantic) ∧ ServedIn(usssalem, mediterranean) ->","completion":" The USS Salem served in the Atlantic and Mediterranean.\n"}
{"prompt":"∀x (TSLeda(x) → Passenger(x) ∧ CargoVessel(x)) ->","completion":" TS Leda was a good passenger and cargo vessel.\n"}
{"prompt":"∀x (TSLeda(x) → Norweigian(x) ∧ Stabilizers(x)) ->","completion":" TS Leda was the first Norweigian vessel that was built with stabilizers.\n"}
{"prompt":"∀x (Stabilizers(x) → OnlyOnShips(x) ∧ SteamTurbine(x)) ->","completion":" Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.\n"}
{"prompt":"∀x (Passenger(x) ∧ CargoVessel(x) → Quiet(x) ∧ GoodSea(x)) ->","completion":" To be a good passenger and cargo vessel, ships must be quiet and good at sea.\n"}
{"prompt":"∃x (Quiet(x) ∧ GoodSea(x) ∧ SteamTurbine(x)) ->","completion":" Some ships that are quiet and good at sea have powerful steam turbine engines.\n"}
{"prompt":"Born(rosa, santiago) ->","completion":" Rosa was born in Santiago. \n"}
{"prompt":"Capital(santiago, chile) ∧ LargestCity(santiago, chile) ->","completion":" Santiago is the capital and largest city of Chile.\n"}
{"prompt":"Daughter(rosa, jose) ∧ BuildingContractor(jose) ∧ ¬Chilean(jose) ->","completion":" Rosa is the daughter of a Catalan building contractor, Jose.\n"}
{"prompt":"Wife(jose, carmen) ∧ Chilean(carmen) ->","completion":" Jose has a Chilean wife, Carmen.\n"}
{"prompt":"∀x ∃y (BuildingContractor(x) ∧ ConstructionSite(y) → Oversee(x, y)) ->","completion":" A building contractor is responsible for the day-to-day oversight of a construction site. \n"}
{"prompt":"IsRapper(tyga) ->","completion":" Tyga is a rapper.\n"}
{"prompt":"ReleasedAlbum(tyga, wellDone3) ->","completion":" Rappers release rap albums.\n"}
{"prompt":"∀x ∀y (IsRapper(x) ∧ ReleasedAlbum(x, y) → IsRapAlbum(y)) ->","completion":" Tyga released the Well Done 3 album.\n"}
{"prompt":"∀x (IsRapper(x) → ¬IsOperaSinger(x)) ->","completion":" Rappers are not opera singers.\n"}
{"prompt":"BornIn(deborahwallace, scotland) ∧ Actress(deborahwallace) ∧ Playwright(deborahwallace) ∧ Producer(deborahwallace) ->","completion":" Deborah Wallace is a Scottish born actress, playwright and producer.\n"}
{"prompt":"Play(psyche) ∧ BasedOn(psyche, lifeofjamesmirandabarry) ->","completion":" Psyche is a play based on the life of James Miranda Barry.\n"}
{"prompt":"Play(homesick) ∧ From(homesick, deborahwallace) ∧ Play(psyche) ∧ From(psyche, deborahwallace) ∧ Play(thevoid) ∧ From(thevoid, deborahwallace) ->","completion":" Homesick, Psyche and The Void are plays from Deborah Wallace.\n"}
{"prompt":"Co-Produced(deborahwallace, gasland) ->","completion":" Deborah Wallace co-produced Gasland.\n"}
{"prompt":"∀x (NeedsLargeTerritory(x) → TravelFar(x)) ->","completion":" If an animal needs a large territory, then it travels far.\n"}
{"prompt":"∀x (EatsALot(x) → NeedsLargeTerritory(x)) ->","completion":" Everything that eats a lot needs a large territory.\n"}
{"prompt":"∀x (BigAnimal(x) → EatsALot(x)) ->","completion":" If something is a big animal, then it will eat a lot.\n"}
{"prompt":"∀x (Bear(x) → BigAnimal(x)) ->","completion":" All bears are big animals.\n"}
{"prompt":"BigAnimal(larry) ->","completion":" Larry is a big animal.\n"}
{"prompt":"∀x (Criminal(x) → ¬Kind(x)) ->","completion":" No criminal is kind. \n"}
{"prompt":"∀x (BreakLaw(x) → Criminal(x)) ->","completion":" All person who breaks the law is a criminals.\n"}
{"prompt":"∀x (Kind(x) ⊕ Evil(x)) ->","completion":" People are either kind or evil.\n"}
{"prompt":"∀x (Evil(x) → Ugly(x)) ->","completion":" If someone is evil, then they are ugly.\n"}
{"prompt":"∀x (Evil(x) → ColdBlood(x)) ->","completion":" If someone is evil, then they are cold-blood.\n"}
{"prompt":"((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry) ->","completion":" If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil.\n"}
{"prompt":"IndiePop(phoenix) ->","completion":" Phoneix's music is classified under the indie pop genre.\n"}
{"prompt":"Band(phoenix) ∧ France(phoenix) ->","completion":" Phoenix is a band from France.\n"}
{"prompt":"∀x ∀y (Band(x) ∧ France(x) ∧ Make(x, y) → FrenchSong(y) ⊕ EnglishSong(y)) ->","completion":" French bands write songs in French or in English.\n"}
{"prompt":"∀x (IndiePop(x) → ¬PopRock(x) ∧ ¬SynthPop(x)) ->","completion":" Aside from indie pop, pop rock and synth-pop are two other genres of music.\n"}
{"prompt":"∀x (Make(phoenix, x) → ¬FrenchSong(x)) ->","completion":" Phoneix has no songs in French.\n"}
{"prompt":"∀x (TalentShows(x) → Engaged(x)) ->","completion":" If people perform in school talent shows often, then they attend and are very engaged with school events.\n"}
{"prompt":"∀x (TalentShows(x) ∨ Inactive(x)) ->","completion":" People either perform in school talent shows often or are inactive and disinterested members of their community.\n"}
{"prompt":"∀x (Chaperone(x) → ¬Students(x)) ->","completion":" If people chaperone high school dances, then they are not students who attend the school.\n"}
{"prompt":"∀x (Inactive(x) → Chaperone(x)) ->","completion":" All people who are inactive and disinterested members of their community chaperone high school dances.\n"}
{"prompt":"∀x (AcademicCareer(x) → Students(x)) ->","completion":" All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n"}
{"prompt":"(Engaged(bonnie) ∧ Students(bonnie)) ⊕ (¬Engaged(bonnie) ∧ ¬Students(bonnie)) ->","completion":" Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. \n"}
{"prompt":"Engaged(bonnie) ->","completion":" Bonnie performs in school talent shows often.\n"}
{"prompt":"AcademicCareer(bonnie) ⊕ Chaperone(bonnie) → AcademicCareer(bonnie) ⊕ Inactive(bonnie) ->","completion":" If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\n"}
{"prompt":"Chaperone(bonnie) ⊕ TalentShows(bonnie) → AcademicCareer(bonnie) ∧ Inactive(bonnie)) ->","completion":" If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.\n"}
{"prompt":"∀x (Meeting(x) → AppearInCompany(x)) ->","completion":" All employees who schedule a meeting with their customers will appear in the company today. \n"}
{"prompt":"∀x (LunchInCompany(x) → Meetings(x)) ->","completion":" Everyone who has lunch in the company schedules meetings with their customers. \n"}
{"prompt":"∀x (LunchInCompany(x) ∨ LunchAtHome(x)) ->","completion":" Employees will either have lunch in the company or have lunch at home.\n"}
{"prompt":"∀x (LunchAtHome(x) → WorkRemotelyFromHome(x)) ->","completion":" If an employee has lunch at home, then he\/she is working remotely from home.\n"}
{"prompt":"∀x (InOtherCountries(x) → WorkRemotelyFromHome(x)) ->","completion":" All employees who are in other countries work remotely from home. \n"}
{"prompt":"∀x (Manager(x) → ¬WorkRemotelyFromHome(x)) ->","completion":" No managers work remotely from home. \n"}
{"prompt":"Manager(james) ⊕ AppearInCompany(james) ->","completion":" James is either a manager and appears in the company today or neither a manager nor appears in the company today.\n"}
{"prompt":"LunchInCompany(james) ->","completion":" James has lunch in the company.\n"}
{"prompt":"¬LunchInCompany(james) ->","completion":" James does not have lunch in the company.\n"}
{"prompt":"(Manager(james) ⊕ InOtherCountries(james)) → (LunchAtHome(james) ⊕ WorkRemotelyFromHome(james)) ->","completion":" If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.\n"}
{"prompt":"∃x (OccurMonkeypoxVirus(x) ∧ GetMonkeypox(x)) ->","completion":" Monkeypox is an infectious disease caused by the monkeypox virus.\n"}
{"prompt":"∃x (Animal(x) ∧ OccurMonkeypoxVirus(x)) ->","completion":" Monkeypox virus can occur in certain animals, including humans.\n"}
{"prompt":"∀x (Human(x) → Mammal(x)) ->","completion":" Humans are mammals.\n"}
{"prompt":"∃x (GetMonkeypox(x) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x))) ->","completion":" Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\n"}
{"prompt":"∀x (Human(x) ∧ Flu(x) → Tired(x)) ->","completion":" People feel tired when they get a glu.\n"}
{"prompt":"∃x (Animal(x)) ->","completion":" There is an animal.\n"}
{"prompt":"∀x (Human(x) → ¬Flu(x)) ->","completion":" No one gets flu.\n"}
{"prompt":"∃x (GetMonkeypox(x) ∧ Coughing(x)) ->","completion":" Symptons of Monkeypox include coughing.\n"}
{"prompt":"∀x (WildTurkey(x) → (Eastern(x) ∨ Osceola(x) ∨ Goulds(x) ∨ Merriams(x) ∨ Riogrande(x) ∨ Ocellated(x))) ->","completion":" There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild\n"}
{"prompt":"¬(WildTurkey(tom) ∧ Eastern(tom)) ->","completion":" turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n"}
{"prompt":"¬(WildTurkey(tom) ∧ Osceola(tom)) ->","completion":" Tom is not an Eastern wild turkey.\n"}
{"prompt":"WildTurkey(tom) → ¬(Goulds(tom) ∨ Merriams(tom) ∨ Riogrande(tom)) ->","completion":" Tom is not an Osceola wild turkey.\n"}
{"prompt":"WildTurkey(tom) ->","completion":" Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\n"}
{"prompt":"Ocellated(tom) ->","completion":" Tom is an Ocellated wild turkey.\n"}
{"prompt":"Eastern(tom) ->","completion":" Tom is an Eastern wild turkey.\n"}
{"prompt":"WildTurkey(joey) ->","completion":" Joey is a wild turkey.\n"}
{"prompt":"∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Game(thelegendofzelda) ∧ Created(x, thelegendofzelda)) ->","completion":" A Japanese game company created the game the Legend of Zelda.\n"}
{"prompt":"∀x ∀y (Game(x) ∧ InTop10(x) ∧ Created(x, y) → Japanese(y)) ->","completion":" All games in the Top 10 list are made by Japanese game companies.\n"}
{"prompt":"∀x (Game(x) ∧ SellsMoreThan(x, onemillioncopies) → Top10(x)) ->","completion":" [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.\n"}
{"prompt":"SellsMoreThan(thelegendofzelda, onemillioncopies) ->","completion":" The Legend of Zelda sold more than one million copies.\n"}
{"prompt":"Top10(thelegendofzelda) ->","completion":" The Legend of Zelda is in the Top 10 list.\n"}
{"prompt":"∀x (Created(fifa22, x) → Japanese(x) ∧ VideoGameCompany(x)) ->","completion":" FIFA 22 is made by a Japanese video game company.\n"}
{"prompt":"¬Top10(thelegendofzelda) ->","completion":" The Legend of Zelda is not in the Top 10 list.\n"}
{"prompt":"∀x (Square(x) → FourSides(x)) ->","completion":" All squares have four sides.\n"}
{"prompt":"∀x (FourSides(x) → IsShape(x)) ->","completion":" All four-sided things are shapes. \n"}
{"prompt":"∀x (Square(x) → IsShape(x)) ->","completion":" All squares are shapes.\n"}
{"prompt":"∀x (Rabbit(x) → Cute(x)) ->","completion":" All rabbits are cute. \n"}
{"prompt":"∃x (Turtle(x)) ->","completion":" Some turtles exist. \n"}
{"prompt":"∀x (Rabbit(x) ∨ Squirrel(x)) ->","completion":" An animal is either a rabbit or a squirrel.\n"}
{"prompt":"∀x (Skittish(x) → ¬Still(x)) ->","completion":" If something is skittish, then it is not still.\n"}
{"prompt":"∀x (Squirrel(x) → Skittish(x)) ->","completion":" All squirrels are skittish.\n"}
{"prompt":"Still(rock) ->","completion":" Rock is still.\n"}
{"prompt":"Turtle(rock) ->","completion":" Rock is a turtle.\n"}
{"prompt":"¬Turtle(rock) ->","completion":" Rock is not a turtle.\n"}
{"prompt":"Turtle(rock) ∨ Cute(rock) ->","completion":" Rock is a turtle or cute.\n"}
{"prompt":"¬(Turtle(rock) ∧ Squirrel(rock)) → Cute(rock) ⊕ Skittish(rock) ->","completion":" If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\n"}
{"prompt":"Cute(rock) ∧ Still(rock) → Turtle(rock) ∧ Skittish(rock) ->","completion":" If Rock is cute and still, then Rock is a turtle and skittish.\n"}
{"prompt":"NetflixShow(strangerThings) ∧ Popular(strangerThings) ->","completion":" \"Stranger Things\" is a popular Netflix show.\n"}
{"prompt":"∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x)) ->","completion":" If a Netflix show is popular, Karen will binge-watch it.\n"}
{"prompt":"∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x)) ->","completion":" If and only if Karen binge-watches a Netflix show, she will download it.\n"}
{"prompt":"¬Download(karen, blackMirror) ->","completion":" Karen does not download \"Black Mirror\".\n"}
{"prompt":"NetflixShow(blackMirror) ->","completion":" \"Black Mirror\" is a Netflix show.\n"}
{"prompt":"∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → Share(x, lisa)) ->","completion":" If Karen binge-watches a Netflix show, she will share it to Lisa.\n"}
{"prompt":"Share(strangerThings, lisa) ->","completion":" Karen will share \"Stranger Things\" to Lisa.\n"}
{"prompt":"Popular(blackMirror) ->","completion":" \"Black Mirror\" is popular.\n"}
{"prompt":"Share(blackMirror, lisa) ->","completion":" Karen will share \"Black Mirror\" to Lisa.\n"}
{"prompt":"CapitalOf(beijing, prx) ->","completion":" Beijing is the capital of the People's Republic of China. \n"}
{"prompt":"MostPopulousNationalCapitalCity(beijing) ->","completion":" Beijing is the world's most populous national capital city.\n"}
{"prompt":"InNorthernChina(beijing) ->","completion":" Beijing is located in Northern China.\n"}
{"prompt":"Hosted(beijing, summer2008olympic) ∧ Hosted(beijing, summer2008paralympicgames) ->","completion":" Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\n"}
{"prompt":"Hosted(beijing, summerolympic) ∧ Hosted(beijing, winterolympic) ∧ Hosted(beijing, summerparalympicgames)  ∧ Hosted(beijing, winterparalympicgames) ->","completion":" Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\n"}
{"prompt":"∃x (BeijingUniversity(x) ∧ ConsistentlyRankAmongTheBest(x)) ->","completion":" Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\n"}
{"prompt":"Hosted(beijing, summer2008olympic) ∧ Hosted(beijing, winterolympic) ->","completion":" Beijing has hosted both the 2008 Summer Olympics and a winter olympics.\n"}
{"prompt":"InSouthernChina(beijing) ->","completion":" Beijing is located in southern China.\n"}
{"prompt":"SecondLargestChineseCity(beijing) ->","completion":" Beijing is the second largest Chinese city by urban population.\n"}
{"prompt":"∀x (Alien(x) → Extraterrestrial(x)) ->","completion":" All aliens are extraterrestrial.\n"}
{"prompt":"∀x (FromMars(x) → Alien(x)) ->","completion":" If someone is from Mars, then they are aliens.\n"}
{"prompt":"∀x (Extraterrestrial(x) → ¬Human(x)) ->","completion":" No extraterrestrial is human.\n"}
{"prompt":"∀x (FromEarth(x) → Human(x)) ->","completion":" Everyone from Earth is a human.\n"}
{"prompt":"¬FromEarth(marvin) ∧ ¬FromMars(marvin) ->","completion":" Marvin cannot be from Earth and from Mars.\n"}
{"prompt":"¬FromEarth(marvin) → Extraterrestrial(marvin) ->","completion":" If Marvin is not from Earth, then Marvin is an extraterrestrial.\n"}
{"prompt":"Alien(marvin) ->","completion":" Marvin is an alien.\n"}
{"prompt":"¬Human(marvin) ∧ ¬FromMars(marvin) ->","completion":" Marvin is neither a human nor from Mars.\n"}
{"prompt":"¬FromMars(marvin) → Human(marvin) ->","completion":" If Marvin is not from Mars, then Marvin is a human.\n"}
{"prompt":"∀x (GrandSlamChampion(x) ⊕ OscarNominatedActor(x)) ->","completion":" A person is either a Grand Slam champion or an Oscar-nominated actor.\n"}
{"prompt":"∀x (GrandSlamChampion(x) → ProfessionalTennisPlayer(x)) ->","completion":" All people who are Grand Slam champions are professional tennis players.\n"}
{"prompt":"∀x (OscarNominatedActor(x) → Celebrity(x)) ->","completion":" All Oscar-nominated actors are celebrities.\n"}
{"prompt":"∀x (ProfessionalTennisPlayer(x) → Athlete(x)) ->","completion":" All professional tennis players are athletes.\n"}
{"prompt":"∀x (Celebrity(x) → WellPaid(x)) ->","completion":" If a person is a celebrity then they are well paid.\n"}
{"prompt":"∀x (Athlete(x) → Famous(x)) ->","completion":" If a person is an athlete then they are famous.\n"}
{"prompt":"∀x (WellPaid(x) → LivesInTaxHaven(x)) ->","completion":" All well-paid people live in tax havens.\n"}
{"prompt":"Famous(djokovic) ∧ Athlete(djokovic) → LivesInTaxHaven(djokovic) ->","completion":" If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\n"}
{"prompt":"GrandSlamChampion(djokovic) ->","completion":" Djokovic is a Grand Slam champion.\n"}
{"prompt":"LivesInTaxHaven(djokovic) ->","completion":" Djokovic lives in a tax haven.\n"}
{"prompt":"¬LivesInTaxHaven(djokovic) ->","completion":" Djokovic does not live in a tax haven.\n"}
{"prompt":"ProfessionalWrestlingStable(diamondmine) ∧ FormedIn(diamondmine, wwe) ->","completion":" Diamond Mine is a professional wrestling stable, formed in WWE.\n"}
{"prompt":"Leads(roderickstrong, diamondmine) ->","completion":" Roderick Strong leads Diamond Mine.\n"}
{"prompt":"Includes(diamondmine, creedbrothers) ∧ Includes(diamondmine, ivynile) ->","completion":" Diamond Mine includes the Creed Brothers, and Ivy Nile.\n"}
{"prompt":"HasFeud(imperium, diamondmine) ->","completion":" Imperium has a feud with Diamond Mine.\n"}
{"prompt":"∃x (Leads(roderickstrong, x) ∧ ProfessionalWrestlingStable(x)) ->","completion":" Roderick strong leads a professional wrestling stable.\n"}
{"prompt":"Leads(roderickstrong, creedbrothers) ->","completion":" Roderick strong leads the Creed Brothers.\n"}
{"prompt":"∀x (ProfessionalWrestlingStable(x) ∧ Includes(x, ivynile) → ¬HasFeud(imperium, x)) ->","completion":" Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\n"}
{"prompt":"MusicPiece(symphony9) ->","completion":" Symphony No. 9 is a music piece.\n"}
{"prompt":"∀x ∀y ((MusicPiece(x) ∧ Writtenby(x, y)) → Composer(y)) ->","completion":" Composers write music pieces.\n"}
{"prompt":"Writtenby(symphony9, beethoven) ->","completion":" Beethoven wrote Symphony No. 9.\n"}
{"prompt":"Premiered(viennamusicsociety, symphony9) ->","completion":" Vienna Music Society premiered Symphony No. 9.\n"}
{"prompt":"Orchestra(viennamusicsociety) ->","completion":" Vienna Music Society is an orchestra.\n"}
{"prompt":"Lead(beethoven, viennamusicsociety) ->","completion":" Beethoven leads the Vienna Music Society.\n"}
{"prompt":"∀x ∀y ((Orchestra(x) ∧ Lead(y, x)) → Conductor(y)) ->","completion":" Orchestras are led by conductors.\n"}
{"prompt":"Composer(beethoven) ->","completion":" Beethoven is a composer.\n"}
{"prompt":"∃x ∃y (Orchestra(x) ∧ MusicPiece(y) ∧ Premiered(x, y)) ->","completion":" Some orchestras premiered music pieces.\n"}
{"prompt":"¬Conductor(beethoven) ->","completion":" Beethoven is not a conductor.\n"}
{"prompt":"∀x (ZahaHadidDesignStyle(x) → Timeless(x)) ->","completion":" All of Zaha Hadid's design styles are timeless.\n"}
{"prompt":"∀x (MassProductDesign(x) → ¬Timeless(x)) ->","completion":" No mass product design is timeless.\n"}
{"prompt":"∀x (ZahaHadidDesignStyle(x) ∨ KellyWearstlerDesignStyle(x))  ->","completion":" Either Zaha Hadid's design style or Kelly Wearstler's design style. \n"}
{"prompt":"∀x (KellyWearstlerDesignStyle(x) → Evocative(x)) ->","completion":" All of Kelly Wearstler's design styles are evocative.\n"}
{"prompt":"∀x (KellyWearstlerDesignStyle(x) → Dreamy(x)) ->","completion":" All of Kelly Wearstler's design styles are dreamy.\n"}
{"prompt":"Timeless(aDesignByMax) → MassProductDesign(aDesignByMax) ∧ Evocative(aDesignByMax) ->","completion":" If a design by Max is timeless, then a design by Max is a mass product design and evocative.\n"}
{"prompt":"MassProductDesign(aDesignByMax) ->","completion":" A design by Max is a mass product design.\n"}
{"prompt":"Evocative(aDesignByMax) ∧ Dreamy(aDesignByMax) ->","completion":" A design by Max is evocative and dreamy.\n"}
{"prompt":"Evocative(aDesignByMax) ⊕ Dreamy(aDesignByMax) ->","completion":" A design by Max is either evocative or dreamy.\n"}
{"prompt":"∀x (RankedHighlyByWomenTennisAssociation(x) → AmongMostActivePlayersInMajorTennis(x)) ->","completion":" If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. \n"}
{"prompt":"∀x (LostToIgaŚwiątek(x) → RankedHighlyByWomenTennisAssociation(x)) ->","completion":" Everyone who lost to Iga Świątek is ranked highly by the Women's Tennis Association.\n"}
{"prompt":"∀x (FemaleTennisPlayersAtRolandGarros2022(x) → LostToIgaŚwiątek(x))  ->","completion":" All female tennis players at Roland Garros 2022 lost to Iga Świątek.\n"}
{"prompt":"∀x (FemaleTennisPlayersAtRolandGarros2022(x) ∨ MaleTennisPlayersAtRolandGarros2022(x))  ->","completion":" Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. \n"}
{"prompt":"∀x (MaleTennisPlayersAtRolandGarros2022(x) → LostToRafaelNadal(x)) ->","completion":" All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n"}
{"prompt":"RankedHighlyByWomenTennisAssociation(cocoGauff) ∨ LostToRafaelNadal(cocoGauff) → ¬MaleTennisPlayersAtRolandGarros2022(cocoGauff) ->","completion":" If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n"}
{"prompt":"AmongMostActivePlayersInMajorTennis(cocoGauff) ->","completion":" Coco Gauff is among the most active players in major tennis.\n"}
{"prompt":"LostToRafaelNadal(cocoGauff) ->","completion":" Coco Gauff has lost to Rafael Nadal.\n"}
{"prompt":"¬LostToIgaŚwiątek(cocoGauff) ∨ ¬AmongMostActivePlayersInMajorTennis(cocoGauff) ->","completion":" Coco Gauff is not a player who lost to Iga Świątek or one of the most active players in major tennis.\n"}
{"prompt":"∃x (Pet(x) ∧ ¬Mammal(x)) ->","completion":" Some pets are not mammals.\n"}
{"prompt":"∀x (Pet(x) → ¬Cat(x)) ->","completion":" No pets are cats.\n"}
{"prompt":"Season(spring) ∨ Season(summer) ∨ Season(fall) ∨ Season(winter) ->","completion":" [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter.\n"}
{"prompt":"∀x (WantlongVacation(x) → Love(x, summer)) ->","completion":" All students who want to have a long vacation love summer the most.\n"}
{"prompt":"Love(emma, summer) ->","completion":" Emma's favorite season is summer.\n"}
{"prompt":"¬Love(mia, emma) ->","completion":" Mia's favorite season is not the same as Emma's. \n"}
{"prompt":"WantlongVacation(james) ->","completion":" James wants to have a long vacation.\n"}
{"prompt":"Love(james, summer) ->","completion":" James's favorite season is summer.\n"}
{"prompt":"Love(james, fall) ->","completion":" James's favorite season is fall.\n"}
{"prompt":"Love(mia, spring) ->","completion":" Mia's favorite season is spring.\n"}
{"prompt":"∀x (Digital(x) → ¬Analog(x)) ->","completion":" No digital media are analog.\n"}
{"prompt":"∀x (PrintedText(x) → Analog(x)) ->","completion":" Every printed text is analog.\n"}
{"prompt":"∀x (StreamingService(x) → Digital(x)) ->","completion":" All streaming services are digital.\n"}
{"prompt":"∀x (HardcoverBook(x) → PrintedText(x)) ->","completion":" If an object is a hardcover book then it is printed text.\n"}
{"prompt":"StreamingService(y1984) → HardcoverBook(y1984) ->","completion":" If 1984 is a streaming service, then 1984 is a hardcover book.\n"}
{"prompt":"PrintedText(y1984) ->","completion":" 1984 is printed text.\n"}
{"prompt":"StreamingService(y1984) ->","completion":" 1984 is a streaming service.\n"}
{"prompt":"¬StreamingService(y1984) ->","completion":" 1984 is not a streaming service.\n"}
{"prompt":"∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x)) ->","completion":" All Romance languages are Indo-European languages.\n"}
{"prompt":"∀x (RomanceLanguage(x) → MemberOf(x, romancefamily)) ->","completion":" The Romance languages are a language family.\n"}
{"prompt":"∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x))) ->","completion":" All languages within a language family are related to each other.\n"}
{"prompt":"RomanceLanguage(french) ∧ RomanceLanguage(spanish) ->","completion":" French and Spanish are both Romance languages.\n"}
{"prompt":"Related(german, spanish) ->","completion":" German is related to Spanish.\n"}
{"prompt":"∀x (¬Related(basque, x)) ->","completion":" Basque is not related to any other language.\n"}
{"prompt":"RomanceLanguage(basque) ->","completion":" Basque is a Romance language.\n"}
{"prompt":"RomanceLanguage(german) ->","completion":" German is a Romance language.\n"}
{"prompt":"IndoEuropeanLanguage(french) ->","completion":" French is an Indo-European language.\n"}
{"prompt":"IsStriker(robertLewandowski) ->","completion":" Robert Lewandowski is a striker.\n"}
{"prompt":"∀x (IsStriker(x) → IsSoccerPlayer(x)) ->","completion":" [BG] Strikers are soccer players.\n"}
{"prompt":"LeftTeam(robertLewandowski, bayernMunchen) ->","completion":" Robert Lewandowski left Bayern Munchen.\n"}
{"prompt":"∀x ∀y (LeftTeam(x, y) → ¬PlaysForTeam(x, y)) ->","completion":" [BG] If a player left a team they no longer play for that team.\n"}
{"prompt":"IsSoccerPlayer(robertLewandowski) ->","completion":" Robert Lewandowski is a soccer player.\n"}
{"prompt":"PlaysForTeam(robertLewandowski, bayernMunchen) ->","completion":" Robert Lewandowski plays for Bayern Munchen.\n"}
{"prompt":"IsSoccerStar(robertLewandowski) ->","completion":" Robert Lewandowski is a star.\n"}
{"prompt":"CityIn(billings, montana) ->","completion":" Billings is a city in Montana.\n"}
{"prompt":"CityIn(butte, montana) ∧ CityIn(helena, montana) ∧ CityIn(missoula, montana) ->","completion":" Montana includes the cities of Butte, Helena, and Missoula.\n"}
{"prompt":"∃x (CityIn(whitesulphursprings, x) ∧ CityIn(butte, x)) ->","completion":" White Sulphur Springs and Butte are cities in the same state.\n"}
{"prompt":"¬CityIn(pierre, montana) ->","completion":" The city of Pierre is not in Montana.\n"}
{"prompt":"∀x (CityIn(butte, x) → ¬CityIn(pierre, x)) ->","completion":" Any city in Butte is not in Pierre.\n"}
{"prompt":"∃x (CityIn(butte, x) ∧ CityIn(pierre, x)) ->","completion":" Butte and Pierre are in the same state.\n"}
{"prompt":"∃x (CityIn(pierre, x) ∧ CityIn(bismarck, x)) ->","completion":" Pierre and Bismarck are in the same state.\n"}
{"prompt":"CityIn(missoula, montana) ->","completion":" Montana is home to the city of Missoula.\n"}
{"prompt":"∀x (InternationalStudent(x) → F1(x) ⊕ J1(x)) ->","completion":" International students in US have either an F1 visa or a J1 visa.\n"}
{"prompt":"∀x (InternationalStudent(x) ∧ F1(x) ∧ WantWorkInUS(x) → Apply(x, cpt) ∨ Apply(x, opt)) ->","completion":" An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\n"}
{"prompt":"InternationalStudent(mike) ->","completion":" Mike is an international student.\n"}
{"prompt":"WantWorkInUS(mike) → Apply(mike, cpt) ->","completion":" Mike needs to apply for CPT if he wants to work in the US.\n"}
{"prompt":"F1(mike) ->","completion":" Mike has an F1 visa.\n"}
{"prompt":"J1(mike) ->","completion":" Mike has a J1 visa.\n"}
{"prompt":"∀x (Cow(x) → Bovine(x)) ->","completion":" All cows are bovines.\n"}
{"prompt":"∃x (Pet(x) ∧ Cow(x)) ->","completion":" Some pets are cows.\n"}
{"prompt":"∀x (Bovine(x) → Domesticated(x)) ->","completion":" If something is a bovine, then it is domesticated.\n"}
{"prompt":"∀x (Domesticated(x) → ¬Aligator(x)) ->","completion":" No domesticated animals are alligators.\n"}
{"prompt":"Aligator(ted) ->","completion":" Ted is an aligator.\n"}
{"prompt":"Pet(ted) ->","completion":" Ted is a pet.\n"}
{"prompt":"Pet(ted) ∧ Cow(ted) ->","completion":" Ted is a pet and a cow.\n"}
{"prompt":"Cow(ted) → ¬Pet(ted) ->","completion":" If Ted is a cow, then Ted is not a pet.\n"}
{"prompt":"PrivateIvyLeagueResearchUniversity(yale) ->","completion":" Yale University is a private Ivy League research university.\n"}
{"prompt":"MovedTo(yale, newhaven) ∧ MovedIn(yale, y1716) ->","completion":" Yale University moved to New Haven in 1716.\n"}
{"prompt":"ValuedAt(yalesendowment, y42.3billion) ->","completion":" Yale university's endowment was valued at $42.3 billion.\n"}
{"prompt":"∃x (OrganizedInto(yale, x) ∧ ConstituentCollegesandSchools(x) ∧ ((ResidentialCollege(x) ⊕ GraduateSchool(x)) ⊕ ProfessionalSchool(x))) ->","completion":" Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\n"}
{"prompt":"ResidentialCollege(benjaminfranklincollege) ∧ AtYale(benjaminfranklincollege) ∧ ResidentialCollege(berkeleycollege) ∧ AtYale(berkeleycollege) ∧ ResidentialCollege(branfordcollege) ∧ AtYale(branfordcollege) ∧ ResidentialCollege(davenportcollege) ∧ AtYale(davenportcollege) ∧ ResidentialCollege(ezrastilescollege) ∧ AtYale(ezrastilescollege) ∧ ResidentialCollege(gracehoppercollege) ∧ AtYale(gracehoppercollege) ∧ ResidentialCollege(jonathanedwardscollege) ∧ AtYale(jonathanedwardscollege) ∧ ResidentialCollege(morsecollege) ∧ AtYale(morsecollege) ∧ ResidentialCollege(paulimurraycollege) ∧ AtYale(paulimurraycollege) ∧ ResidentialCollege(piersoncollege) ∧ AtYale(piersoncollege) ∧ ResidentialCollege(saybrookcollege) ∧ AtYale(saybrookcollege) ∧ ResidentialCollege(sillimancollege) ∧ AtYale(sillimancollege) ∧ ResidentialCollege(timothydwightcollege) ∧ AtYale(timothydwightcollege) ∧ ResidentialCollege(trumbullcollege) ∧ AtYale(trumbullcollege) ->","completion":" A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\n"}
{"prompt":"∃x (PrivateIvyLeagueResearchUniversity(x) ∧ MovedTo(x, newhaven)) ->","completion":" A private Ivy League research university moved to New Haven.\n"}
{"prompt":"LargestUniversityEndowmentOf(yale, anyeducationalinstitution) ->","completion":" Yale University has the largest university endowment of any educational institution.\n"}
{"prompt":"ResidentialCollege(piersoncollege) ∧ AtYale(piersoncollege) ->","completion":" Pierson College is a residential college at Yale.\n"}
{"prompt":"∃x (MemberOf(x, pappys) ∧ BritishSitcom(badults) ∧ Series(badults) ∧ Starring(badults, x)) ->","completion":" Badults is a British Sitcom series, starring members of Pappy's.\n"}
{"prompt":"PilotedIn(badults, july2013) ∧ PilotedOn(badults, bbcthree) ->","completion":" Badults piloted in July 2013 on BBC Three.\n"}
{"prompt":"WorkingTitle(thesecretdudesociety, badults) ->","completion":" The Working title \"The Secret Dude Society\" was used for Badults.\n"}
{"prompt":"ScriptEditor(andrewcollins) ∧ ScriptEditorFor(andrewcollins, badults) ->","completion":" Andrew Collins was the script editor for Badults\n"}
{"prompt":"∃x (ScriptEditorFor(andrewcollins, x) ∧ Series(x) ∧ WorkingTitle(thesecretdudesociety, x)) ->","completion":" Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n"}
{"prompt":"∀x ∀y (MemberOf(x, pappys) ∧ Starring(y, x) → ¬(PilotedOn(y, bbctwo) ∨ PilotedOn(y, bbcthree))) ->","completion":" No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.\n"}
{"prompt":"∀x (GrowthCompanies’Stocks(x) → PriceVolatile(x)) ->","completion":" All growth companies’ stocks are volatile.\n"}
{"prompt":" ∀x (PriceVolatile(x) → ¬SuitableForRetirementRund(x))  ->","completion":" If the stock price is volatile, then it is not suitable for a retirement fund.\n"}
{"prompt":" ∃x (Companies’Stocks(x) ∧ GrowthCompanies’Stocks(x)) ->","completion":" Some companies’ stocks are growth companies’ stocks.\n"}
{"prompt":" ∀x (MatureCompanies’Stocks(x) → SuitableForRetirementRund(x)) ->","completion":" All mature companies’ stocks are suitable for a retirement fund.\n"}
{"prompt":" MatureCompanies’Stocks(kO) ->","completion":" KO is a mature company’s stock.\n"}
{"prompt":"Companies’Stocks(kO) ->","completion":" KO is a company stock.\n"}
{"prompt":"Companies’Stocks(kO) ∧ GrowthCompanies’Stocks(kO) ->","completion":" KO is a company stock and a growth company’s stock.\n"}
{"prompt":"GrowthCompanies’Stocks(kO) ∨ PriceVolatile(kO) → ¬Companies’Stocks(kO) ∨ ¬PriceVolatile(kO) ->","completion":" If KO is a growth company’s stock or if its price is volatile, then KO is neither a company’s stock nor is its price volatile.\n"}
{"prompt":"∀x (Vehicleregistrationplate(x, istanbul) → Beginwith(x, number34)) ->","completion":" All vehicle registration plates in Istanbul begin with the number 34.\n"}
{"prompt":"∀x (¬Beginwith(x, number34) → ¬FromIstanbul(x)) ->","completion":" Plates that do not begin with the number 34 are not from Istanbul. \n"}
{"prompt":"Vehicleregistrationplate(joe, istanbul) ->","completion":" Joe's vehicle registration plate is from Istanbul. \n"}
{"prompt":"Beginwith(tom, number35) ->","completion":" Tom's license plate begins with the number 35. \n"}
{"prompt":"∀x (Beginwith(x, number35) → ¬Beginwith(x, number34)) ->","completion":" [BG] If a license plate begins with the number 35, then it does not begin with the number 34.\n"}
{"prompt":"Beginwith(joe, number34) ->","completion":" Joe's license plate begins with the number 34.\n"}
{"prompt":"Vehicleregistrationplate(tom, istanbul) ->","completion":" Tom's license plate is from Istanbul.\n"}
{"prompt":"∀x (StudentJobs(x) → Tuition(x)) ->","completion":" If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n"}
{"prompt":"∀x (Takeout(x) → StudentJobs(x)) ->","completion":" If people order takeout frequently in college, then they work in student jobs on campus.\n"}
{"prompt":"∀x (Takeout(x) ∨ DiningHall(x)) ->","completion":" People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n"}
{"prompt":"∀x (DiningHall(x) → NotPicky(x)) ->","completion":" If people enjoy the dining hall meals and recipes, then they are not picky eaters.\n"}
{"prompt":"∀x (DiningHall(x) → Eating(x)) ->","completion":" If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n"}
{"prompt":"StudentJobs(mary) ∧ Tuition(mary) → ¬(NotPicky(mary) ∨ Tuition(mary)) ->","completion":" If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\n"}
{"prompt":"Tuition(mary) ->","completion":" Mary needs to earn money to help pay for her college tuition.\n"}
{"prompt":"NotPicky(mary) ∧ Eating(mary) ->","completion":" Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\n"}
{"prompt":"NotPicky(mary) ⊕ Eating(mary) ->","completion":" Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\n"}
{"prompt":"∀x (Bakery(x) → ¬Spicy(x)) ->","completion":" No bakery is spicy.\n"}
{"prompt":"∀x (Cupcakes(x) → Bakery(x)) ->","completion":" All cupcakes are bakeries.\n"}
{"prompt":"∀x (Hotpot(x) → Spicy(x)) ->","completion":" All hotpots are spicy.\n"}
{"prompt":"∀x (ProductsOfBakedByMelissa(x) → Cupcakes(x)) ->","completion":" All products of Baked by Melissa are cupcakes.\n"}
{"prompt":"Spicy(driedThaiChilies) ∨ Bakery(driedThaiChilies) → Hotpot(driedThaiChilies) ∨ Spicy(driedThaiChilies) ->","completion":" If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\n"}
{"prompt":"ProductsOfBakedByMelissa(driedThaiChilies) ->","completion":" Dried Thai chilies are a product of Baked by Melissa.\n"}
{"prompt":"¬ProductsOfBakedByMelissa(driedThaiChilies) ->","completion":" Dried Thai chilies are not a product of Baked by Melissa.\n"}
{"prompt":"Hotpot(driedThaiChilies) ->","completion":" Dried Thai chilies are a hotpot.\n"}
{"prompt":"¬ProductsOfBakedByMelissa(driedThaiChilies) ∧ ¬Bakery(driedThaiChilies) ->","completion":" Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.\n"}
{"prompt":"Cupcake(driedThaiChilies) ∧ ProductsOfBakedByMelissa(driedThaiChilies) ->","completion":" Dried Thai chilies are cupcakes and a product of Baked by Melissa.\n"}
{"prompt":"∀x (YelpRecommendation(x) → ¬NegativeReview(x)) ->","completion":" If the restaurant is listed in Yelp’s recommendations, then the restaurant does not receive many negative reviews.\n"}
{"prompt":"∀x (RatingGreaterThan9(x) → YelpRecommendation(x)) ->","completion":" All restaurants with a rating greater than 9 are listed in Yelp’s recommendations.\n"}
{"prompt":"∃x (NoTakeOutService(x) ∧ NegativeReview(x)) ->","completion":" Some restaurants that do not provide take-out service receive many negative reviews.\n"}
{"prompt":"∀x (PopularAmongLocalResidents(x) → RatingGreaterThan9(x)) ->","completion":" All restaurants that are popular among local residents have ratings greater than 9.\n"}
{"prompt":"RatingGreaterThan9(subway) ⊕ PopularAmongLocalResidents(subway) ->","completion":" Subway has a rating greater than 9 or is popular among local residents.\n"}
{"prompt":"NoTakeOutService(subway) ->","completion":" If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.\n"}
{"prompt":"¬(NoTakeOutService(subway) ∧ NegativeReview(subway)) ->","completion":" Subway provides take-out service and does not receive many negative reviews.\n"}
{"prompt":"¬(NoTakeOutService(subway) ∧ NegativeReview(subway)) → PopularAmongLocalResidents(subway) ∧ NoTakeOutService(subway) ->","completion":" Subway does not provide take-out service.\n"}
{"prompt":"∀x ∀y (SuperheroMovie(x) ∧ GoodGuy(y) ∧ AppearsIn(y, x) → Wins(y)) ->","completion":" In superhero movies, the good guys always win.\n"}
{"prompt":"SuperheroMovie(surprisingAdventuresofSirDigbyChickenCaesar) ->","completion":" The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\n"}
{"prompt":"∀x ∀y (GoodGuy(x) ∧ Fights(x, y) ⟷ BadGuy(y) ∧ Fights(y, x)) ->","completion":" Good guys fight bad guys and vice versa.\n"}
{"prompt":"Fights(sirDigby, sirDigbyNemesis) ->","completion":" Sir Digby fights his nemesis.\n"}
{"prompt":"∀x ∀y (SuperheroMovie(x), NamedAfter(x, y) → GoodGuy(y)) ->","completion":" If a superhero movie is named after a character, that character is a good guy.\n"}
{"prompt":"NamedAfter(surprisingAdventuresofSirDigbyChickenCaesar, sirDigby) ->","completion":" The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\n"}
{"prompt":"∀x ∀y (Fights(x, y) ∧ Wins(x) → ¬Wins(y)) ->","completion":" If somebody wins a fight, the person they are fighting loses.\n"}
{"prompt":"∀x ∀y (SuperheroMovie(x) ∧ AppearsIn(y, x) → GoodGuy(y)) ->","completion":" Sir Digby’s nemesis loses.\n"}
{"prompt":"∀x (Book(x) → Knowledge(x)) ->","completion":" [BG] Books contain tons of knowledge.\n"}
{"prompt":"∀x ∀y (ReadBook(x, y) → GainKnowledge(x)) ->","completion":" [BG] When a person reads a book, that person gains knowledge. \n"}
{"prompt":"∀x (GainKnowledge(x) → Smarter(x)) ->","completion":" [BG] If a person gains knowledge, they become smarter.\n"}
{"prompt":"ReadBook(harry, walden) ∧ Book(walden) ->","completion":" Harry read the book “Walden” by Henry Thoreau.\n"}
{"prompt":"Knowledge(walden) ->","completion":" Walden contains knowledge.\n"}
{"prompt":"Smarter(harry) ->","completion":" Harry is smarter than before.\n"}
{"prompt":"∀x (Smarter(x) → GainKnowledge(x)) ->","completion":" A person who is smarter has gained knowledge.\n"}
{"prompt":"∀x (NLP(x) → NLG(x) ⊕ NLU(x)) ->","completion":" Natural language processing tasks can be categorized as either language generation task or language understanding task.\n"}
{"prompt":"∀x (NLP(x) ∧ OutputSequence(x) → NLG(x)) ->","completion":" If the output of a natural language processing task is a text sequence, then it is a language generation task.\n"}
{"prompt":"NLP(machineTranslation) ->","completion":" Machine translation is a natural language processing task.\n"}
{"prompt":"OutputSequence(machineTranslation) ->","completion":" The output of machine translation is a text sequence.\n"}
{"prompt":"NLG(machineTranslation) ->","completion":" Machine translation is a language generation task.\n"}
{"prompt":"NLU(machineTranslation) ->","completion":" Machine translation is a language understanding task.\n"}
{"prompt":"∃x (ManagedBuilding(x) ∧ AllowPet(x)) ->","completion":" Pets are allowed in some managed buildings.\n"}
{"prompt":"∀x (ManagedBuilding(x) → RequireDeposit(x)) ->","completion":" [BG] A deposit is required to rent an apartment in a managed building.\n"}
{"prompt":"∀x (Rent2000(x) ↔ ¬DepositNoMoreThan1500(x)) ->","completion":" The security deposit can be either equal to one month's rent or more.\n"}
{"prompt":"∀x (Rent2000(x) ↔ DepositNoLessThan2000(x)) ->","completion":" Fluffy is Tom's cat.\n"}
{"prompt":"Cat(fluffy) ->","completion":" Cats are pets.\n"}
{"prompt":"∀x (Cat(x) → Pet(x)) ->","completion":" The Olive Garden is a managed building.\n"}
{"prompt":"ManagedBuilding(oliveGarden) ->","completion":" The monthly rent at the Olive Garden is $2000.\n"}
{"prompt":"Rent2000(oliveGarden) ->","completion":" Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\n"}
{"prompt":"∀x (TomRent(x) ↔ (ManagedBuilding(x) ∧ AllowPet(x) ∧ DepositNoMoreThan1500(x))) ->","completion":" 2000$ is more than $1500.\n"}
{"prompt":"TomRent(oliveGarden) ->","completion":" Tom will rent an apartment in The Olive Garden.\n"}
{"prompt":"AllowPet(oliveGarden) ->","completion":" Tom is allowed to move in an apartment in The Olive Garden with Fluffy.\n"}
{"prompt":"DepositNoLessThan2000(oliveGarden) ->","completion":" The security deposit at the Olive Garden is either $2000 or more.\n"}
{"prompt":"∀x (AnimalsLovedByTourists(x) → MaxFavoriteAnimals(x)) ->","completion":" If animals are loved by tourists, then they are Max's favorite animals. \n"}
{"prompt":" ∀x (AnimalsFromAustralia(x) → AnimalsLovedByTourists(x)) ->","completion":" All animals from Australia are loved by tourists. \n"}
{"prompt":" ∀x (Quokka(x) → AnimalsFromAustralia(x)) ->","completion":" All quokka are animals from Australia. \n"}
{"prompt":" ∀x (MaxFavoriteAnimals(x) → VeryFluffy(x))  ->","completion":" All of Max's favorite animals are very fluffy.\n"}
{"prompt":" ∀x (MaxFavoriteAnimals(x) → LoveToSleep(x)) ->","completion":" All of Max's favorite animals love to sleep. \n"}
{"prompt":" VeryFluffy(koala) → ¬Quokka(koala) ->","completion":" If a koala is very fluffy, then the koala is not a quokka.\n"}
{"prompt":"LoveToSleep(koala) ->","completion":" Koalas love to sleep.\n"}
{"prompt":"LoveToSleep(koala) ∧ Quokka(koala) ->","completion":" Koalas love to sleep and are quokka.\n"}
{"prompt":"Quokka(koala) → LoveToSleep(koala) ⊕ VeryFluffy(koala) ->","completion":" If a koala is a quokka, then the koala either loves to sleep or is very fluffy.\n"}
{"prompt":"∀x (Kind(x) ⊕ Evil(x)) ->","completion":" A man is either kind or evil.\n"}
{"prompt":"∀x (Ugly(x) → ¬Handsome(x)) ->","completion":" No ugly person is handsome.\n"}
{"prompt":"∀x (Evil(x) → Ugly(x)) ->","completion":" All evil people are ugly.\n"}
{"prompt":"∀x (Gentleman(x) → Handsome(x)) ->","completion":" All gentlemen are handsome.\n"}
{"prompt":"∀x (CEO(x) → Gentleman(x)) ->","completion":" All CEOs are gentlemen.\n"}
{"prompt":"Gentleman(harry) ->","completion":" Harry is a gentleman.\n"}
{"prompt":"CEO(harry) ->","completion":" Harry is a CEO.\n"}
{"prompt":"Kind(harry) ∨ CEO(harry) ->","completion":" Harry is kind or a CEO.\n"}
{"prompt":"(Evil(harry) ∧ Ugly(harry)) ⊕ (¬Evil(harry) ∧ ¬Ugly(harry)) → ¬Kind(harry) ∧ ¬CEO(harry) ->","completion":" If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\n"}
{"prompt":"∀x (TwinTriplet(x) → Playing(x)) ->","completion":" If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n"}
{"prompt":"∀x (SameAge(x) → TwinTriplet(x)) ->","completion":" If people have siblings who are the same age, then they are twins or triplets.\n"}
{"prompt":"∀x (Complain(x) → SameAge(x)) ->","completion":" If people complain often about annoying siblings, then they have siblings who are the same age.\n"}
{"prompt":"∀x (NotHome(x) → ¬StrongBonds(x)) ->","completion":" If people do not live at home regularly, then they do not develop strong bonds with their family members.\n"}
{"prompt":"∀x (Playing(x) → NotHome(x)) ->","completion":" If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\n"}
{"prompt":"(TwinTriplet(luke) ∧ StrongBonds(luke)) ⊕ (¬TwinTriplet(luke) ∧ ¬StrongBonds(luke)) ->","completion":" Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   \n"}
{"prompt":"Playing(luke) ->","completion":" Luke spends a lot of time hanging out and playing with his siblings.\n"}
{"prompt":"Complain(luke) ->","completion":" Luke complains often about annoying siblings.\n"}
{"prompt":"¬(TwinTriplet(luke) ∨ Complain(luke)) ->","completion":" Luke is neither a twin nor triplet nor complains often about annoying siblings.\n"}
{"prompt":"Cost205(gre) ->","completion":" It costs US $205 to take the GRE test.\n"}
{"prompt":"∀x (Cost205(x) → CostBelow300(x)) ->","completion":" ETS provides financial aid to those GRE applicants who prove economic hardship.\n"}
{"prompt":"∀x (Hardship(x) → FinancialAid(x)) ->","completion":" Economic hardship refers to difficulty caused by having too little money or too few resources.\n"}
{"prompt":"∀x (SingleParent(x) ∨ FewResources(x) → Hardship(x)) ->","completion":" Tom lives in a single-parent family.\n"}
{"prompt":"SingleParent(tom) ->","completion":" His dad has been out of work for more than a year.\n"}
{"prompt":"FinancialAid(tom) ->","completion":" Tom can apply for financial aid from ETS to take the GRE test.\n"}
{"prompt":"CostBelow300(gre) ->","completion":" It cost below US $300 to take the GRE test.\n"}
{"prompt":"¬(∃x (FinancialAid(x))) ->","completion":" There is no financial aid available for the GRE test.\n"}
{"prompt":"∀x (Spill(x) → ¬Tidy(x)) ->","completion":" If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n"}
{"prompt":"∀x (Foodie(x) → Spill(x)) ->","completion":" All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n"}
{"prompt":"∀x (OnlyChild(x) → Tidy(x)) ->","completion":" If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n"}
{"prompt":"∀x (BusyParents(x) → OnlyChild(x)) ->","completion":" If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n"}
{"prompt":"∀x (HighIncome(x) → BusyParents(x)) ->","completion":" All households with a high net income have people who have parents who are very busy with their regular jobs.\n"}
{"prompt":"(Spill(peter) ∧ OnlyChild(peter)) ∨ ¬Spill(peter) ∧ ¬OnlyChild(peter)) ->","completion":" Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. \n"}
{"prompt":"Tidy(peter) ->","completion":" Peter tidies his space consistently and enjoys the process of cleaning.\n"}
{"prompt":"Foodie(peter) ∨ HighIncome(peter) ->","completion":" Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.\n"}
{"prompt":"(Foodie(peter) ∧ HighIncome(peter)) ∨ ¬Foodie(peter) ∧ ¬HighIncome(peter)) ->","completion":" Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.\n"}
{"prompt":"∀x (FirTree(x) → Evergreen(x)) ->","completion":" All fir trees are evergreens.\n"}
{"prompt":"∃x (ObjectOfWorship(x) ∧ FirTree(x)) ->","completion":" Some objects of worship are fir trees.\n"}
{"prompt":"∃x (Evergreen(x) ∧ ¬ObjectOfWorship(x)) ->","completion":" Some evergreens are not objects of worship.\n"}
{"prompt":"MountainRange(picurismountains) ∧ In(picurismountains, newmexico) ∨ In(picurismountains, texas) ->","completion":" The Picuris Mountains are a mountain range in New Mexico or Texas.\n"}
{"prompt":"Visited(juandeonate, picurismountains) ->","completion":" Juan de Onate visited the Picuris Mountains.\n"}
{"prompt":"In(hardingpegmatitemine, picurismountains) ∧ Mine(hardingpegmatitemine) ∧ Donated(hardingpegmatitemine) ->","completion":" The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n"}
{"prompt":"∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas)) ->","completion":" There are no mountain ranges in texas that have mines which have been donated.\n"}
{"prompt":"∃x (Visited(juandeonate, x) ∧ MountainRange(x) ∧ In(x, newmexico)) ->","completion":" Juan de Onate visited a mountain range in New Mexico.\n"}
{"prompt":"∃x (Visited(juandeonate, x) ∧ MountainRange(x) ∧ In(x, texas)) ->","completion":" Juan de Onate visited a mountain range in Texas.\n"}
{"prompt":"∀x (MountainRange(x) ∧ In(hardingpegmatitemine, x) → ¬In(x, newmexico)) ->","completion":" The Harding Pegmatite Mine is not located in a mountain range in New Mexico.\n"}
{"prompt":"∀x ∀y (IsMan(x) ∧ IsMan(y) ∧ Taller(x, y) → CanBlock(x, y)) ->","completion":" If a man is taller than another man, the taller one can block the other's shooting.\n"}
{"prompt":"∀x (IsMan(x) ∧ SameClass(x, michael) ∧ ¬Be(x, michael) → Taller(michael, x)) ->","completion":" Michael is a man who is taller than everyone else in his class.\n"}
{"prompt":"∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z)) ->","completion":" If person x is taller than person y, and person y is taller than person z, than x is taller than z\n"}
{"prompt":"IsMan(peter) ∧ Taller(peter, michael) ->","completion":" Peter is a man who is taller than Michael.\n"}
{"prompt":"∀x (¬JumpWhenShooting(x) → CanBlock(michael, x)) ->","completion":" Michael can block any shooting from a person as long as the person does not jump when shooting.\n"}
{"prompt":"¬CanBlock(michael, windy) ->","completion":" Michael cannot block Windy's shooting.\n"}
{"prompt":"∀x (JumpWhenShooting(x) → GreatShooter(x)) ->","completion":" Every shooter who can jump when shooting is a great shooter.\n"}
{"prompt":"∃x (IsMan(x) ∧ SameClass(x, michael) ∧ ¬Be(x, michael) ∧ ¬Taller(peter, x)) ->","completion":" Peter is shorter than a man in Michael's class.\n"}
{"prompt":"GreatShooter(windy) ->","completion":" Windy is a great shooter.\n"}
{"prompt":"CanBlock(peter, windy) ->","completion":" Peter can block Windy's shooting.\n"}
{"prompt":"Cove(barutin) ∧ NameAfter(barutin, settlement) ∧ Locate(settlement, bulgaria) ->","completion":" Barutin Cove is named after the Bulgarian settlement of Barutin.\n"}
{"prompt":"Locate(barutin, snow) ->","completion":" Barutin Cove is on the southwest coast of Snow Island.\n"}
{"prompt":"Locate(snow, shetland) ∧ Locate(greenwich, shetland) ∧ Locate(deception, shetland) ->","completion":" The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\n"}
{"prompt":"Locate(shetland, antarctica) ->","completion":" The South Shetland Islands are considered part of Antarctica.\n"}
{"prompt":"∀x (Locate(x, antarctica) → NameAfter(barutin, x)) ->","completion":" Barutin is named after all islands in Antarctica.\n"}
{"prompt":"∃x ∃y (Cove(x) ∧ NameAfter(x, y) ∧ Locate(y, bulgaria)) ->","completion":" There is at least one cove in Antarctica named after a place in Bulgaria.\n"}
{"prompt":"¬Locate(barutin, antarctica) ->","completion":" Barutin is not located in Antarctica.\n"}
{"prompt":"∃x (Affection(x) ∧ Love(x)) ->","completion":" Some affection is love.\n"}
{"prompt":"∃x (Love(x) ∧ Positive(x)) ->","completion":" Some love is positive.\n"}
{"prompt":"∃x (Affection(x) ∧ Positive(x)) ->","completion":" Some affection is positive.\n"}
{"prompt":"∀x (TransportMultiplePassengers(x) → ¬Empty(x)) ->","completion":" If something can transport multiple passengers, then they are not empty.\n"}
{"prompt":"∀x (Airline(x) → TransportMultiplePassengers(x)) ->","completion":" All airlines can transport multiple passengers.\n"}
{"prompt":"∀x (Plane(x) → Empty(x)) ->","completion":" All planes are empty.\n"}
{"prompt":"∀x (Boeing707(x) → Plane(x)) ->","completion":" All Boeing 707s are planes.\n"}
{"prompt":"¬Airline(greyhound) → ¬(Airline(greyhound) ∨ Plane(greyhound)) ->","completion":" If Greyhound is not an airline, then there are no Greyhound planes.\n"}
{"prompt":"Airline(greyhound) ->","completion":" Greyhound is an airline.\n"}
{"prompt":"Boeing707(greyhound) ->","completion":" A Greyhound is a Boeing 707.\n"}
{"prompt":"¬Boeing707(greyhound) ->","completion":" A Greyhound is not a Boeing 707.\n"}
{"prompt":"∀x  (Mammal (x)→  Animal (x)) ->","completion":" All mammals are animals.\n"}
{"prompt":"∀x  (Monkey (x)→  Mammal (x)) ->","completion":" All monkeys are mammals. \n"}
{"prompt":"∀x ( Monkey (x) ∨  Bird (x)) ->","completion":" An animal is either a monkey or a bird.\n"}
{"prompt":"∀x  (Bird (x)→  Fly (x)) ->","completion":" All birds fly.\n"}
{"prompt":"∀x  (Fly (x)→  HaveWings (x)) ->","completion":" If something can fly, then it has wings.\n"}
{"prompt":"¬ Fly (rock) ∧ ¬ Bird (rock) → ¬ Fly (rock) ∧ ¬ Breathe (rock)  ->","completion":" If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\n"}
{"prompt":"Monkey(rock) ->","completion":" Rock is a monkey.\n"}
{"prompt":"HaveWings(rock) ->","completion":" Rock has wings.\n"}
{"prompt":"¬ HaveWings(rock) ->","completion":" Rock does not have wings.\n"}
{"prompt":"∀x (Wedding(x) → Child(x)) ->","completion":" All people who have a wedding are people who have at least one child.\n"}
{"prompt":"∀x (Paris(x) → Wedding(x)) ->","completion":" All people who travel to Paris for their honeymoon are people who have a wedding.\n"}
{"prompt":"∀x (July(x) → Paris(x)) ->","completion":" All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n"}
{"prompt":"∃x (July(x) ∧ WellAttended(x)) ->","completion":" Some weddings in July are well-attended.\n"}
{"prompt":"Child(john) → ¬(Paris(john) ∧ Wedding(john)) ->","completion":" If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n"}
{"prompt":"WellAttended(john) → July(john) ⊕ Paris(john) ->","completion":" If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. \n"}
{"prompt":"WellAttended(john) ->","completion":" John has a wedding that is well-attended.\n"}
{"prompt":"¬WellAttended(john) ->","completion":" John does not have a wedding that is well-attended.\n"}
{"prompt":"Child(john) ->","completion":" John has at least one child.\n"}
{"prompt":"¬(WellAttended(john) ∨ July(john)) ->","completion":" John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.\n"}
{"prompt":"∃x (Mammal(x) ∧ Have(x, teeth)) ->","completion":" [BG] Some mammals have teeth.\n"}
{"prompt":"¬Have(platypus, teeth) ->","completion":" Platypus have no teeth.\n"}
{"prompt":"Mammal(platypus) ->","completion":" Platypus are mammals. \n"}
{"prompt":"Have(humans, teeth) ->","completion":" Humans have teeth.\n"}
{"prompt":"Mammal(platypus) ∧ ¬Have(platypus, teeth) ->","completion":" Platypus are mammals with no teeth.\n"}
{"prompt":"Reptile(platypus) ->","completion":" Platypus are reptiles.\n"}
{"prompt":"Mammal(humans) ->","completion":" Humans are mammals.\n"}
{"prompt":"∀x (Plunger(x) → Suck(x)) ->","completion":" Plungers suck.\n"}
{"prompt":"∀x (Vacuum(x) → Suck(x)) ->","completion":" Vacuums suck.\n"}
{"prompt":"∀x (Vampire(x) → Suck(x)) ->","completion":" Vampires suck.\n"}
{"prompt":"Vacuum(space) ->","completion":" Space is a vacuum.\n"}
{"prompt":"HouseHoldApp(duster) ∧ ¬ Suck(duster) ->","completion":" A duster is a household appliance that doesn't suck.\n"}
{"prompt":"Suck(space) ->","completion":" Space sucks.\n"}
{"prompt":"Vampire(space) ->","completion":" Space is a vampire.\n"}
{"prompt":"∀x (HouseHoldApp(x) → Suck(x)) ->","completion":" If something is a household appliance, it sucks.\n"}
{"prompt":"MLAlgorithm(supervisedLearning) ∨ MLAlgorithm(unsupervisedLearning) ∨ MLAlgorithm(reinforcementLearning) ->","completion":" Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\n"}
{"prompt":"¬RequireLabelledData(unsupervisedLearning) ->","completion":" Unsupervised learning doesn't require labelled data.\n"}
{"prompt":"TrainTextSumModel(supervisedLearning) ∨ TrainTextSumModel(unsupervisedLearning) ∨ TrainTextSumModel(reinforcementLearning) ->","completion":" The state-of-the-art text summarization model is trained with machine learning algorithms.\n"}
{"prompt":"¬TrainTextSumModel(reinforcementLearning) ->","completion":" Reinforcement learning is not used to train the state-of-the-art text summarization model.\n"}
{"prompt":"∀x ((MLAlgorithm(x) ∧ TrainTextSumModel(x)) → RequireLabelledData(x)) ->","completion":" The Machine Learning algorithm for training text summarization model requires labelled data.\n"}
{"prompt":"TrainTextSumModel(supervisedLearning) ->","completion":" Supervised learning is used to train the state-of-the-art text summarization model.\n"}
{"prompt":"TrainTextSumModel(unsupervisedLearning) ->","completion":" Unsupervised learning is used to train the state-of-the-art text summarization model.\n"}
{"prompt":"∀x (Funny(x) → Popular(x)) ->","completion":" If a cartoon character is funny, then it is popular.\n"}
{"prompt":"∀x (Ugly(x) → ¬Popular(x)) ->","completion":" If a cartoon character is ugly, then it is not popular.\n"}
{"prompt":"∀x (Love(children, x) → Funny(x)) ->","completion":" If a cartoon character is loved by children, then it is funny.\n"}
{"prompt":"∀x (Simpsons(x) → Love(children, x)) ->","completion":" If a cartoon character is from The Simpsons, then it is loved by children.\n"}
{"prompt":"∀x (Yellow(x) → Simpsons(x)) ->","completion":" If a cartoon character is yellow, then it is from The Simpsons.\n"}
{"prompt":"Simpsons(ben) ⊕ Funny(ben) ->","completion":" Ben is either from The Simpsons or funny.\n"}
{"prompt":"Love(children, ben) ->","completion":" Ben is loved by children.\n"}
{"prompt":"Ugly(ben) ∨ Yellow(ben) ->","completion":" Ben is ugly or yellow.\n"}
{"prompt":"(Yellow(ben) ∧ Ugly(ben)) ⊕ (¬Yellow(ben) ∧ ¬Ugly(ben)) ->","completion":" Ben is either yellow and ugly or neither yellow nor ugly.\n"}
{"prompt":"∀x ∀y (BreedingBack(x, y) → ArtificiallySelect(x)) ->","completion":" Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\n"}
{"prompt":"∃x ∃y (HeckCattle(x) ∧ Aurochs(y) ∧ BreedingBack(x, y)) ->","completion":" Heck cattle were bred-back in the 1920s to resemble the aurochs.\n"}
{"prompt":"∀x (HeckCattle(x) → Animal(x)) ->","completion":" [BG] Heck cattle are animals.\n"}
{"prompt":"∀x (Aurochs(x) → Animal(x)) ->","completion":" [BG] Aurochs are animals.\n"}
{"prompt":"∃x ∃y (Animal(x) ∧ Animal(y) ∧ BreedingBack(x, y) ∧ Extinct(y)) ->","completion":" Some animals to be bred-back resemble animals that are extinct.\n"}
{"prompt":"∃x (HeckCattle(x) ∧ ArtificiallySelect(x)) ->","completion":" Some Heck cattle are artificially selected.\n"}
{"prompt":"∀x (Aurochs(x) → Extinct(x)) ->","completion":" Aurochs are extinct.\n"}
{"prompt":"∀x (Student(x) → Human(x)) ->","completion":" All students are humans. \n"}
{"prompt":"∀x (Study(x) → Student(x)) ->","completion":" If someone studies, then they are a student.\n"}
{"prompt":"∀x (Study(x) ∨ Teach(x)) ->","completion":" A person either studys or teaches.\n"}
{"prompt":"∀x (Young(x) → ¬Teach(x)) ->","completion":" No young person teaches.\n"}
{"prompt":"¬Teach(jerry) ∧ ¬Manager(jerry) ->","completion":" Jerry neither teaches nor is a manager.\n"}
{"prompt":"Young(rose) ∨ Student(rose) ->","completion":" Rose is young or a student.\n"}
{"prompt":"Young(jerry) ->","completion":" Jerry is young.\n"}
{"prompt":"¬Young(jerry) ->","completion":" Jerry is not young.\n"}
{"prompt":"Human(rose) ∨ Manager(rose) ->","completion":" Rose is a human or a manager.\n"}
{"prompt":"Human(rose) ∨ Manager(jerry) ->","completion":" Rose is a human or Jerry is a manager.\n"}
{"prompt":"¬(Student(rose) ∧ Human(jerry)) ->","completion":" It is not true that Rose is a student and Jerry is a human.\n"}
{"prompt":"PublishingHouse(newvesselpress) ∧ SpecializesIn(newvessel, translatingforeignliteratureintoenglish) ->","completion":" New Vessel Press is a publishing house which specializes in translating foreign literature into English.\n"}
{"prompt":"∀x (Book(x) ∧ PublishedBy(x, newvesselpress) → In(x, english)) ->","completion":" All of New Vessel Press's published books are in English.\n"}
{"prompt":"Book(neapolitanchronicles) ∧ PublishedBy(neapolitanchronicles, newvesselpress) ->","completion":" Neapolitan Chronicles is a book published by New Vessel Press.\n"}
{"prompt":"TranslatedFrom(neapolitanchronicles, italian) ->","completion":" Neapolitan Chronicles was translated from Italian.\n"}
{"prompt":"Book(palaceofflies) ∧ PublishedBy(palaceofflies, newvesselpress) ->","completion":" Palace of Flies is a book published by New Vessel Press.\n"}
{"prompt":"Book(neapolitanchronicles) ∧ In(neapolitanchronicles, english) ->","completion":" Neapolitan Chronicles is an English book.\n"}
{"prompt":"PublishedBy(harrrypotter, newvesselpress) ->","completion":" Harry Potter was published by New Vessel Press.\n"}
{"prompt":"TranslatedFrom(palaceofflies, italian) ->","completion":" Palace of Flies was translated from Italian.\n"}
{"prompt":"∀x (Desktop(x) → WorkHome(x)) ->","completion":" If people own a large desktop monitor at their home, then they work regularly and often at home.\n"}
{"prompt":"∀x (HomeOffice(x) → Desktop(x)) ->","completion":" All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\n"}
{"prompt":"∀x (WorkHome(x) → Tidying(x)) ->","completion":" All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\n"}
{"prompt":"∀x (WorkHome(x) → OfficeStore(x)) ->","completion":" All people who work regularly and often at home visit the office supply store regularly.\n"}
{"prompt":"∀x (Tidying(x) → ¬Late(x)) ->","completion":" If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. \n"}
{"prompt":"(Late(remy) ∧ Tidying(remy)) ⊕ (¬Late(remy) ∧ ¬Tidying(remy)) ->","completion":" Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. \n"}
{"prompt":"OfficeStore(remy) ->","completion":" Remy visits the office supply store regularly.\n"}
{"prompt":"HomeOffice(remy) ∧ OfficeStore(remy) ->","completion":" Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\n"}
{"prompt":"Late(remy) ∨ OfficeStore(remy) → ¬(Tidying(remy) ∨ HomeOffice(remy)) ->","completion":" If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.\n"}
{"prompt":"∀x (Human(x) → Mortal(x)) ->","completion":" All humans are mortal.\n"}
{"prompt":"∀x (Greek(x) → Human(x)) ->","completion":" All Greeks are humans.\n"}
{"prompt":"∃x (Greek(x) ∧ Mortal(x)) ->","completion":" Some Greeks are mortal.\n"}
{"prompt":"∀x (WorkLibrary(x) → ¬ComputerScience(x)) ->","completion":" No students who work in the library are from the computer science department. \n"}
{"prompt":"∀x (PartTime(x) → WorkLibrary(x)) ->","completion":" All students who have part-time jobs offered by the university are students who work in the library. \n"}
{"prompt":"∀x (Database(x) → ComputerScience(x)) ->","completion":" All students who take the database course are from the computer science department. \n"}
{"prompt":"∀x (ProfessorDavid(x) → Database(x)) ->","completion":" All students instructed by professor David are taking the database course. \n"}
{"prompt":"∀x (WorkInLab(x) → ProfessorDavid(x)) ->","completion":" All students working in the lab are instructed by professor David. \n"}
{"prompt":"WorkInLab(james) ->","completion":" James is a student working in the lab. \n"}
{"prompt":"¬PartTime(jack) ∧ ¬WorkInLab(jack) ->","completion":" Jack neither has a part-time job offered by the university nor works in the lab. \n"}
{"prompt":"PartTime(james) ->","completion":" James has a part-time job offered by the university.\n"}
{"prompt":"¬PartTime(james) ->","completion":" James does not have a part-time job offered by the university.\n"}
{"prompt":"Database(james) ⊕ PartTime(james) ->","completion":" James either takes the database course or has a part-time job offered by the university.\n"}
{"prompt":"Database(jack) ->","completion":" Jack takes the database course.\n"}
{"prompt":"LikesMusic(george) → WantsToCompose(george) ->","completion":" If George likes music, he wants to compose.\n"}
{"prompt":"AccesstoProgram(george) → CanCompose(george) ->","completion":" If George has access to a program, he can compose.\n"}
{"prompt":"(WantsToCompose(george) ∧ CanCompose(george)) → WillCompose(george) ->","completion":" If George can compose and wants to compose, he will compose.\n"}
{"prompt":"(LikesMusic(george) ∧ AccesstoProgram(george)) → WillCompose(george) ->","completion":" If George likes music and has access to a program, he will compose.\n"}
{"prompt":"¬WantsToCompose(george) → ¬WillCompose(george) ->","completion":" If George will not compose, George can not compose.\n"}
{"prompt":"∀x (Hawk(x) → ¬Lands(x)) ->","completion":" A hawk never lands. \n"}
{"prompt":"∃x (Bird(x) ∧ Hawk(x)) ->","completion":" Some birds are hawks.\n"}
{"prompt":"∀x (Bird(x) → Lands(x)) ->","completion":" All birds land\n"}
{"prompt":"∃x (Mondayat8(x) ∧ RoseGivenOutOnTv(x)) ->","completion":" On some Mondays at 8 pm, roses are given out on TV.\n"}
{"prompt":"∀x (RoseGivenOutOnTv(x) → OnBachelor(x)) ->","completion":" Every rose given out on TV is on the Bachelor.\n"}
{"prompt":"∀x (OnBachelor(x) → PortrayLiveOfRealPeople(x)) ->","completion":" Everything on the Bachelor portrays the lives of real people.\n"}
{"prompt":"∀x (PortrayLiveOfRealPeople(x) → RealityTVShow(x)) ->","completion":" All shows portraying the lives of real people are reality TV shows.\n"}
{"prompt":"¬RealityTVShow(breakingbad) ->","completion":" Breaking Bad is not a reality TV show.\n"}
{"prompt":"Mondayat8(breakingbad) ->","completion":" Breaking Bad is on Monday at 8 pm.\n"}
{"prompt":"Mondayat8(breakingbad) ∧ RoseGivenOutOnTv(breakingbad) ->","completion":" Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\n"}
{"prompt":"RoseGivenOutOnTv(breakingbad) → Mondayat8(breakingbad) ->","completion":" If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\n"}
{"prompt":"From(heinrichScmidt, naziGermany) ∧ Politician(heinrichScmidt) ->","completion":" Heinrich Scmidt was a Nazi German politician. \n"}
{"prompt":"Member(heinrichScmidt, prussianStateParliament) ∧ Member(heinrichScmidt, naziReichstag) ->","completion":" Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n"}
{"prompt":"From(heinrichScmidt, naziGermany) ∨ From(heinrichScmidt, russia) ->","completion":" Heinrich Schmidt was either German or Russian.\n"}
{"prompt":"∃x (From(x, naziGermany) ∧ Politician(x) ∧ Member(x, prussianStateParliament) ∧ Member(x, naziReichstag)) ->","completion":" Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\n"}
{"prompt":"∀x (Politician(x) → ¬Member(x, naziReichstag)) ->","completion":" No politicans are part of the Nazi Reichstag.\n"}
{"prompt":"∀x (DeadlyDiseases(x) → SurvivalRateIsLow(x)) ->","completion":" If something is a deadly disease, then its survival rate is low. \n"}
{"prompt":"∀x (SevereCancer(x) → DeadlyDiseases(x)) ->","completion":" All severe cancers are deadly diseases.\n"}
{"prompt":"∀x (BileDuctCancer(x) → SevereCancer(x)) ->","completion":" Bile duct cancer is a severe cancer. \n"}
{"prompt":"∀x (Cholangiocarcinoma(x) → BileDuctCancer(x)) ->","completion":" All Cholangiocarcinoma is bile duct cancer.\n"}
{"prompt":"∀x (MildFlu(x) → ¬SurvivalRateIsLow(x))  ->","completion":" No one with mild flu has a low survival rate.\n"}
{"prompt":"BileDuctCancer(colorectalCancer) ∨ SurvivalRateIsLow(colorectalCancer) → ¬BileDuctCancer(colorectalCancer) ->","completion":" If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\n"}
{"prompt":"SevereCancer(colorectalCancer) ->","completion":" Colorectal cancer is a severe cancer\n"}
{"prompt":"BileDuctCancer(colorectalCancer) ∨ Cholangiocarcinoma(colorectalCancer) → BileDuctCancer(colorectalCancer) ∧ MildFlu(colorectalCancer) ->","completion":" If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.\n"}
{"prompt":"¬MildFlu(colorectalCancer) ∨ ¬Cholangiocarcinoma(colorectalCancer) → BileDuctCancer(colorectalCancer) ∨ Cholangiocarcinoma(colorectalCancer) ->","completion":" If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.\n"}
{"prompt":"∀x (Salad(x) → HealthyHabits(x)) ->","completion":" All people who eat salads regularly are very conscious about their health and eating habits.\n"}
{"prompt":"∀x (HealthyChildhood(x) → Salad(x)) ->","completion":" All people who grew up in health-conscious childhood homes eat salads regularly.\n"}
{"prompt":"∀x (Nutritional(x) → HealthyChildhood(x)) ->","completion":" All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n"}
{"prompt":"∀x (GoodRelationship(x) → ¬HealthyHabits(x)) ->","completion":" If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n"}
{"prompt":"∀x (Gym(x) → Nutritional(x)) ->","completion":" If people have good relationships with their parents, then they do not eat salads regularly.\n"}
{"prompt":"(HealthyChildhood(taylor) ∧ GoodRelationship(taylor)) ∨ ¬HealthyChildhood(taylor) ∧ ¬GoodRelationship(marcy) ->","completion":" If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n"}
{"prompt":"Salad(taylor) ->","completion":" Taylor eats salads regularly.\n"}
{"prompt":"Gym(taylor) ->","completion":" Taylor visits the gym at least once a day.\n"}
{"prompt":"¬(HealthyChildhood(taylor) ∨ Gym(taylor)) ->","completion":" Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.\n"}
{"prompt":"SportingEvent(olympics) ->","completion":" [BG] The Olympic games is a sporting event. \n"}
{"prompt":"LastOlympics(tokyo) ->","completion":" The last Olympic games was in Tokyo.\n"}
{"prompt":"MostMedals(unitedStates, tokyo) ->","completion":" The United States won the most medals in Tokyo. \n"}
{"prompt":"SportingEvent(champs) ->","completion":" The world championships is a sporting event.\n"}
{"prompt":"¬LastOlympics(tokyo) ->","completion":" The last Olympic games were not in Tokyo.\n"}
{"prompt":"∃x (LastOlympics(x) ∧ MostMedals(unitedStates, x)) ->","completion":" The United States won the most medals in the last Olympic games.\n"}
{"prompt":"∀x (Horse(x) → Hooves(x)) ->","completion":" All horses have hooves.\n"}
{"prompt":"∀x (Human(x) → ¬Hooves(x)) ->","completion":" No humans have hooves.\n"}
{"prompt":"∃x (Human(x) ∧ Horse(x)) ->","completion":" Some humans are horses.\n"}
{"prompt":"FlyTo(susan, lga) ->","completion":" Susan flies to LGA airport.\n"}
{"prompt":"∀x ∀y (FlyFrom(x, y) ⊕ FlyTo(x, y)) ->","completion":" The departure and arrival can not be the same airport.\n"}
{"prompt":"FlyFrom(john, lga) ->","completion":" John flies from LGA airport.\n"}
{"prompt":"FlyFrom(susan, lga) ->","completion":" Susan flies from LGA airport.\n"}
{"prompt":"FlyTo(john, lga) ->","completion":" John flies to LGA airport.\n"}
{"prompt":"∀x (Nice(x) → ¬Mean(x)) ->","completion":" No one nice to animals is mean to animals.\n"}
{"prompt":"∃x (Grumpy(x) ∧ Mean(x)) ->","completion":" Some grumpy people are mean to animals.\n"}
{"prompt":"∀x (AnimalLover(x) → Nice(x)) ->","completion":" All animal lovers are nice to animals.\n"}
{"prompt":"∀x (PetOwner(x) → AnimalLover(x)) ->","completion":" If someone owns a pet, then they love animals.\n"}
{"prompt":"PetOwner(tom) ->","completion":" Tom is a pet owner.\n"}
{"prompt":"Grumpy(tom) ->","completion":" Tom is a grumpy person.\n"}
{"prompt":"¬(Grumpy(tom) ∧ Mean(tom)) ->","completion":" Tom is not a grumpy person and mean to animals.\n"}
{"prompt":"¬(Grumpy(tom) ∧ Mean(tom)) → ¬(Grumpy(tom) ∨ AnimalLover(tom)) ->","completion":" If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.\n"}
{"prompt":"∀x (IsPodcast(x) → ¬IsNovel(x)) ->","completion":" A podcast is not a novel.\n"}
{"prompt":"∀x ∃y (BornIn(x, y) ∧ IsCity(y) ∧ IsAmerican(y) → IsAmerican(x)) ->","completion":" [BG] If a person is born in American City, the person is American.\n"}
{"prompt":"∀x ∀y (IsNovel(x) ∧ WrittenBy(x, y) → WritesNovel(y)) ->","completion":" [BG] If a book is novel and it is written by a person, then the person is a novel writer.\n"}
{"prompt":"IsAmerican(dani_Shapiro) ∧ IsWriter(dani_Shapiro) ->","completion":" Dani Shapiro is an American writer.\n"}
{"prompt":"WrittenBy(family_History, dani_Shapiro) ->","completion":" Family History is written by Dani Shapiro.\n"}
{"prompt":"IsNovel(family_History) ∧ WrittenIn(family_History, y2003) ->","completion":" Family History is a novel written in 2003.\n"}
{"prompt":"IsPodcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro) ->","completion":" Dani Shapiro created a podcast called Family Secrets.\n"}
{"prompt":"IsCity(boston) ∧ IsAmerican(boston) ->","completion":" [BG] Boston is an American city.\n"}
{"prompt":"WritesNovel(dani_Shapiro) ->","completion":" Dani Shapiro is a novel writer.\n"}
{"prompt":"IsNovel(family_Secrets) ->","completion":" Family Secrets is a novel.\n"}
{"prompt":"BornIn(dani_Shapiro, boston) ->","completion":" Dani Shapiro was born in Boston.\n"}
{"prompt":"∃x (BasketballPlayer(x) ∧ ¬American(x)) ->","completion":" Some basketball players are not American.\n"}
{"prompt":"∀x (BasketballPlayer(x) → Tall(x)) ->","completion":" All basketball players are tall.\n"}
{"prompt":"∀x (Tall(x) → WearLargeShoes(x)) ->","completion":" If someone is tall, they wear large shoes.\n"}
{"prompt":"∀x (WearLargeShoes(x) → WearLargeClothes(x)) ->","completion":" If someone wears large shoes, they wear large-sized clothes.\n"}
{"prompt":"¬WearLargeClothes(yuri) ->","completion":" Yuri does not wear large-size clothes.\n"}
{"prompt":"American(yuri) ->","completion":" Yuri is an American.\n"}
{"prompt":"¬(American(yuri) ∧ BasketballPlayer(yuri)) ->","completion":" Yuri is not an American basketball player.\n"}
{"prompt":"American(yuri) ∧ BasketballPlayer(yuri) ->","completion":" Yuri is an American basketball player.\n"}
{"prompt":"¬WearLargeShoes(yuri) → (American(yuri) ∧ BasketballPlayer(yuri)) ->","completion":" If Yuri does not wear large shoes, then Yuri is an American basketball player.\n"}
{"prompt":"¬(American(yuri) ∧ BasketballPlayer(yuri)) → BasketballPlayer(yuri) ->","completion":" If Yuri is not an American basketball player, then Yuri is a basketball player.\n"}
{"prompt":"∀x (Event(x) → Happy(x) ⊕ Sad(x)) ->","completion":" Events are either happy or sad.\n"}
{"prompt":"∃x (Event(x) ∧ Happy(x))  ->","completion":" At least one event is happy. \n"}
{"prompt":"∀x (Event(x) → Sad(x)) ->","completion":" All events are sad.\n"}
{"prompt":"Winner(maurier, steinhauer) ->","completion":" The winner of the 1992 du Maurier Classic was Steinhauer.\n"}
{"prompt":"Participate(maurier, steinhauer) ->","completion":" Steinhauer participated in the 1992 du Maurier Classic.\n"}
{"prompt":"∃x (LeaderBoard(maurier, x) ∧ SixWayTie(x) ∧ Belgium(x)) ->","completion":" There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\n"}
{"prompt":"Belgium(descampe) ∧ LeaderBoard(maurier, descampe) ->","completion":" Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n"}
{"prompt":"∀x (LeaderBoard(maurier, x) → Participate(maurier, x)) ->","completion":" All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\n"}
{"prompt":"¬Winner(maurier, steinhauer) ->","completion":" Steinhauer was not the winner of the 1992 du Maurier Classic.\n"}
{"prompt":"SixWayTie(descampe) ->","completion":" Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\n"}
{"prompt":"∀x (Bark(x) → ¬Like(jane, x)) ->","completion":" If an animal barks, then Jane does not like it.\n"}
{"prompt":"∀x (Dog(x) → Bark(x)) ->","completion":" All dogs are animals that bark.\n"}
{"prompt":"∀x (Jump(x) → Like(jane, x)) ->","completion":" If an animal jumps, then Jane likes it.\n"}
{"prompt":"∀x (HaveLegs(x) → Jump(x)) ->","completion":" If an animal has legs, then it jumps.\n"}
{"prompt":"∀x (Terricolous(x) → HaveLegs(x)) ->","completion":" If an animal is terricolous, then it has legs. \n"}
{"prompt":"(¬Jump(kiki) ∧ ¬HaveLegs(kiki)) → (Terricolous(kiki) ∨ HaveLegs(kiki)) ->","completion":" If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n"}
{"prompt":"Terricolous(kiki) ->","completion":" KiKi is terricolous.\n"}
{"prompt":"Bark(kiki) ∧ Dog(kiki) ->","completion":" KiKi barks and is a dog.\n"}
{"prompt":"¬Bark(kiki) ∧ ¬Dog(kiki) ->","completion":" KiKi neither barks nor is a dog.\n"}
{"prompt":"BornIn(ailtonsilva, y1995) ∧ CommonlyKnownAs(ailtonsilva, ailton) ->","completion":" Ailton Silva, born in 1995, is commonly known as Ailton.\n"}
{"prompt":"FootballPlayer(ailton) ∧ LoanedTo(ailton, braga) ->","completion":" Ailton is a football player who was loaned out to Braga.\n"}
{"prompt":"Brazilian(ailtonsilva) ∧ Footballplayer(ailtonsilva) ∧ PlaysFor(ailtonsilva, nautico) ->","completion":" Ailton Silva is a Brazillian footballer who plays for Nautico.\n"}
{"prompt":"FootballClub(nautico) ∧ FootballClub(braga) ->","completion":" Nautico is a football club along with Braga.\n"}
{"prompt":"FootballClub(fluminense) ->","completion":" Fluminense is a football club.\n"}
{"prompt":"∀x (PlaysFor(x, nautico) → ¬Brazilian(x)) ->","completion":" No one playing for Nautico is Brazilian.\n"}
{"prompt":"∀x (FootballClub(x) → ¬PlaysFor(ailtonsilva, x)) ->","completion":" Ailton Silva foes not play for a football club.\n"}
{"prompt":"∀x (FootballClub(x) → ¬LoanedTo(ailton, x)) ->","completion":" Ailton was not loaned out to a football club.\n"}
{"prompt":"PlaysFor(ailtonsilva, fluminense) ->","completion":" Ailton Silva played for Fluminense.\n"}
{"prompt":"∃x (FootballClub(x) ∧ LoanedTo(ailtonsilva, x)) ->","completion":" Ailton Silva was loaned out to a football club.\n"}
