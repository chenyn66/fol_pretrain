{"prompt": "\u2200x (Drinks(x) \u2192 Dependent(x))", "completion": "All people who regularly drink coffee are dependent on caffeine."}
{"prompt": "\u2200x (Drinks(x) \u2295 Jokes(x))", "completion": "People either regularly drink coffee or joke about being addicted to caffeine."}
{"prompt": "\u2200x (Jokes(x) \u2192 \u00acUnaware(x))", "completion": "No one who jokes about being addicted to caffeine is unaware that caffeine is a drug."}
{"prompt": "(Student(rina) \u2227 Unaware(rina)) \u2295 \u00ac(Student(rina) \u2228 Unaware(rina))", "completion": "Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug."}
{"prompt": "\u00ac(Dependent(rina) \u2227 Student(rina)) \u2192 (Dependent(rina) \u2227 Student(rina)) \u2295 \u00ac(Dependent(rina) \u2228 Student(rina))", "completion": "If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. "}
{"prompt": "Czech(miroslav) \u2227 ChoralConductor(miroslav) \u2227 Specialize(miroslav, renaissance) \u2227 Specialize(miroslav, baroque)", "completion": "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music."}
{"prompt": "\u2200x (ChoralConductor(x) \u2192 Musician(x))", "completion": "Any choral conductor is a musician."}
{"prompt": "\u2203x (Musician(x) \u2192 Love(x, music))", "completion": "Some musicians love music."}
{"prompt": "Book(methodOfStudyingGregorianChant) \u2227 Author(miroslav, methodOfStudyingGregorianChant) \u2227 Publish(methodOfStudyingGregorianChant, year1946)", "completion": "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."}
{"prompt": "\u2200x  (Eel (x)\u2192  Fish (x))", "completion": "All eels are fish. "}
{"prompt": "\u2200x  (Fish (x)\u2192 \u00ac Plant (x))", "completion": "No fish are plants. "}
{"prompt": "\u2200x ( Plant (x) \u2228  Animal (x))", "completion": "A thing is either a plant or animal."}
{"prompt": "\u2200x  (Breathe (x)\u2192 \u00ac Paper (x))", "completion": "Nothing that breathes is paper. "}
{"prompt": "\u2200x  (Animal (x)\u2192  Breathe (x))", "completion": "All animals breathe."}
{"prompt": " Eel (seaEel) \u2295 Plant (seaEel) \u2192 Eel (seaEel) \u2228 Animal (seaEel) ", "completion": "If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal."}
{"prompt": "\u2200x (Blake(x) \u2192 Building(x))", "completion": "The Blake McFall Company Building is a commercial warehouse listed on the National Register of Historic Places."}
{"prompt": "\u2200x (Blake(x) \u2192 Historic(x, year1990))", "completion": "The Blake McFall Company Building was added to the National Register of Historic Places in 1990."}
{"prompt": "\u2200x (Emmet(x) \u2192 Building(x) \u2227 FiveStory(x) \u2227 Locate(x, portland))", "completion": "The Emmet Building is a five-story building in Portland, Oregon."}
{"prompt": "\u2200x (Emmet(x) \u2192 Construct(x, year1915))", "completion": "The Emmet Building was built in 1915."}
{"prompt": "\u2200x (Emmet(x) \u2194 Blake(x))", "completion": "The Emmet Building is another name for the Blake McFall Company Building."}
{"prompt": "\u2203x (Emmet(x) \u2227 Work(john, x))", "completion": "John works at the Emmet Building."}
{"prompt": "BritishPolitician(williamdickinson) \u2227 SatInHouseOfCommons(williamdickinson)", "completion": "William Dickinson was a British politician who sat in the House of Commons"}
{"prompt": "Attended(williamdickinson, westminster) \u2227 Highschool(westminster) \u2227 Attended(williamdickinson, universityofedinburgh)", "completion": "William Dickinson attended Westminster school for high school and then the University of Edinburgh."}
{"prompt": "LocatedIn(universityofedinburgh, unitedkingdom) \u2227 University(universityofedinburgh)", "completion": "The University of Edinburgh is a university located in the United Kingdom."}
{"prompt": "Supported(williamdickinson, portlandwhigs)", "completion": "William Dickinson supported the Portland Whigs."}
{"prompt": "\u2200x (Supported(x, portlandwhigs) \u2192 \u00acSeatInParliament(x))", "completion": "People who supported the Portland Whigs did not get a seat in the Parliament."}
{"prompt": "UniversalLanguage(languageA)", "completion": "LanguageA is a universal language"}
{"prompt": "\u2200x \u2200y (\u2203z (Know(x, z) \u2227 Know(y, z) \u2227 UniversalLanguage(z)) \u2192 Communicate(x, y))", "completion": "If a universal language exists, then for every two people if they both know the same universal language they can communicate."}
{"prompt": "Know(katya, languageA)", "completion": "Katya cannot communicate with Danil."}
{"prompt": "\u00acCommunicate(katya, danil)", "completion": "Katya knows LanguageA. "}
{"prompt": "\u2200x (AMC(x) \u2192 ThreeMovies(x))", "completion": "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. "}
{"prompt": "\u2203x (CinemaEveryWeek(x))", "completion": "Some customers go to cinemas every week"}
{"prompt": "\u2200x (AMC(x) \u2228 HBO(x))", "completion": "Customers either subscribe to AMC service or HBO service. "}
{"prompt": "\u2200x (PreferTVSeries(x) \u2192 \u00acWatchTVInCinema(x))", "completion": "Customers who prefer TV series more and will not watch TV series in cinemas."}
{"prompt": "\u2200x (HBO(x) \u2192 PreferTVSeries(x))", "completion": "All customers who subscribe to HBO services prefer TV series to movies. "}
{"prompt": "WatchTVInCinema(james)", "completion": "James watches TV series in cinemas. "}
{"prompt": "\u2200x \u2200y (LaLiga(x) \u2227 LaLiga(y) \u2227 MorePoints(x, y) \u2192 HigherRank(x, y))", "completion": "A La Liga soccer team ranks higher than another if it receives more points."}
{"prompt": "\u2200x \u2200y (LaLiga(x) \u2227 LaLiga(y) \u2227 \u00acMorePoints(x, y) \u2227 \u00acMorePoints(y, x) \u2227 MorePointsInGameBetween(x, y) \u2192 HigherRank(x, y))", "completion": "If two La Liga soccer teams recieve the same points, the team which recieves more points from the games between the two teams ranks higher."}
{"prompt": "LaLiga(realMadrid) \u2227 LaLiga(barcelona)", "completion": "Real Madrid and Barcelona are both La Liga soccer teams."}
{"prompt": "MorePoints(realMadrid, barcelona)", "completion": "In La Liga 2021-2022, Real Madrid recieves 86 points and Barcelon recieves 73 points."}
{"prompt": "\u00acMorePointsInGameBetween(realMadrid, barcelona) \u2227 \u00acMorePointsInGameBetween(barcelona, realMadrid)", "completion": "In La Liga 2021-2022, Real Madrid and Barcelona both recieve 3 points from the games between them."}
{"prompt": "Neighbourhoodin(lawtonPark, seattle)", "completion": "Lawton Park is a neighbourhood in Seattle. "}
{"prompt": "\u2200x (Citizenof(x, lawtonPark) \u2192 Usezipcode(x, number98199))", "completion": "All citizens of Lawton Park use the zip code 98199. "}
{"prompt": "Citizenof(tom, lawtonPark)", "completion": "Tom is a citizen of Lawton Park."}
{"prompt": "Usezipcode(daniel, number98199)", "completion": "Daniel uses the zip code 98199. "}
{"prompt": "\u2200x (IsLegislator(x) \u2227 StealsFunds(x) \u2192 Suspended(x))", "completion": "If a legislator is found guilty of stealing government funds, they will be suspended from office."}
{"prompt": "IsLegislator(tiffanyTAlston)", "completion": "Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013."}
{"prompt": "StealsFunds(tiffanyTAlston)", "completion": "Tiffany T. Alston was found guilty of stealing government funds in 2012."}
{"prompt": "\u2203x \u2203y (Fish(x) \u2192 Sting(x,y))", "completion": "Some fish may sting."}
{"prompt": "Fish(stonefish)", "completion": "Stonefish is a fish."}
{"prompt": "\u2200x (StepOn(stonefish, x) \u2192 Sting(stonefish, x))", "completion": "It stings to step on a stonefish."}
{"prompt": "\u2200x (Sting(stonefish, x) \u2227 \u00acTreated(x) \u2192 CauseDeath(x))", "completion": "Stonefish stings cause death if not treated."}
{"prompt": "\u2200x (Sting(stonefish, x) \u2227 (ApplyHeat(x) \u2228 UseAntivenom(x)) \u2192 Treated(x))", "completion": "To treat stonefish stings, apply heat to the affected area or use an antivenom."}
{"prompt": "\u2203x (LG(x) \u2227 TypeC(x))", "completion": "Some monitors produced by LG have a type-c port."}
{"prompt": "\u2200x (TypeC(x) \u2192 \u00acAOC(x))", "completion": "If the monitor has a type-c port, then it is not produced by AOC."}
{"prompt": "\u2200x (Library(x) \u2192 AOC(x))", "completion": "All monitors in the library are produced by AOC. "}
{"prompt": "Library(l-2021) \u2295 TypeC(l-2021) ", "completion": "L-2021 is either in the library or has a type-c port."}
{"prompt": "\u00ac(AOC(l-2021) \u2295 LG(l-2021))", "completion": "L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG."}
{"prompt": "\u2200x (Meat(x) \u2228 Vegetarian(x))", "completion": "People eat meat regularly or are vegetation."}
{"prompt": "\u2200x (Meat(x) \u2192 Hamburgers(x))", "completion": "If people eat meat regularly, then they enjoy eating hamburgers and steaks."}
{"prompt": "\u2200x (Vegetarian(x) \u2192 Conscious(x))", "completion": "All people who are vegetarian are conscious of the environment or their health."}
{"prompt": "\u2200x (Conscious(x) \u2192 \u00acFastFood(x))", "completion": "If people are conscious about the environment or their health, then they do not go to fast food places often."}
{"prompt": "\u2200x (Busy(x) \u2192 FastFood(x))", "completion": "If people have busy schedules without time to cook, then they go to fast food places often."}
{"prompt": "\u00ac(FastFood(jeremy) \u2227 Conscious(jeremy)) \u2192 FastFood(jeremy)", "completion": "If Jeremy does not both go to fast food places often and is conscious about the environment or their health, then he goes to fast food places often."}
{"prompt": "\u2203x (Project(x) \u2227 Do(sam, x))", "completion": "Sam is doing a project."}
{"prompt": " \u2200x (Project(x) \u2192 (WrittenIn(x, python) \u2295 WrittenIn(x, c++)))", "completion": "A project is written either in C++ or in Python."}
{"prompt": " \u2200x (Project(x) \u2227 WrittenIn(x, python) \u2227 Do(sam, x) \u2192 \u00acUse(sam, mac))", "completion": "If Sam does a project written in Python, he will not use a Mac."}
{"prompt": " Use(sam, mac)", "completion": "Sam is using a Mac."}
{"prompt": " Use(sam, mac) \u2192 \u2203x (Song(x) \u2227 Play(sam, x))", "completion": "If Sam uses a Mac, he will play a song."}
{"prompt": " \u2200x (\u00acBe(x, perfect) \u2192 \u00acPlay(sam, x))", "completion": "If a song is not \"Perfect\", Sam will never play it."}
{"prompt": "\u2200x (Rabbit(x) \u2192 HasFur(x))", "completion": "All rabbits have fur"}
{"prompt": "\u2203x (Pet(x) \u2227 Reptile(x))", "completion": "Some pets are rabbits."}
{"prompt": "\u2200x (App(x) \u2192 Software(x))", "completion": "All video applications are software."}
{"prompt": "\u2200x (Youtube(x) \u2192 App(x))", "completion": "All YouTube-related applications are video applications. "}
{"prompt": "\u2200x (Youtube(x) \u2228 Instagram(x))", "completion": "An APP is either related to YouTube or Instagram."}
{"prompt": "\u2200x (Instagram(x) \u2192 Entertainment(x))", "completion": "All Instagram is entertainment. "}
{"prompt": "\u2200x (Software(x) \u2192 Program(x))", "completion": "All software is programmed. "}
{"prompt": "\u2200x (Entertainment(x) \u2192 Interesting(x))", "completion": "All entertainments are interesting."}
{"prompt": "\u2200x (Interesting(x) \u2192 Good(x))", "completion": "If something is interesting, then it is good."}
{"prompt": "\u00acGood(tiktok)", "completion": "TikTok is not good."}
{"prompt": "UnincorporatedCommunity(ordinary)", "completion": "Ordinary is an unincorporated community."}
{"prompt": "In(ordinary, elliotcounty) \u2227 On(ordinary, kentuckyroute32)", "completion": "Located within Elliot County, Ordinary is on Kentucky Route 32."}
{"prompt": "NorthwestOf(ordinary, sandyhook)", "completion": "Ordinary is located northwest of Sandy Hook."}
{"prompt": "\u2200x (YoungAdult(x) \u2192 GoOnDiet(x))", "completion": "All young adults go on a diet."}
{"prompt": "\u2200x (CollegeStudent(x) \u2192 YoungAdult(x))", "completion": "All college students are young adults."}
{"prompt": "\u2200x (YaleStudent(x) \u2192 CollegeStudent(x))", "completion": "All Yale students are college students."}
{"prompt": "\u2200x (YaleStudent(x) \u2228 HarvardStudent(x))", "completion": "Someone is either a Yale student or a Harvard student."}
{"prompt": "\u2200x (HarvardStudent(x) \u2192 Diligent(x))", "completion": "All Harvard students are diligent."}
{"prompt": "HarvardStudent(susan) \u2192 YoungAdult(susan)", "completion": "If Susan is a Harvard student, then she is a young adult."}
{"prompt": "YaleStudent(susan) \u2192 \u00acGoOnDiet(susan)", "completion": "If Susan is a Yale student, then she does not go on a diet."}
{"prompt": "Play(vicdicara, guitar) \u2227 Play(vicdicara, bass)", "completion": "Vic DiCara plays guitar and bass."}
{"prompt": "\u00ac(\u2203x (Music (vicdicara, punk) \u2227 Music (vicdicara, x)))", "completion": "The only style of music Vic DiCara plays is punk music."}
{"prompt": "Band(vicdicara, insideOut)", "completion": "Vic DiCara played in the band Inside Out."}
{"prompt": "\u2200x (Athlete(x) \u2192 GoodAtSports(x))", "completion": "All athletes are good at sports."}
{"prompt": "\u2200x (OlympicGoldMedalWinner(x) \u2192 Athlete(x))", "completion": "All Olympic gold medal winners are good athletes."}
{"prompt": "\u2200x (Scientist(x) \u2192 \u00acGoodAtSports(x))", "completion": "No scientists are good at sports."}
{"prompt": "\u2200x (NobelLaureate(x) \u2192 Scientist(x))", "completion": "All Nobel laureates are scientists."}
{"prompt": "GoodAtSports(amy) \u2228 OlympicGoldMedalWinner(amy)", "completion": "Amy is good at sports or Amy is an Olympic gold medal winner."}
{"prompt": "\u00acNobelLaureate(amy) \u2192 \u00acOlympicGoldMedalWinner(amy)", "completion": "If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner."}
{"prompt": "\u2200x (RedFruit(x) \u2192 VC(x))", "completion": "All fruits with the color red contain a large amount of vitamin C."}
{"prompt": "\u2200x (Apple(x) \u2192 RedFruit(x))", "completion": "All apples are fruits with the color red."}
{"prompt": "\u2200x (VC(x) \u2192 Benefit(x))", "completion": "All fruits containing a large amount of vitamin C are beneficial to people. "}
{"prompt": "\u2200x (Benefit(x) \u2192 \u00acWarningList(x))", "completion": "No fruits that are beneficial to people are on a warning list."}
{"prompt": "\u00ac(Benefit(k) \u2227 Apple(k)) \u2192 RedFruit(k)", "completion": "If K is not beneficial to people and also not an apple, then it is a fruit with the color red."}
{"prompt": "\u2200x (Meta(x) \u2192 HighIncome(x))", "completion": "Everyone working at Meta has a high income. "}
{"prompt": "\u2200x (HighIncome(x) \u2192 \u00acBus(x))", "completion": "If a person has a high income, then he/she will not take a bus to their destination."}
{"prompt": "\u2200x (Bus(x) \u2228 Drive(x))", "completion": "People will either take a bus or drive to their destination. "}
{"prompt": "\u2200x (HaveCars(x) \u2192 Drive(x))", "completion": "Everyone who has a car will choose to drive to their destination. "}
{"prompt": "\u2200x (Student(x) \u2192 \u00acDrive(x))", "completion": "No students drive to their destination. "}
{"prompt": "HaveCars(james) \u2228 Meta(james)", "completion": "James has a car or works at Meta."}
{"prompt": "\u2200x (Park(x) \u2295 Movies(x))", "completion": "Students either go to the park or go to the movies. "}
{"prompt": "\u2200x (Nature(x) \u2192 \u00acFreeTime(x))", "completion": "No student who enjoys nature has free time during the weekend. "}
{"prompt": "\u2200x (Movies(x) \u2192 Nature(x))", "completion": "All students who go to the movies enjoy nature. "}
{"prompt": "\u2200x (NoClass(x) \u2192 FreeTime(x))", "completion": "All students who do not have class during the weekend have free time during the weekend. "}
{"prompt": "\u2200x (SummerCamp(x) \u2192 NoClass(x))", "completion": "All students not in summer camp do not have class during the weekend. "}
{"prompt": "NoClass(james)", "completion": "James does not have class during the weekend."}
{"prompt": "\u2200x (TelevisionStar(x) \u2192 \u00acCertifiedPublicAccoutant(x))", "completion": "No television stars are certified public accountants."}
{"prompt": "\u2200x (CertifiedPublicAccoutant(x) \u2192 GoodBusinessSense(x))", "completion": "All certified public accountants have good business sense."}
{"prompt": "\u2203x (Math(x) \u2227 Chemistry(x))", "completion": "Some students good at math are good at chemistry."}
{"prompt": "\u2200x (Chemistry(x) \u2192 Experiment(x))", "completion": "All students good at chemistry enjoy conducting experiments. "}
{"prompt": "\u2200x (Experiment(x) \u2192 Planning(x))", "completion": "All students that enjoy conducting experiments are good at planning. "}
{"prompt": "\u2200x (Planning(x) \u2192 \u00acAward(x))", "completion": "No student good at planning is awarded the Dean's List. "}
{"prompt": "\u00ac(Chemistry(james) \u2295 Award(james))", "completion": "James is either good at chemistry and awarded the Dean's List, or neither good at chemistry nor awarded the Dean's List."}
{"prompt": "\u2200x (Easy(x) \u2192 LowerAC(x))", "completion": "If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. "}
{"prompt": "\u2200x (Recommended(x) \u2192 Easy(x))", "completion": "All Leetcode problems that are recommended to novices are easy. "}
{"prompt": "\u2200x (Easy(x) \u2295 Hard(x))", "completion": "A Leetode problem is either easy or hard."}
{"prompt": "\u2200x (Starred(x) \u2192 Hard(x))", "completion": "Leetcode problems that are starred by more than 1 thousand users are hard."}
{"prompt": "Recommended(twosum) ", "completion": "2Sum is recommended to novices. "}
{"prompt": "Starred(foursum)", "completion": "4Sum is starred by more than 1 thousand users."}
{"prompt": "\u2200x (Rent(x, car) \u2192 Spend(x, money))", "completion": "All rental cars cost the renter money."}
{"prompt": "GoesTo(sarah, vermont) \u2192 DriveTo(sarah, vermont)", "completion": "Whenever Sarah goes to Vermont, Sarah drives there."}
{"prompt": "\u2200x \u2200y (\u00acOwn(x, car) \u2227 DriveTo(x, y) \u2192 Borrow(x, car) \u2295 Rent(x, car))", "completion": "For someone who does not own a car to drive somewhere, they must either borrow a car or rent a car."}
{"prompt": "\u00acOwn(sarah, car)", "completion": "Sarah doesn\u2019t own a car."}
{"prompt": "\u2200x (Camping(sarah, x) \u2192 \u00ac(Borrow(sarah, car)))", "completion": "Sarah never borrows a car to go camping."}
{"prompt": "Camping(sarah, vermont)", "completion": "Sarah is going to go camping in Vermont this weekend."}
{"prompt": "\u2200x \u2200y (Camping(x, y) \u2192 GoesTo(x, y))", "completion": "To go camping somewhere, you must go to that place."}
{"prompt": "\u2200x Weddings(x) \u2192 GettingMarried(x)", "completion": "All people who attend weddings are getting married or have friends who are getting married."}
{"prompt": "\u2200x PreTeen(x) \u2192 \u00acGettingMarried(x)", "completion": "No preteens and other young children are getting married or have friends who are getting married."}
{"prompt": "\u2200x Celebrating(x) \u2192 Weddings(x)", "completion": "If people enjoy celebrating life milestone events with other people, then they attend weddings."}
{"prompt": "\u2200x LargeGathering(x) \u2192 Celebrating(x)", "completion": "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people."}
{"prompt": "\u2200x Outgoing(x) \u2192 LargeGathering(x)", "completion": "All people who are outgoing and very spirited are fond of large organized group functions."}
{"prompt": "\u00ac(PreTeen(Carol) \u2227 Weddings(Carol)) \u2192 \u00acGettingMarried(Carol)", "completion": "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  "}
{"prompt": "\u2200x (Republicans(x) \u2192 Anti-abortion(x))", "completion": "All Republicans are anti-abortion."}
{"prompt": " \u2200x (Republicans(x) \u2228 Democrats(x))", "completion": "Either Republicans or Democrats. "}
{"prompt": " \u2200x (Democrats(x) \u2192 \u00acConservative(x))", "completion": "No Democrats are conservative."}
{"prompt": " \u2200x (Conservative(x) \u2228 Liberal(x))", "completion": "Either conservative or liberal. "}
{"prompt": " Conservative(anU.SGovernmentOfficial) \u2295 Republicans(anU.SGovernmentOfficial)", "completion": "A U.S government official is either conservative or a Republican."}
{"prompt": "\u2200x (AdvocateOfHighTariff(x) \u2192 Republican(x))", "completion": "All advocates of high tariff rates are Republicans."}
{"prompt": "\u2203x (Republican(x) \u2227 \u00acConservative(x))", "completion": "Some Republicans are not conservatives."}
{"prompt": "\u2200x (Athlete(x) \u2192 \u00acSlowRunner(x))", "completion": "No athletes are slow runners. "}
{"prompt": "\u2200x (ProfessionalBasketballPlayer(x) \u2192 Athlete(x))", "completion": "All professional basketball players are athletes. "}
{"prompt": "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))", "completion": "All NBA players are professional basketball players. "}
{"prompt": "\u2200x (KnicksPlayer(x) \u2192 NBAPlayer(x))", "completion": "All Knicks players are NBA players. "}
{"prompt": "\u00ac(ProfessionalBasketballPlayer(jim) \u2295 SlowRunner(jim))", "completion": "Jim is either not a professional basketball player or not a slow runner. "}
{"prompt": "\u2200x (Kid(x) \u2192 LoveAnimals(x))", "completion": "All kids love animals."}
{"prompt": "\u2200x (Toddler(x) \u2192 Kid(x))", "completion": "All toddlers are kids."}
{"prompt": "\u2200x (LoveAnimals(x) \u2192 \u00acBad(x))", "completion": "If someone loves animals, then they are not bad."}
{"prompt": "\u2200x (Pirate(x) \u2192 Bad(x))", "completion": "All pirates are bad."}
{"prompt": "\u00acPirate(nancy) \u2192 LoveAnimals(nancy)", "completion": "If Nancy is not a pirate, then Nancy loves animals."}
{"prompt": "\u00acToddler(nancy) \u2192 Bad(nancy)", "completion": "If Nancy is not a toddler, then Nancy is bad."}
{"prompt": "DirectedBy(after_Tiller, lana_Wilson) \u2227 DirectedBy(the_Departure, lana_Wilson) \u2227 DirectedBy(miss_Americana, lana_Wilson)", "completion": "Lana Wilson directed After Tiller, The Departure, and Miss Americana."}
{"prompt": "\u2200x \u2203y (DirectedBy(y, x) \u2192 Filmmaker(x))", "completion": "If a film is directedy by a person, the person is a filmmaker."}
{"prompt": "IsDocumentary(after_Tiller)", "completion": "After Tiller is a documentary."}
{"prompt": "\u2200x (IsDocumentary(x) \u2192 IsFilm(x))", "completion": "The documentary is a type of films."}
{"prompt": "FromCity(lana_Wilson, kirkland)", "completion": "Lana Wilson is from Kirkland."}
{"prompt": "CityCountry(kirkland, us)", "completion": "Kirkland is a US city."}
{"prompt": "\u2200x \u2200y \u2200z (FromCity(x, y) \u2227 CityCountry(y, z) \u2192 FromCountry(x, z))", "completion": "If a person is from a city in a country, the person is from the country."}
{"prompt": "Nomination(after_Tiller, the_Independent_Spirit_Award_for_Best_Documentary)", "completion": "After Tiller is nominated for the Independent Spirit Award for Best Documentary."}
{"prompt": "\u2200x ((Bear(x) \u2227 InZoo(x)) \u2192 \u00acWild(x))", "completion": "All bears in zoos are not wild. "}
{"prompt": "\u2203x (Bear(x) \u2227 InZoo(x)) ", "completion": "Some bears are in zoos. "}
{"prompt": "\u2200x (Leader(x) \u2192 InMonarchy(x))", "completion": "If a person is the leader of a country for life, that person is in a monarchy. "}
{"prompt": "\u2200x (Leader(x) \u2192 King(x) \u2295 Queen(x))", "completion": "Leaders are either a king or a queen."}
{"prompt": "\u2200x (Queen(x) \u2192 Female(x))", "completion": "Queens are female."}
{"prompt": "\u2200x (King(x) \u2192 Male(x))", "completion": "Kings are male. "}
{"prompt": "Queen(elizabeth)", "completion": "Elizabeth is a queen."}
{"prompt": "Leader(elizabeth)", "completion": "Elizabeth is a leader"}
{"prompt": "\u2200x (Matcha(x) \u2192 \u00acLate(x))", "completion": "If people make their own matcha teas every morning with ceremonial-grade matcha powder, then they do not wake up late and start their schedules past noon regularly."}
{"prompt": "\u2200x (California(x) \u2192 Matcha(x))", "completion": "If people live in California and attend yoga classes regularly, then they make their own matcha teas every morning with ceremonial-grade matcha powder."}
{"prompt": "\u2200x (Celebrities(x) \u2192 Late(x))", "completion": "If people work in the entertainment industry as high-profile celebrities, then they wake up late and start their schedules past noon regularly."}
{"prompt": "\u2200x (Jobs(x) \u2192 Celebrities(x))", "completion": "If people do not have regular 9-5 jobs, then they work in the entertainment industry as high-profile celebrities."}
{"prompt": "\u2200x (WorkHome(x) \u2192 Jobs(x))", "completion": "All people who prefer working at home over going to the office every day do not have regular 9-5 jobs."}
{"prompt": "(WorkHome(clay) \u2227 Matcha(clay)) \u2295 (\u00acWorkHome(clay) \u2227 \u00acMatcha(clay))", "completion": "Clay either both prefers to work at home over going to the office every day and makes his own matcha teas every morning with ceremonial-grade matcha powder, or he neither prefers to work at home over going to the office every day nor makes his own matcha teas every morning with ceremonial-grade matcha powder."}
{"prompt": "English(thomasBarber) \u2227 ProfessionalFootballer(thomasBarber)", "completion": "Thomas Barber was an English professional footballer."}
{"prompt": "PlayedInTheFootballLeagueFor(thomasBarber, astonVilla)", "completion": "Thomas Barber played in the Football League for Aston Villa."}
{"prompt": "PlayedAs(thomasBarber, aHalfBack) \u2227 PlayedAs(thomasBarber, anInsideLeft)", "completion": "Thomas Barber played as a half back and inside left."}
{"prompt": "ScoredTheWinningGoalIn(thomasBarber, facupfinal1913)", "completion": "Thomas Barber scored the winning goal in the 1913 FA Cup Final."}
{"prompt": "\u2200y (\u2200x (PlayInConcert(y, x) \u2192 GoodAt(y, x)))", "completion": "If people play the instrument in the concert, then he is good at playing this kind of instrument."}
{"prompt": "Play(peter, piano) \u2227Play(peter, violin)", "completion": "Peter plays piano, violin, and saxophone."}
{"prompt": "PlayInConcert(peter, piano)", "completion": "Peter was invited to play piano at the concert hall."}
{"prompt": "PlayerInConcert(peter) \u2227 PlayerInConcert(oliver)", "completion": "Oliver and Peter were both invited to perform in the concert."}
{"prompt": "\u00acPlayInConcert(oliver, piano)", "completion": "Oliver plays a different musical instrument from Peter in the concert."}
{"prompt": "\u2200x (GoesUnderwater(x) \u2192 EnjoysWater(x))", "completion": "If something can go underwater, then it enjoys water."}
{"prompt": "\u2200x (CanSwim(x) \u2192 GoesUnderwater(x))", "completion": "All animals that can swim can go underwater."}
{"prompt": "\u2200x (CanSwim(x) \u2228 CanWalk(x))", "completion": "Either an animal can swim or it can walk."}
{"prompt": "\u2200x (CanWalk(x) \u2192 TravelsOnLand(x))", "completion": "Animals that can walk travel on land."}
{"prompt": "\u2200x (EnjoysWater(x) \u2192 Splashes(x))", "completion": "Animals that enjoy water splash water around."}
{"prompt": "\u2200x (TravelsOnLand(x) \u2192 EnjoysBasking(x))", "completion": "Every animal that travels on land enjoys basking in the sun."}
{"prompt": "Splashes(george) \u2227 CanSwim(george)", "completion": "George splashes water around and can swim."}
{"prompt": "(CanWalk(liam) \u2227 EnjoysWater(liam)) \u2228 (\u00acCanWalk(liam) \u2227 \u00acEnjoysWater(liam))", "completion": "Liam is either an animal that can walk and enjoys water, or is neither an animal that can walk nor enjoys water."}
{"prompt": "FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)", "completion": "Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. "}
{"prompt": " PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)", "completion": "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value."}
{"prompt": " \u2200x (PValue(x) \u2192 ThresholdsForBelief(x) \u2227 \u00acMetricsOfEffect(x))", "completion": "P values are thresholds for belief, not metrics of effect. "}
{"prompt": "\u2200x (Dispensable(x) \u2192 EnvironmentFriendly(x))", "completion": "All dispensable things are environment-friendly. "}
{"prompt": "\u2200x (Woodware(x) \u2192 Dispensable(x))", "completion": "All woodware is dispensable."}
{"prompt": "\u2200x (Paper(x) \u2192 Woodware(x))", "completion": "All paper is woodware. "}
{"prompt": "\u2200x (Good(x) \u2192 \u00acBad(x))", "completion": "No good things are bad. "}
{"prompt": "\u2200x (EnvironmentFriendly(x) \u2192 Good(x))", "completion": "All environment-friendly things are good."}
{"prompt": "Paper(worksheet) \u2295 EnvironmentFriendly(worksheet)", "completion": "A worksheet is either paper or is environment-friendly."}
{"prompt": "\u2200x (Reptile(x) \u2192 \u00acHasFur(x))", "completion": "No reptile has fur."}
{"prompt": "\u2200x (Snake(x) \u2192 Reptile(x))", "completion": "All snakes are reptiles."}
{"prompt": "\u2200x (Located(newhaven, x) \u2192 \u00acHigh(x))", "completion": "All buildings in New Haven are low. "}
{"prompt": "\u2200x (YaleHousing(x) \u2192 Located(newhaven, x))", "completion": "All buildings managed by the Yale Housing are located in New Haven. "}
{"prompt": "\u2200x (Located(manhattans, x) \u2192 High(x))", "completion": "All buildings in Manhattans are high. "}
{"prompt": "\u2200x (Bloomberg(x) \u2192 Located(manhattans, x))", "completion": "All buildings owned by Bloomberg are located in Manhattans. "}
{"prompt": "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))", "completion": "All buildings with the Bloomberg logo are owned by Bloomberg. "}
{"prompt": "YaleHousing(tower-a)", "completion": "Tower A is managed by the Yale Housing."}
{"prompt": "BloombergLogo(tower-b)", "completion": "Tower B is with the Bloomberg logo."}
{"prompt": "\u2200x (ColdBlooded(x) \u2192 \u00acBird(x))", "completion": "No cold-blooded animals are birds."}
{"prompt": "\u2200x (Reptile(x) \u2192 ColdBlooded(x))", "completion": "All reptiles are cold-blooded."}
{"prompt": "\u2200x (Bird(x) \u2228 EatOtherAnimals(x))", "completion": "Either an animal is a bird or it eats other animals."}
{"prompt": "\u2200x (EatOtherAnimals(x) \u2192 Carnivore(x))", "completion": "If an animal eats other animals, then it is a carnivore."}
{"prompt": "\u00acColdBlooded(ron) \u2227 \u00acCarnivore(ron)", "completion": "Ron is neither a cold-blooded animal nor a carnivore."}
{"prompt": "\u00acCarnivore(henry) \u2227 \u00acLizard(henry)", "completion": "Henry is neither a carnivore nor a lizard."}
{"prompt": "Prehistoric(ambiortus) \u2227 BirdGenus(ambiortus)", "completion": "Ambiortus is a prehistoric bird genus."}
{"prompt": "\u2200x (Species(x, ambiortus) \u2192 AmbiortusDementjevi(x))", "completion": "Ambiorus Dementjevi is the only known species of Ambiortus."}
{"prompt": "\u2200x (AmbiortusDementjevi(x) \u2192 Lived(x, mongolregion))", "completion": "The Mongol region was where Ambiorus Dementjevi lived."}
{"prompt": "Discovered(yevgenykurochkin, ambiortus)", "completion": "Yevgeny Kurochkin was the discoverer of Ambiortus."}
{"prompt": "\u2200x (UseFootball(x) \u2192 ThrowFootball(x))", "completion": "Everyone that uses a football can throw a football."}
{"prompt": "\u2200x (PlayFootball(x) \u2192 UseFootball(x))", "completion": "If someone plays football, then they use a football."}
{"prompt": "\u2200x (BasketballPlayer(x) \u2228 PlayFootball(x))", "completion": "Either someone is a football player or a basketball player."}
{"prompt": "\u2200x (BasketballPlayer(x) \u2192 Tall(x))", "completion": "Every basketball player is tall."}
{"prompt": "\u2200x (ThrowFootball(x) \u2192 ThrowFootballSpiral(x))", "completion": "Everyone that can throw a football can throw a football with a spiral."}
{"prompt": "\u2200x (Tall(x) \u2192 InShape(x))", "completion": "If someone is tall, then they are in shape."}
{"prompt": "\u00acTall(jack) \u2227 \u00acBasketballPlayer(jack) \u2192 \u00acTall(jack) \u2227 \u00acThrowFootball(jack)", "completion": "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football."}
{"prompt": "CurrentName(fortticonderoga, fortcarillon)", "completion": "Fort Ticonderoga is the current name for Fort Carillon."}
{"prompt": "Built(pierrederigauddevaudreuil, fortcarillon)", "completion": "Pierre de Rigaud de Vaudreuil built Fort Carillon."}
{"prompt": "LocatedIn(fortcarillon, newfrance)", "completion": "Fort Carillon was located in New France."}
{"prompt": "\u00acLocatedIn(newfrance, europe)", "completion": "New France is not in Europe."}
{"prompt": "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))", "completion": "No soccer players are professional basketball players."}
{"prompt": "\u2200x (NBAPlayer(x) \u2192 ProfessionalBasketballPlayer(x))", "completion": "All NBA players are professional basketball players."}
{"prompt": "\u2200x (Defender(x) \u2192 SoccerPlayer(x))", "completion": "All defenders are soccer players."}
{"prompt": "\u2200x (Centerback(x) \u2192 Defender(x))", "completion": "All centerback players are defenders."}
{"prompt": "(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry)) \u2192 ProfessionalBasketballPlayer(stephencurry)", "completion": "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."}
{"prompt": "\u2200x (Song(x) \u2192 \u00acVisual(x))", "completion": "No songs are visual. "}
{"prompt": "\u2200x (FolkSong(x) \u2192 Song(x))", "completion": "All folk songs are songs. "}
{"prompt": "\u2200x (Video(x) \u2192 Visual(x))", "completion": "All videos are visual. "}
{"prompt": "\u2200x (Movie(x) \u2192 Video(x))", "completion": "All movies are videos."}
{"prompt": "\u2200x (ScifiMovie(x) \u2192 Movie(x))", "completion": "All sci-fi movies are movies."}
{"prompt": "ScifiMovie(inception)", "completion": "Inception is a sci-fi movie."}
{"prompt": "\u00acFolkSong(mac) \u2227 \u00acScifiMovie(mac)", "completion": "Mac is neither a folk song nor a sci-fi movie."}
{"prompt": "\u2200x (Extroverts(x) \u2192 OvertlyExpressive(x))", "completion": "All extroverts are overtly expressive."}
{"prompt": " \u2200x (Extroverts(x) \u2228 Introverts(x)) ", "completion": "People are either extroverts or introverts."}
{"prompt": " \u2200x (Introverts(x) \u2192 ShyAndReticentPerson(x))", "completion": "If someone is an introvert, then they are shy and reticent. "}
{"prompt": " \u2200x (ShyAndReticentPerson(x) \u2192 \u00acLikeToTalkToStrangers(x))", "completion": "No shy and reticent person likes to talk to strangers."}
{"prompt": " \u00acExtroverts(jeff) \u2227 \u00acLikeToTalkToStrangers(jeff)", "completion": "Jeff is not an extrovert and someone who likes to talk to strangers."}
{"prompt": "\u2200x (LowScore(x) \u2192 \u00acTopPlayer(x))", "completion": "No low-scoring players are top players in the league."}
{"prompt": "\u2200x (TopPlayer(x) \u2228 ThreePointer(x))", "completion": "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers."}
{"prompt": "\u2200x (ThreePointer(x) \u2192 TwoPointer(x))", "completion": "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers."}
{"prompt": "\u2200x (TwoPointer(x) \u2192 \u00acBadMid(x))", "completion": "No players who are solid at shooting 2-pointers are bad at mid-range shots."}
{"prompt": "LowScore(candace) \u2295 ThreePointer(candace)", "completion": "Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers."}
{"prompt": "\u2200x (Plant(x) \u2192 \u00acFungi(x))", "completion": "No plants are fungi."}
{"prompt": "\u2200x (Mushroom(x) \u2192 Fungi(x))", "completion": "Mushrooms are fungi."}
{"prompt": "\u2200x (Road(x) \u2192 \u00acClean(x))", "completion": "No road is clean."}
{"prompt": "\u2203x (Street(x) \u2227 Road(x))", "completion": "And some streets are roads."}
{"prompt": "On(newyorkcity, eastcoast)", "completion": "New York City is on the East Coast. "}
{"prompt": "On(seattle, westcoast)", "completion": "Seattle is on the West Coast. "}
{"prompt": "\u2200x \u2200y \u2200z ((TravelingFrom(x, y) \u2227 On(y, eastcoast) \u2227 TravelingTo(x, z) \u2227 On(z, westcoast)) \u2192 OnLongFlight(x))", "completion": "If a person from a city on the East coast is traveling to a city on the west coast, they will be on a long flight."}
{"prompt": "\u2203x (\u00acInFirstClass(x) \u2227 TravelingFrom(x, newyorkcity) \u2227 TravelingTo(x, seattle))", "completion": "Most passengers on flights to Seattle from New York City are not in first class."}
{"prompt": "\u2200x (OnLongFlight(x) \u2227 \u00acInFirstClass(x) \u2192 Uncomfortable(x))", "completion": "People on long flights are uncomfortable unless they're in first class"}
{"prompt": "\u2200x (Musician(x) \u2192 Busy(x))", "completion": "Musicians have very busy lives."}
{"prompt": "Musician(singhKaur) \u2227 Famous(singhKaur)", "completion": "Singh Kaur is a musician and famous."}
{"prompt": "\u2200x (Musician(x) \u2227 \u00acFamous(x) \u2192 \u00acMakeMoney(x))", "completion": "If a musician is not famous, that musician will not make a lot of money."}
{"prompt": "\u2203x (Musician(x) \u2227 Singer(x) \u2228 Writer(x))", "completion": "A musician can be a singer or a writer."}
{"prompt": "\u2200x (Building(x) \u2192 \u00acTall(x))", "completion": "Each building is tall. "}
{"prompt": "\u2200x (Tall(x) \u2192 HasHeight(x))", "completion": "Everything tall has  height."}
{"prompt": "Cat(garfield) \u2227 MainCharacterGarfield(garfield) \u2227 BeOrange(garfield) \u2227 BeFat(garfield) \u2227 LikeLasagna(garfield)", "completion": "A cat named Garfield, which is the main character of the film Garfield, is orange and fat and likes having lasagna. "}
{"prompt": "Pet(garfield, jon) \u2227 Pet(odie, jon) \u2227 ShareHome(garfield, odie)", "completion": "Garfield and Odie, who is another pet of Jon, share the same home. "}
{"prompt": "Hate(garfield, odie)", "completion": "Garfield hates Odie."}
{"prompt": "\u2200x \u2200y \u2203z (Pet(x, z) \u2227 Pet(y, z) \u2227 Hate(x, y) \u2192 BeChildish(x) \u2227 BePossessive(x))", "completion": "A pet who hates the pet with whom he shares the same owner is childish and possessive."}
{"prompt": "\u2200x \u2203y (Cat(x) \u2192 Pet(x, y))", "completion": "Cats are pets. "}
{"prompt": "\u2200x (Human(x) \u2192 Eat(x))", "completion": "All humans eat."}
{"prompt": "\u2200x (Eat(x) \u2192 \u00acPlant(x))", "completion": "If something eats, then it is not a plant."}
{"prompt": "\u2200x (Plant(x) \u2228 Animal(x))", "completion": "A thing is either plant or animal."}
{"prompt": "\u2200x (Goat(x) \u2192 Animal(x))", "completion": "All goats are animals."}
{"prompt": "\u2200x (Dirt(x) \u2192 \u00acAnimal(x))", "completion": "No dirt is an animal."}
{"prompt": "Goat(hulu) \u2228 Human(hulu)", "completion": "Hulu is a goat or a human."}
{"prompt": "\u2200x (ControlledSubstances(x) \u2192 Drugs(x))", "completion": "A controlled substance is a drug."}
{"prompt": "\u2203x \u2203x (ControlledSubstances(x) \u2227 ControlledSubstances(y) \u2227 Beneficial(x) \u2227 Harmful(y))", "completion": "There exist both harmful and beneficial controlled substances."}
{"prompt": "\u2200x \u2200y (ExposedToControlledSubstance(x, y) \u2192 ChemicalEndangerment(x))", "completion": "If a child is exposed to a controlled substance, he or she is in chemical endangerment."}
{"prompt": "\u2200x (ChemicalEndangerment(x) \u2192 Harmful(x))", "completion": "Chemical Endangerment is harmful. "}
{"prompt": "PassedIn(controlledSubstancesAct, year1971) \u2227 Act(controlledSubstancesAct)", "completion": "The Controlled Substances Act was an act passed in 1971."}
{"prompt": "\u2203x (Act(x) \u2227 PreventsHarm(x))", "completion": "Some Acts prevent harmful things."}
{"prompt": "\u2200x (WorkAtCorporateJobs(x) \u2192 \u00acStartingANewCompany(x))", "completion": "No people who work at corporate jobs are starting a new company."}
{"prompt": " \u2200x (Entrepreneurs(x) \u2192 StartingANewCompany(x))", "completion": "All entrepreneurs are starting a new company."}
{"prompt": " \u2200x (Risk-averse(x) \u2192 WorkAtCorporateJobs(x))", "completion": "All risk-averse people are people who work at corporate jobs."}
{"prompt": " \u2200x (HateWorkingForOthers(x) \u2192 Entrepreneurs(x))", "completion": "All people who hate working for others are entrepreneurs."}
{"prompt": " \u00acEntrepreneurs(markZuckerberg) \u2228 \u00acHateWorkingForOthers(markZuckerberg) \u2192 \u00acRisk-averse(markZuckerberg)", "completion": "If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person."}
{"prompt": "\u2200x (Kitchen(x) \u2192 Up(x) \u2295 Down(x))", "completion": "There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen."}
{"prompt": "(Cook(downstairs) \u2227 \u00acRun(ac)) \u2192 Smokey(firstFloor)", "completion": "When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running."}
{"prompt": "(Cook(downstairs) \u2227 Run(ac)) \u2192 Smokey(secondFloor)", "completion": "If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor."}
{"prompt": "Locate(nyc, usa)", "completion": "New York City is Located in the United States of America."}
{"prompt": "Locate(usa, northAmerica)", "completion": "United States of America is part of North America."}
{"prompt": "Locate(northAmerica, westHemisphere)", "completion": "North America is in the western hemisphere of the earth."}
{"prompt": "HighlyDeveloped(nyc)", "completion": "New York City is a highly developed city."}
{"prompt": "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))", "completion": "If place A is located in place B and place B is located in place C, then place A is located in place C."}
{"prompt": "Poem(callus4) \u2227 WrittenBy(callus4, catullus) \u2227 Roman(catullus)", "completion": "Callus 4 is a poem that was written by the ancient Roman writer Catullus."}
{"prompt": "RetirementShip(callus4)", "completion": "Callus 4 is a story about the retirement of a well-traveled ship."}
{"prompt": "Poem(callus4) \u2192 AgingAnalogy(callus4)", "completion": "There is a strong analogy of human aging in the poem Callus 4."}
{"prompt": "Poem(callus4) \u2192 Lambic(callus4) \u2227 Waves(callus4)", "completion": "Callus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves."}
{"prompt": "TVSeries(westworld) \u2227 American(westworld) \u2227 ScienceFictionThriller(westworld)", "completion": "Westworld is an American science fiction-thriller TV series."}
{"prompt": "Debut(westworld, year2016)", "completion": "In 2016, a new television series named Westworld debuted on HBO."}
{"prompt": "\u2203x (Adapt(westworld, x) \u2227 Produce(x, year1973) \u2227 Write(michael, x) \u2227 Direct(michael, x))", "completion": "The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton."}
{"prompt": "About(westworld, robots)", "completion": "The 1973 film Westworld is about robots that malfunction and begin killing the human visitors."}
{"prompt": "HeldIn(summer2008olympics, beijingchina)", "completion": "The 2008 Summer Olympics were held in Beijing, China."}
{"prompt": "SecondToBe(summer2008olympics, heldincommuniststate)", "completion": "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state."}
{"prompt": "Won(china, mostgoldmedals)", "completion": "China won the most gold medals (48) in the 2008 Summer Olympics."}
{"prompt": "Placed(unitedstates, secondingoldmedals) \u2227 Won(unitedstates, highestnumberofmedals)", "completion": "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics."}
{"prompt": "Placed(russia, thirdingoldmedals)", "completion": "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics."}
{"prompt": "\u2200x \u2200y (Placed(x, thirdingoldmedals) \u2227 Won(y, mostgoldmedals) \u2192 FewerGoldMedalsThan(x, y))", "completion": "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals."}
{"prompt": "\u2203x (Country(x) \u2227 Won(x, medal))", "completion": "87 countries won at least one medal during the 2008 Games."}
{"prompt": "DistrictIn(xiufeng, guilin) \u2227 DistrictIn(xiangshan, guilin) \u2227 DistrictIn(diecai, guilin) \u2227 DistrictIn(qixing, guilin) \u2227 City(guilin)", "completion": "Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin."}
{"prompt": "\u00acDistrictIn(yangshuo, guilin)", "completion": "Yangshuo is not a district in Guilin. "}
{"prompt": "\u2200x (Garden(x) \u2192 Space(x))", "completion": "All people who grow their own fresh vegetables in their home garden also have ample space."}
{"prompt": "\u2200x (Professional(x) \u2192 \u00acSpace(x))", "completion": "If people are young working professionals who live in large cities, then they do not have ample space."}
{"prompt": "\u2200x (Takeout(x) \u2192 Garden(x))", "completion": "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden."}
{"prompt": "\u2200x (GoingOut(x) \u2192 Takeout(x))", "completion": "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often."}
{"prompt": "\u2200x (Homecooked(x) \u2192 GoingOut(x))", "completion": "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. "}
{"prompt": "Garden(michael) \u2228 Homecooked(michael)", "completion": "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food."}
{"prompt": "\u2200x (Company(x) \u2192 GoogleHome(x))", "completion": "All devices belonging to the company are connected to Google Home. "}
{"prompt": "\u2200x (Employee(x) \u2192 Wifi(x))", "completion": "All devices belonging to employees are connected to the company's wifi. "}
{"prompt": "\u2200x (GoogleHome(x) \u2192 Controlled(x))", "completion": "All devices connected to Google Home are controlled by the managers. "}
{"prompt": "\u2200x (Wifi(x) \u2192 EasyToOperate(x))", "completion": "All devices that connect to the company's wifi are easy to operate. "}
{"prompt": "Employee(iPod1)", "completion": "IPod1 belongs to employees. "}
{"prompt": "\u2200x (Orchestra(x) \u2192 \u00acTouring(x))", "completion": "No touring musicians are permanent members of an orchestra."}
{"prompt": "\u2200x (Orchestra(x) \u2295 Unique(x))", "completion": "Musicians are either permanent members of an orchestra or have a unique musical voice or style."}
{"prompt": "\u2200x (Unique(x) \u2192 Interesting(x))", "completion": "All musicians who have a unique musical voice or style are interesting as individual performers."}
{"prompt": "\u2200x (Interesting(x) \u2192 Capable(x))", "completion": "All musicians who are interesting as individual performers are capable of attracting large audiences."}
{"prompt": "(Interesting(ryan) \u2227 Unique(ryan)) \u2192 \u00ac(Touring(ryan) \u2295 Capable(ryan))", "completion": "If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences."}
{"prompt": "\u2200x (Yell(x) \u2192 \u00acCool(x))", "completion": "If someone yells, then they are not cool."}
{"prompt": "\u2200x (Angry(x) \u2192 Yell(x))", "completion": "If someone is angry, then they yell."}
{"prompt": "\u2200x (Fly(x) \u2192 Cool(x))", "completion": "If someone flies, then they are cool."}
{"prompt": "\u2200x (KnowMagic(x) \u2192 Fly(x))", "completion": "Every person that knows magic can fly."}
{"prompt": "\u2200x (Wizard(x) \u2192 KnowMagic(x))", "completion": "All wizards know magic."}
{"prompt": "(Yell(harry) \u2227 Fly(harry)) \u2295 (\u00acYell(harry) \u2227 \u00acFly(harry))", "completion": "Harry either yells and flies, or neither yells nor flies."}
{"prompt": "Wizard(potter) \u2227 Fly(potter)", "completion": "Potter is a wizard and flies."}
{"prompt": "\u2200x (China(x) \u2295 US(x))", "completion": "Products are either produced in China or the US. "}
{"prompt": "\u2200x (China(x) \u2192 Labeled(x))", "completion": "All produced in China are labeled. "}
{"prompt": "\u2200x (US(x) \u2192 SoldInUS(x))", "completion": "All produced in the US are sold in the US. "}
{"prompt": "\u2200x (Labeled(x) \u2192 Cheaper(x))", "completion": "If labeled, then the product is cheaper. "}
{"prompt": "\u2200x (SoldInUS(x) \u2192 SoldInWalmart(x))", "completion": "All sold in the US are sold in Walmart. "}
{"prompt": "\u2200x (DisplayedInHomepage(x) \u2192 SoldInWalmart(x))", "completion": "All displayed on the homepage are sold in Walmart. "}
{"prompt": "\u2200x (ReturnedByCustomer(x) \u2192 \u00acSoldInWalmart(x))", "completion": "No products returned by customers are sold in Walmart. "}
{"prompt": "\u00ac(DisplayedInHomepage(g910) \u2295 Cheaper(g910))", "completion": "G-910 is either displayed on the homepage or cheaper."}
{"prompt": "\u2200x (Amazon(x) \u2295 Environmental(x))", "completion": "People either order a lot of Amazon packages or are environmentally conscious."}
{"prompt": "\u2200x (Amazon(x) \u2192 DailyMail(x))", "completion": "If people order a lot of Amazon packages, then they get a lot of daily mail delivered."}
{"prompt": "\u2200x (Environmental(x) \u2192 Solar(x))", "completion": "If people are environmentally conscious, then they have solar panels in their homes."}
{"prompt": "\u2200x (DailyMail(x) \u2192 Neighborhood(x))", "completion": "If people get a lot of daily mail delivered, then they are very involved with their neighborhood."}
{"prompt": "\u2200x (Solar(x) \u2192 SaveMoney(x))", "completion": "If people have solar panels in their homes, then they save a lot of money."}
{"prompt": "\u00ac(DailyMail(marcy) \u2295 Neighborhood(marcy)) \u2192 (\u00acDailyMail(marcy) \u2228 \u00acAmazon(marcy))", "completion": "If Marcy either gets a lot of mail and is very involved with her neighborhood or if she does not order a lot of Amazon packages nor is very involved with her neighborhood, then Marcy does not both get a lot of daily mail and order a lot of Amazon packages. "}
{"prompt": "Country(indonesia)", "completion": "Indonesia is a country."}
{"prompt": "\u2203x \u2203y (Country(indonesia) \u2227 Prosecutor(x) \u2227 Crime(y) \u2192 InvestigatePersonally(x, y))", "completion": "In Indonesia, the prosecutor only personally investigates cases of some special crimes."}
{"prompt": "Crime(corruption)", "completion": "Corruption is a type of crime."}
{"prompt": "\u2200x \u2200y (Crime(y) \u2227 PoliceCompInves(y) \u2227 Prosecutor(x) \u2192 Evidence(y) \u2227 HandToProsecutor(x, y))", "completion": "Once the police complete investigations of a crime, they hand the evidence to the prosecutor. "}
{"prompt": "\u2200x (Crime(x) \u2227 Evidence(x) \u2227 (Satisfactory(x) \u2295 Unsatisfactory(x)))", "completion": "Evidence can be either satisfactory or unsatisfactory."}
{"prompt": "\u2200x \u2200y (Evidence(y) \u2227 HandToProsecutor(x, y) \u2227 Satisfactory(y) \u2192 ProsecuteTheOffender(x, y))", "completion": "If the police hand the evidence to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court."}
{"prompt": "\u2200x (BatteryPoweredWatch(x) \u2192 \u00acAutomaticWatch(x))", "completion": "No watch that is battery-powered is automatic."}
{"prompt": "\u2200x (DigitalWatch(x) \u2192 BatteryPoweredWatch(x))", "completion": "All digital watches are battery-powered."}
{"prompt": "\u2203x (MechanicalWatch(x) \u2227 AutomaticWatch(x))", "completion": "Some mechanical watches are automatic."}
{"prompt": "\u2200x (SmartWatch(x) \u2192 DigitalWatch(x))", "completion": "All smart watches are digital."}
{"prompt": "\u00acDigitalWatch(moonwatch) \u2295 AutomaticWatch(moonwatch)", "completion": "Moonwatch is not a digital watch or an automatic."}
{"prompt": "\u2200x (People(x) \u2227 DistinguishCondiments(x) \u2192 UseDiffCondiments(x)) \u2227 (\u2203x (People(x) \u2227 \u00acDistinguishCondiments(x) \u2227 UseDiffCondiments(x))) \u2227 \u00ac(\u2200x (People(x) \u2227 DistinguishCondiments(x)))", "completion": "If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook."}
{"prompt": "\u2200x (People(x) \u2227 TalentCooking(x) \u2192 DistinguishCondiments(x))", "completion": "People who have the talent of cooking can distinguish the taste of different condiments."}
{"prompt": "\u2200x \u2200y (MakeMeal(x, y) \u2227 Delicious(y) \u2227 People(x) \u2192 TalentCooking(x)) ", "completion": "Only people with the talent of cooking can make delicious meals."}
{"prompt": "\u2200x \u2200y (MakeMeal(x, y) \u2227 People(x) \u2227 Popular(y) \u2192 Delicious(y))", "completion": "If the meal is popular at the party, then it is delicious."}
{"prompt": "\u2203x (People(john) \u2227 MakeMeal(john, x) \u2227 Popular(x) \u2227 People(peter) \u2227 \u00acUseDiffCondiments(peter))", "completion": "John can make meals which are popular at the party."}
{"prompt": "\u2200x (EffMonPolicy(x) \u2192 InfControl(x) \u2227 StongCurr(x))", "completion": "Effective monetary policy is possible with successful inflation control and a strong national currency."}
{"prompt": "\u00ac(\u2200x (InfControl(x) \u2227 ExRate(x)))", "completion": "A country cannot simultaneously regulate the exchange rate and successfully control inflation."}
{"prompt": "\u2200x (Embargo(x) \u2192 ExportFall(x))", "completion": "The introduction of an embargo on foreign trade goods in a country leads to a sharp decrease in exports."}
{"prompt": "\u2200x (ExportFall(x) \u2192 \u00acStongCurr(x))", "completion": "If exports fall sharply, the national currency cannot be in this country."}
{"prompt": "\u2200x (ExRate(x) \u2192 StongCurr(x))", "completion": "Regulation of the exchange rate is required to have a strong national currency. "}
{"prompt": "Embargo(russia)", "completion": "There is an embargo on Russian foreign trade goods."}
{"prompt": "\u2200x (VideoGag(x) \u2192 FrenchTelevision(x) \u2227 AirsWeekly(x))", "completion": "Video Gag is a French television series that airs weekly."}
{"prompt": "\u2200x (VideoGag(x) \u2192 ChannelTF1(x))", "completion": "Video Gag airs on the French broadcast channel TF1. "}
{"prompt": "\u2200x (FunnyVideos(x) \u2192 AirsWeekly(x))", "completion": "If viewers send in funny videos to the French broadcast channel, then Video Gag airs them on television."}
{"prompt": "\u2200x (VideoGag(x) \u2192 AirsWeekly(x) \u2227 French(x))", "completion": "All videos aired on Video Gag are in French."}
{"prompt": "\u2200x (Phone(x) \u2192 Thing(x))", "completion": "All phones are things."}
{"prompt": "\u2200x (Cellphone(x) \u2192 Phone(x))", "completion": "All cellphones are phones. "}
{"prompt": "\u2200x (Iphone(x) \u2192 Cellphone(x))", "completion": "All iPhones are cellphones. "}
{"prompt": "\u2200x (Engineer(x) \u2192 Worker(x))", "completion": "All engineers are workers."}
{"prompt": "\u2200x (Worker(x) \u2192 Human(x))", "completion": "All workers are human. "}
{"prompt": "Engineer(jack) \u2295 Worker(jack) ", "completion": "Jack is either an engineer or a worker."}
{"prompt": "Human(jack) \u2295 Phone(jack)", "completion": "Jack is is either a human or a phone."}
{"prompt": "\u2200x (IPhone(x) \u2192 Electronic(x))", "completion": "All iPhones are electronic."}
{"prompt": "\u2203x (Phone(x) \u2227 IPhone(x))", "completion": "Some phones are iPhones."}
{"prompt": "Museum(metropolitanMuseumofArt) \u2227 InNYC(metropolitanMuseumofArt)", "completion": "Metropolitan Museum of Art is a museum in NYC."}
{"prompt": "Museum(whitneyMuseumofAmericanArt) \u2227 InNYC(whitneyMuseumofAmericanArt)", "completion": "Whitney Museum of American Art is a museum in NYC."}
{"prompt": "Museum(museumofModernArt) \u2227 InNYC(museumofModernArt)", "completion": "Museum of Modern Art (MoMA) is a museum if NYC. "}
{"prompt": "Include(metropolitanMuseumofArt, byzantineArt) \u2227 Include(metropolitanMuseumofArt, islamicArt)", "completion": "Metropolitan Museum of Art includes Bytantine and Islamic Art. "}
{"prompt": "Include(whitneyMuseumofAmericanArt, americanArt)", "completion": "Whitney Museum of American Art includes American art."}
{"prompt": "\u2200x (Spanish(x) \u2228 Francophile(x))", "completion": "A person either likes eating cheese or is a francophile."}
{"prompt": "\u2200x (Francophile(x) \u2192 \u00acSpainFav(x))", "completion": "No francophiles are people who like Spain as their favorite country."}
{"prompt": "\u2200x (SpainFav(x) \u2228 Cheese(x))", "completion": "A person likes Spain as their favorite country or likes eating cheese."}
{"prompt": "\u00ac(Cheese(benji) \u2227 Spanish(benji))", "completion": "Benji is not a person who likes eating cheese and a person who studies Spanish."}
{"prompt": "\u00ac(Spanish(benji) \u2228 French(benji)) \u2192 \u00ac(Cheese(benji) \u2295 French(benji))", "completion": "If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French."}
{"prompt": "Village(gasteren) \u2227 Province(drenthe) \u2227 LocatedIn(gasteren, drenthe)", "completion": "Gasteren is village located in the province of Drenthe."}
{"prompt": "Province(drenthe) \u2227 Dutch(drenthe)", "completion": "Drenthe is a Dutch province. "}
{"prompt": "\u2200x (City(x) \u2192 \u00acVillage(x))", "completion": "No cities are villages."}
{"prompt": "\u2203x (Population155(x) \u2227 Village(x) \u2227 LocatedIn(x, drenthe))", "completion": "The population of a village in Drenthe was 155 people."}
{"prompt": "\u2200x ((Mammal(x) \u2227 LayEgg(x)) \u2192 (Platypuses(x) \u2295 Echidnas(x)))", "completion": "The only types of mammals that lay eggs are platypuses and echidnas."}
{"prompt": "\u2200x (Platypuses(x) \u2192 \u00acHyrax(x))", "completion": "Platypuses are not hyrax."}
{"prompt": "\u2200x (Echidnas(x) \u2192 \u00acHyrax(x))", "completion": "Echidnas are not hyrax."}
{"prompt": "\u2200x (Mammal(x) \u2192 \u00acInvertebrate(x))", "completion": "No mammals are invertebrates."}
{"prompt": "\u2200x (Animal(x) \u2192 Invertebrate(x) \u2295 Vertebrate(x))", "completion": "All animals are either vertebrates or invertebrates."}
{"prompt": "\u2200x (Mammal(x) \u2192 Animal(x))", "completion": "Mammals are animals."}
{"prompt": "\u2200x (Hyrax(x) \u2192 Mammal(x))", "completion": "Hyraxes are mammals."}
{"prompt": "\u2200x (Grebes(x) \u2192 LayEgg(x))", "completion": "Grebes lay eggs."}
{"prompt": "\u2200x (Grebes(x) \u2192 (\u00acPlatypuses(x) \u2227 \u00acEchidnas(x)))", "completion": "Grebes are not platypuses and also not echidnas."}
{"prompt": "Singer(bobbyFlynn) \u2227 SongWriter(bobbyFlynn)", "completion": "Bobby Flynn is a singer-songwriter. "}
{"prompt": "Finished7th(bobbyFlynn) \u2227 CompetedOnAustralianIdol(bobbyFlynn)", "completion": "Bobby Flynn finished 7th while competing on Australian Idol."}
{"prompt": "\u2200x (CompetedOnAustralianIdol(x) \u2192 AustralianCitizen(x))", "completion": "Australian Idol competitors are Australian citizens."}
{"prompt": "MadeNationWideTour2007(theOmegaThreeBand) ", "completion": "The Omega Three band made a nationwide tour in 2007."}
{"prompt": "IsMember(bobbyFlynn, theOmegaThreeBand)", "completion": "Bobby Flynn is a member of The Omega Three band."}
{"prompt": "BornIn(bobbyFlynn, queensland)", "completion": "Bobby Flynn was born in Queensland."}
{"prompt": "\u2200x (Protein(x) \u2192 OrganicCompound(x))", "completion": "All proteins are organic compounds."}
{"prompt": "\u2200x (Enzyme(x) \u2192 OrganicCompound(x))", "completion": "All enzymes are organic compounds."}
{"prompt": "American(maggiefriedman) \u2227 Screenwriter(maggiefriedman) \u2227 Producer(maggiefriedman)", "completion": "One American screenwriter and producer is Maggie Friedman."}
{"prompt": "ShowRunnerOf(maggiefriedman, witchesofeastend) \u2227 ExecutiveProducerOf(maggiefriedman, witchesofeastend) \u2227 LifetimeTelevisionSeries(maggiefriedman)", "completion": "Maggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End."}
{"prompt": "Fantasy-Drama(witchesofeastend) \u2227 Series(witchesofeastend)", "completion": "Witches of East End is a fantasy-drama series."}
{"prompt": "Produced(maggiefriedman, eastwick) \u2227 Developed(maggiefriedman, eastwick)", "completion": "Maggie Friedman produced and developed Eastwick."}
{"prompt": "Series(eastwick) \u2227 By(eastwick, abc)", "completion": "Eastwick is a series by ABC."}
{"prompt": "Greek(evangeloseleftheriou) \u2227 ElectricalEngineer(evangeloseleftheriou)", "completion": "Evangelos Eleftheriou is a Greek electrical engineer."}
{"prompt": "WorkedFor(evangeloseleftheriou, ibm) \u2227 WorkedIn(evangeloseleftheriou, zurich)", "completion": "Evangelos Eleftheriou worked for IBM in Zurich."}
{"prompt": "\u2200x \u2200x \u2200z (Company(x) \u2227 WorkedFor(y, x) \u2227 WorkedIn(y, z) \u2192 HasOfficeIn(x, z))", "completion": "If a company has employees working for them somewhere, then they have an office there."}
{"prompt": "Company(ibm)", "completion": "IBM is a company."}
{"prompt": "\u2203x (Song(x) \u2227 By(x, boneym) \u2227 N1GermanSingle(x))", "completion": "Before releasing their single, \"Hooray! Hooray! It's a Holi-Holiday!\", Boney M. had had seven consecutive German #1 singles."}
{"prompt": "Song(hooray) \u2227 HitEurope(hooray)", "completion": "\"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe."}
{"prompt": "Song(hooray) \u2227 \u00acN1GermanSingle(hooray)", "completion": "Nevertheless, \"Hooray! Hooray! It's a Holi-Holiday!\" broke Boney M's streak of consecutive German #1 singles."}
{"prompt": "\u2200x (PeaksBelowN1(x) \u2194 \u00acN1GermanSingle(x))", "completion": "A song that peaks below #1 on the german charts is also a song that is not the #1 single"}
{"prompt": "\u2200x (Chef(x) \u2192 Cook(x))", "completion": "Every chef can cook."}
{"prompt": "\u2203x (\u00acChef(x) \u2227 Cook(x))", "completion": "Some people who aren\u2019t chefs can cook."}
{"prompt": "\u2200x (Cook(x) \u2192 (MakeScrambledEggs(x) \u2227 MakePasta(x)))", "completion": "People who cook can make scrambled eggs and pasta."}
{"prompt": "\u2200x (MakeCookies(x) \u2227 MakeMuffins(x) \u2192 Baker(x))", "completion": "If someone can make cookies and muffins, they are a baker."}
{"prompt": "\u2200x ((Baker(x) \u2227 MakeScrambledEggs(x)) \u2192 MakeGoodBreakfast(x))", "completion": "Bakers who can also make scrambled eggs can make a good breakfast."}
{"prompt": "MakeCookies(luke) \u2227 MakeScrambledEggs(luke) \u2227 MakeMuffins(luke) \u2227 \u00acMakePasta(luke)", "completion": "Luke can make cookies, scrambled eggs, and muffins, but not pasta."}
{"prompt": "\u2203x (Develops(ets, x) \u2227 StandardizedTest(x) \u2227 In(x, unitedstates) \u2227 For(x, k-12andhighereducation))", "completion": "ETS develops various standardized tests primarily in the United States for K-12 and higher education. "}
{"prompt": "\u2203x (Administers(ets, x) \u2227 InternationalTest(x) \u2227 (TOEFL(x) \u2228 TOEIC(x) \u2228 GRE(x) \u2228 SubjectTests(x)))", "completion": "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries."}
{"prompt": "\u2203x (Develops(ets, x) \u2227 AssociatedWith(x, entrytouseducationinstitutions))", "completion": "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. "}
{"prompt": "\u2203x (Develops(ets, x) \u2227 StateWideAssesment(x) \u2227 UsedFor(x, accountabilitytesting))", "completion": "ETS also develops K-12 statewide assessments used for accountability testing in many states."}
{"prompt": "\u2200x (Gelato(x) \u2192 Italy(x))", "completion": "All people who enjoy eating gelato ice cream would enjoy a vacation to Italy."}
{"prompt": "\u2200x (\u00acResist(x))", "completion": "There are no people who can resist the hallmark delectable drinks and desserts that are famed in Italy."}
{"prompt": "\u2200x (Gelato(x) \u2228 Travel(x))", "completion": "People either enjoy eating gelato ice cream or love to travel and vacation often."}
{"prompt": "\u2200x (Europe(x) \u2192 \u00acRegret(x))", "completion": "If people often take study abroad semesters to Europe, then they do not regret their college experiences."}
{"prompt": "\u2200x (Travel(x) \u2192 Europe(x))", "completion": "If people love to travel and vacation often, then they often take study abroad semesters to Europe."}
{"prompt": "(Gelato(robert) \u2227 Travel(robert)) \u2228 (\u00acGelato(robert) \u2227 \u00acTravel(robert))", "completion": "Robert either enjoys eating gelato ice cream and loves to travel and vacation often, or he neither enjoys eating gelato ice cream nor loves to travel and vacation often."}
{"prompt": "\u2200x (StudentVisa(x) \u2192 FullTimeAcademic(x))", "completion": "To get a student visa, you must be full-time enrolled in an academic program."}
{"prompt": "\u2200x (FullTimeAcademic(x) \u2192 \u00acWorkFullTime(x))", "completion": "Those who are full-time enrolled in an academic program can not work full-time."}
{"prompt": "\u2200x (StudyAbroad(x) \u2192 StudentVisa(x))", "completion": "Everyone who wants to study abroad needs to have a student visa."}
{"prompt": "\u2200x (PhdGraduate(x) \u2192 WorkFullTime(x))", "completion": "All PhD graduates can work full time. "}
{"prompt": "\u00acStudyAbroad(tom) \u2192 FullTimeAcademic(tom)", "completion": "If Tom does not want to study abroad, he is full-time enrolled in an educational program."}
{"prompt": "\u2200x (UsesGAAP(x) \u2192 UsesInstallmentMethod(x))", "completion": "The installment sales method is the approach to recognize revenue under the US GAAP."}
{"prompt": "\u2200x (UsesAccruralAccounting(x) \u2192 RecognizedWhen(revenues, realized))", "completion": "In accrual accounting, revenues are recognized when they are realized."}
{"prompt": "\u2200x (UsesCashAccounting(x) \u2192 RecognizedWhen(revenues, cashrecieved))", "completion": "In cash accounting, revenues are recognized when cash is received."}
{"prompt": "DevelopedBy(usgaap, ussecuritiesandexchangecommission) \u2227 UsesGAAP(ussecuritiesandexchangecommission)", "completion": "The US GAAP is the accounting standard developed and used by the US Securities and Exchange Commission."}
{"prompt": "WorksFor(sally, ussecuritiesandexchangecommission)", "completion": "Sally works for the US Securities and Exchange Commission."}
{"prompt": "\u2200x (Respected(x) \u2192 ContributeToCountry(x))", "completion": "All people who are respected by others are people who contribute to the country. "}
{"prompt": "\u2200x (Respected(x) \u2192 ContributeToCountry(x))", "completion": "If a person is respected by others, then he/she contributes to the country. "}
{"prompt": "\u2200x (HaveVisitWithoutAnyFees(x) \u2192 Respected(x))", "completion": "All people available to have a visit without any fees are those respected by others. "}
{"prompt": "\u2200x (Army(x) \u2192 HaveVisitWithoutAnyFees(x))", "completion": "All Customers who once served in the army are available to have a visit without any fees. "}
{"prompt": "\u2200x (Thief(x) \u2192 Prison(x))", "completion": "All people who once were sentenced for thief stayed in prison for some time. "}
{"prompt": "\u2200x (Prison(x) \u2192 BadRecord(x))", "completion": "All people who once stayed in prison for some time have a bad record in the local state. "}
{"prompt": "Thief(james) \u2295 Prison(james) ", "completion": "James was either once sentenced for thief or stayed in prison for some time. "}
{"prompt": "BadRecord(james) \u2295 Respected(james)", "completion": "James is either with a bad record in the local state or respected by others. "}
{"prompt": "DrainageBasinOf(crotonriverwatershed, crotonriver)", "completion": "The Croton River watershed is the drainage basin of the Croton River."}
{"prompt": "In(crotonriver, southwesternnewyork)", "completion": "The Croton River is in southwestern New York."}
{"prompt": "\u2203x (Water(x) \u2227 From(x, crotonriverwatershed) \u2227 FlowsTo(x, bronx))", "completion": "Water from the Croton River watershed flows to the Bronx."}
{"prompt": "In(bronx, newyork)", "completion": "The Bronx is in New York."}
{"prompt": "\u2200x (NuclearPoweredSubmarine(x) \u2192 Warship(x))", "completion": "All nuclear-powered submarines are warships."}
{"prompt": "\u2200x (NuclearPoweredSubmarine(x) \u2192 \u00acCommercialVessel(x))", "completion": "No nuclear-powered submarines are commercial vessels."}
{"prompt": "\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 RockBand(y, z) \u2192 Genre(x, rock))", "completion": "If a album is written by a rock band, then the genre of the album is rock."}
{"prompt": "\u2200x \u2200y \u2200z (AlbumByBand(x, y) \u2227 AlbumAward(x, z) \u2192 RockBandAward(y, z))", "completion": "If a band writes a album winning an award, then this band wins this award."}
{"prompt": "AlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)", "completion": "Trouble at the Henhouse is an album by The Tragically Hip."}
{"prompt": "RockBand(the_Tragically_Hip, canada)", "completion": "The Tragically Hip is a Canadian rock band."}
{"prompt": "SongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)", "completion": "The song \"Butts Wigglin'\" is in Trouble at the Henhouse."}
{"prompt": "AlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)", "completion": "Trouble at the Henhouse won the Album of the Year award."}
{"prompt": "\u2203x (SongInFilm(x) \u2227 SongInAlbum(x, trouble_at_the_Henhouse))", "completion": "A song in Trouble at the Henhouse appeared in a film."}
{"prompt": "SoftwareEngineer(daniel) \u2227 WorksAt(daniel, palantirTechnologies)", "completion": "Daniel is a software engineer and he works at Palantir Technologies."}
{"prompt": " StudiedBioengineering(daniel, riceUniversity)", "completion": "Daniel studied bioengineering during his undergraduate at Rice University."}
{"prompt": " WorksAtMeta(danielsOlderSister) \u2227 TechnicalSourcer(danielsOlderSister)", "completion": "Daniel\u2019s older sister works at Meta as a technical sourcer. "}
{"prompt": " GraduatedFromStanfordUniversity(danielsOlderSister) \u2227 GraduatedFromStanfordUniversity(danielsDad)", "completion": "Daniel\u2019s dad and older sister both graduated from Stanford University."}
{"prompt": " DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)", "completion": "Daniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis"}
{"prompt": "\u2200x (CommercialAircraft(x) \u2192 ProducedBy(x, boeing) \u2295 ProducedBy(x, airbus))", "completion": "All commerical aircraft are produced by either Boeing or Airbus."}
{"prompt": "\u2200x (AmericanAirlinesAircraft(x) \u2192 CommercialAircraft(x))", "completion": "All American Airlines jets are commerical aircraft. "}
{"prompt": "MoreinRevenue(airbus, boeing)", "completion": "Airbus made more in revenue than Boeing last year."}
{"prompt": "Island(luzon) \u2227 In(luzon, philippines)", "completion": "Luzon is an island in the Philippines."}
{"prompt": "\u2203x (Earthquake(x) \u2227 StruckIn(x, december1999) \u2227 Struck(x, luzon))", "completion": "In December 1999, an earthquake struck Luzon."}
{"prompt": "\u2203x (Earthquake(x) \u2227 StruckIn(x, december1999) \u2227 Struck(x, luzon) \u2227 Killed(x))", "completion": "People died in the December 1999 earthquake in Luzon."}
{"prompt": "\u2200x (Invests(x) \u2228 Gambling(x))", "completion": "People either invest in the public stock market regularly or enjoy gambling regularly."}
{"prompt": "\u2200x (Invests(x) \u2192 Newspapers(x))", "completion": "If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics."}
{"prompt": "\u2200x (Gambling(x) \u2192 Casinos(x))", "completion": "All people who enjoy gambling regularly spend a lot of money at casinos and other betting games."}
{"prompt": "\u2200x (Casinos(x) \u2192 LasVegas(x))", "completion": "People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly."}
{"prompt": "\u2200x (Casinos(x) \u2192 DisposableIncome(x))", "completion": "People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend."}
{"prompt": "Invests(matt) \u2192 \u00acDisposableIncome(matt) \u2227 \u00acInvests(matt)", "completion": "If Matt invests in the public stock market regularly, then Matt neither has a lot of disposable income to spend nor invests in the public stock market regularly. "}
{"prompt": "\u2200x (Student(x) \u2227 LearningPiano(x) \u2192 StrikeRightNotes(x))", "completion": "All students learning piano can strike the right notes. "}
{"prompt": "\u2200x (Student(x) \u2227 StrikeRightNotes(x) \u2192 GetRhythmRight(x))", "completion": "All students who can strike the right note can get the rhythms right. "}
{"prompt": "\u2200x (Student(x) \u2227 GetRhythmRight(x) \u2192 StartCoordination(x))", "completion": "If a student can get the rhythms right, he will start working on coordination between the left and the right hands. "}
{"prompt": "\u2200x (Student(x) \u2227 StartCoordination(x) \u2192 GoodAtCoordination(x) \u2295 FindCoordinationChallenging(x))", "completion": "Some students who start working on coordination between the left and the right hands become good at it. The other students find it challenging. "}
{"prompt": "StrikeRightNotes(john) \u2227 GetRhythmRight(john) \u2227 GoodAtCoordination(john) \u2192 PutEmotion(john)", "completion": "If John can strike the right notes, get the rhythms right and is good at coordination between right and left hands, then he puts emotions into his playing. "}
{"prompt": "Student(john) \u2227 LearningPiano(john)", "completion": "John is a student learning piano. "}
{"prompt": "\u00acFindCoordinationChallenging(john)", "completion": "John does not find coordination between the left and the right hands challenging. "}
{"prompt": "FormerSwimmer(barbaraannmarshall) \u2227 FormerWorldRecordHolder(barbaraannmarshall)", "completion": "Barbara Ann Marshall is a former swimmer and former world record-holder."}
{"prompt": "ParticipatedIn(barbaraannmarshall, summer1972olympics)", "completion": "Barbara Ann Marshall participated in the 1972 Summer Olympics."}
{"prompt": "HomeCountry(barbaraannmarshall, unitedstates)", "completion": "Barbara Ann Marshall's home country is the United States."}
{"prompt": "\u2200x \u2203y (ParticipatedIn(x, summer1972olympics) \u2227 HomeCountry(x, y) \u2192 Represented(x, y))", "completion": "All people who compete in the 1972 Summer Olympics represent their home country."}
{"prompt": "ParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)", "completion": "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay."}
{"prompt": "\u00acParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)", "completion": "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay."}
{"prompt": "\u2200x ((RelaySwimmer(x) \u2227 \u00acParticipatedIn(x, finalheatfreerelay)) \u2194 \u00acRecieved(x, medal)))", "completion": "Only relay swimmers who participated in the event final received medals."}
{"prompt": "\u2203x (Player(x))", "completion": "A game is played with three stages: red stage, yellow stage, and green stage."}
{"prompt": "\u2200x (Player(x) \u2192 StartRed(x))", "completion": "Each player begins at the red stage."}
{"prompt": "\u2200x (Player(x) \u2192 YellowToGreen(x))", "completion": "All players must reach the yellow stage before they can reach the green stage."}
{"prompt": "\u2200x (Player(x) \u2192 RedToYellow(x))", "completion": "The yellow stage comes after the red stage."}
{"prompt": "\u2200x (Player(x) \u2192 \u00acRedToGreen(x))", "completion": "All players must proceed one stage at a time."}
{"prompt": "\u2200x (Physical(x) \u2228 Words(x))", "completion": "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language."}
{"prompt": "\u2200x (Physical(x) \u2192 GoodWithPets(x))", "completion": "If a person values physical touch as an especially important love language, then they are good with pets."}
{"prompt": "\u2200x (GoodWithPets(x) \u2192 \u00acScaredOfAnimals(x))", "completion": "No people that are good with pets are scared of animals."}
{"prompt": "\u2200x (ScaredOfAnimals(x) \u2228 LoveAnimals(x))", "completion": "People are either scared of animals or love animals."}
{"prompt": "Physical(adam) \u2295 LoveAnimals(adam)", "completion": "Adam is either a person who values physical touch as an especially important love language or a person who loves animals."}
{"prompt": "\u2200x (Bird(x) \u2192 Winged(x))", "completion": "All birds have wings."}
{"prompt": "\u2200x (Winged(x) \u2192 \u00acReptile(x))", "completion": "No animal with wings is a reptile."}
{"prompt": "\u2203x (Fly(x) \u2227 Bird(x))", "completion": "Some animals that fly are birds."}
{"prompt": "\u2200x (Iguana(x) \u2192 Reptile(x))", "completion": "If something is an iguana, then it is a reptile."}
{"prompt": "\u00acIguana(john) \u2295 Bird(john)", "completion": "John is neither an iguana nor a bird."}
{"prompt": "Movie(endGame) \u2227 Released(endGame, year2006)", "completion": "EndGame is a movie released in 2006."}
{"prompt": "Set(endGame, washington)", "completion": "EndGame was set in Washington."}
{"prompt": "FilmedOutside(endGame, washington)", "completion": "EndGame was filmed outside of Washington."}
{"prompt": "\u2203x (FilmedIn(x, newYork))", "completion": "Some movies are filmed in New York."}
{"prompt": "Directed(andyChang, endGame)", "completion": "Andy Chang directed EndGame."}
{"prompt": "From(andyChang, hongKong)", "completion": "Andy Chang is from Hong Kong."}
{"prompt": "RealNum(six) \u2227 RealNum(seven) \u2227 RealNum(eight)", "completion": "Six, seven and eight are real numbers."}
{"prompt": "\u2200x \u2200y (RealNum(x) \u2227 RealNum(y) \u2227 EqualAddOne(x, y) \u2192 Larger(x, y))", "completion": "If a real number equals another real number adding one, the first number is larger."}
{"prompt": "\u2200x \u2200y (Larger(x, y) \u2194 \u00acLarger(y, x))", "completion": "If the number x is larger than number y, then y is not larger than x."}
{"prompt": "EqualAddOne(seven, six)", "completion": "Seven equals six plus one."}
{"prompt": "EqualAddOne(eight, seven)", "completion": "Eight equals seven plus one."}
{"prompt": "Positive(two)", "completion": "Two is positive."}
{"prompt": "\u2200x \u2200y ((Positive(x) \u2227 EqualDouble(y, x)) \u2192 Positive(y))", "completion": "If a number is positive, then the double of it is also positive."}
{"prompt": "EqualDouble(eight, four)", "completion": "Eight is the double of four."}
{"prompt": "EqualDouble(four, two)", "completion": "Four is the double of two."}
{"prompt": "\u2200x (Dog(x) \u2192 NeverTellsTruth(x))", "completion": "A dog never tells the truth."}
{"prompt": "\u2203x (PokerPlayer(x) \u2227 Dog(x))", "completion": "Some poker players are dogs."}
{"prompt": "\u2200x ( Asian(x)\u2192  Human(x))", "completion": "All Asians are human. "}
{"prompt": "\u2200x ( Chinese(x)\u2192  Asian(x))", "completion": "All Chinese are Asian."}
{"prompt": "\u2200x ( Chinese(x) \u2228  British(x))", "completion": "A man is either Chinese or British."}
{"prompt": "\u2200x ( British(x)\u2192  European(x))", "completion": "All British are European. "}
{"prompt": "\u2200x ( Spanish(x)\u2192  European(x))", "completion": "All Spanish are European. "}
{"prompt": "\u2200x ( Indian(x)\u2192 \u00ac European(x))", "completion": "No Indian is European. "}
{"prompt": "( Indian(jesse) \u2227 Human(jesse)) \u2295 (\u00ac Indian(jesse) \u2227 \u00ac Human(jesse))", "completion": "Jessee is either both an Indian and a human, or neither an Indian nor a human."}
{"prompt": "\u2200x (NeverAdmitMistakes(x) \u2192 \u00acGoodTeacher(x))", "completion": "No people who never admit a mistake are good teachers."}
{"prompt": "\u2203x (WellInformed(x) \u2227 NeverAdmitMistakes(x))", "completion": "Some well-informed people are people who never admit a mistake."}
{"prompt": "\u2200x (PhilatelicLit(x) \u2192 (Stamp(x) \u2228 Periodical(x) \u2228 Auction(x) \u2228 Book(x) \u2228 Bibliography(x) \u2228 Background(x)))", "completion": "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material"}
{"prompt": "\u00acStamp(mort)", "completion": "Mort is not a Stamp catalogue."}
{"prompt": "\u00ac(Periodical(mort) \u2228 Auction(mort) \u2228 Bibliography(mort) \u2228 Background(mort))", "completion": "Mort is not a periodical, auction catalogue, bibliography, or background material."}
{"prompt": "PhilatelicLit(mort)", "completion": "Mort is a piece of Philatelic literature."}
{"prompt": "DramaFilm(adventuresofrusty) \u2227 ChildrensFilm(adventuresofrusty)", "completion": "Adventures of Rusty is a drama film and children's film."}
{"prompt": "Produced(columbiapictures, adventuresofrusty)", "completion": "Columbia Pictures produced Adventures of Rusty"}
{"prompt": "Produced(paramount, tintin)", "completion": "Tintin was produced by Paramount."}
{"prompt": "AdventureFilm(tintin)", "completion": "Tintin is an adventure film."}
{"prompt": "ParamountLeaderOf(dengxiaoping, prc)", "completion": "Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC). "}
{"prompt": "PraisedFor(dengxiaoping, reaffirmationofreformprogram) \u2227 PraisedFor(dengxiaoping, reversionofhongkong) \u2227 PraisedFor(dengxiaoping, returnofmacau)", "completion": "Deng Xiaoping was praised for his reaffirmation of the reform program in his Southern Tour of 1992 as well as the reversion of Hong Kong to Chinese control in 1997 and the return of Macau in 1999."}
{"prompt": "PartysSecretaryGeneral(dengxiaoping) \u2227 Under(dengxiaoping, mao) \u2227 VicePremier(dengxiaoping) \u2227 PresidedOver(dengxiaoping, antirightistcampaign) \u2227 LaunchedBy(antirightistcampaign, mao)", "completion": "As the party's Secretary-General under Mao and Vice Premier in he 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao."}
{"prompt": "InstrumentalIn(dengxiaoping, chinaseconomicreconstruction) \u2227 Following(chinaseconomicreconstruction, greatleapforward) \u2227 Disastrous(greatleapforward)", "completion": "Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958\u20131960)."}
{"prompt": "DiedIn(mao, y1976)", "completion": "Mao Zedong died in 1976."}
{"prompt": "GraduallyRoseTo(dengxiaoping, supremepower)", "completion": "After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power."}
{"prompt": "\u2200x (ImaginativeProcess(x) \u2192 ProducedInHumanBrains(x))", "completion": "All imaginative processes are produced in human brains."}
{"prompt": " \u2200x (Science-fiction(x) \u2192 ImaginativeProcess(x)) ", "completion": "All science-fiction is from an imaginative process."}
{"prompt": " \u2200x (Science-fiction(x) \u2228 Fact(x))", "completion": "Either science-fiction or fact. "}
{"prompt": " \u2200x (Fact(x) \u2192 \u00acProvedToBeFalse(x)) ", "completion": "No facts are proven to be false."}
{"prompt": " Science-fiction(dune) \u2228 ProvedToBeFalse(dune)", "completion": "Dune is a science-fiction or proven to be false."}
{"prompt": "\u2200x (Superhero(x) \u2227 American(x) \u2192 (ComeFrom(x, dc universe) \u2295 ComeFrom(x, marvel universe))) ", "completion": "An American superhero comes from either DC universe or Marvel universe."}
{"prompt": " Superhero(captain america) ", "completion": "Captain America is a superhero."}
{"prompt": " American(captain america) ", "completion": "Captain America is an American."}
{"prompt": " \u00acComeFrom(captain america, dc universe) ", "completion": "Captain America does not come from DC universe."}
{"prompt": " \u2200x (Superhero(x) \u2227 American(x) \u2192 Speak(x, english)) ", "completion": "If a superhero is American, he speaks English."}
{"prompt": " \u2200x (Superhero(x) \u2192 (Speak(x, english) \u2228 Speak(x, spanish)))", "completion": "A superhero speaks English or Spanish."}
{"prompt": "BornInGermany(robertZimmer)", "completion": "Robert Zimmer was born in Germany."}
{"prompt": "IsEssayist(robertZimmer)", "completion": "Robert Zimmer is an essayist."}
{"prompt": "BornIn(robertZimmer, year1953)", "completion": "Robert Zimmer was born in 1953."}
{"prompt": "\u2200x (IsEssayist(x) \u2192 IsWriter(x))", "completion": "Every essayist is a writer."}
{"prompt": "\u2200x (BornInGermany(x) \u2192 IsGerman(x))", "completion": "Every person born in Germany is German."}
{"prompt": "\u2200x (Repay(x) \u2192 HighCreditScore(x))", "completion": "All people who repay their loans on time have a high credit score."}
{"prompt": "\u2203x ((HighCreditScore(x) \u2227 HighSalary(x)) \u2192 Mortgage(x))", "completion": "Some people with high credit scores and high salaries are approved for mortgages."}
{"prompt": "HighSalary(john)", "completion": "John has a high salary."}
{"prompt": "\u2200x (Student(x) \u2192 MemberOfUniversity(x))", "completion": "All students are members of the university."}
{"prompt": "\u2200x (GraduateStudent(x) \u2192 Student(x))", "completion": "All graduate students are students."}
{"prompt": "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))", "completion": "All PhD students are graduate students."}
{"prompt": "\u2203x (PhDStudent(x) \u2227 HighIQ(x))", "completion": "Some PhD students have high IQs."}
{"prompt": "\u00acPhDStudent(john) \u2192 \u00acMemberOfUniversity(john)", "completion": "If John is not a PhD student, then he is not a member of the university."}
{"prompt": "HighIQ(john) \u2192 PhDStudent(john) \u2295 GraduateStudent(john)", "completion": "If John has a high IQ, then he is a PhD student or a graduate student."}
{"prompt": "EuropeanCountry(belgium) \u2228 EuropeanCountry(france) \u2228 EuropeanCountry(germany)", "completion": "Belgium, France and Germany are European countries."}
{"prompt": "CapitalOf(paris, france)", "completion": "Paris is the capital of France."}
{"prompt": "TouristAttraction(eiffelTower) \u2227 LocatedIn(eiffelTower, paris)", "completion": "The Eiffel Tower is one of the main tourist attractions located in Paris."}
{"prompt": "\u2203x (LiveIn(x, belgium) \u2192 Speak(x, french))", "completion": "Some people who live in Belgium speak French."}
{"prompt": "\u2203x (GoTo(john, europe) \u2192 (See(john, x) \u2227 TouristAttraction(x)))", "completion": "If John goes to Europe, he will see some tourist attractions."}
{"prompt": "Speak(john, french)", "completion": "John speaks French."}
{"prompt": "\u2200x (SportsCar(x) \u2192 LoudCar(x))", "completion": "All sports cars are loud."}
{"prompt": "\u2200x (LoudCar(x) \u2192 \u00acElectricCar(x))", "completion": "No loud cars are electric."}
{"prompt": "\u2200x (Ferrari(x) \u2192 SportsCar(x))", "completion": "If a car is a Ferrari, then it is a sports car."}
{"prompt": "\u2200x (MadeInMaranello(x) \u2192 Ferrari(x))", "completion": "All cars made in Maranello are Ferrari"}
{"prompt": "\u2200x (\u00acSportsCar(prius) \u2228 \u00acLoudCar(prius) \u2192 MadeInMaranello(prius) \u2228 LoudCar(prius))", "completion": "If Prius is neither a sports car nor a loud car, then Prius is a Maranello-made car or a loud car."}
{"prompt": "\u2200x (Plant(x) \u2192 \u00acCuteAnimal(x))", "completion": "If something is a plant, then it is not a cute animal."}
{"prompt": "\u2200x (Flower(x) \u2192 Plant(x))", "completion": "All flowers are plants."}
{"prompt": "\u2200x (Kitten(x) \u2192 CuteAnimal(x))", "completion": "Every kitten is a cute animal."}
{"prompt": "\u2200x (GrownInGarden(x) \u2192 Flower(x))", "completion": "If something is grown in a garden, then it is a flower."}
{"prompt": "Kitten(piper) \u2228 CuteAnimal(piper)", "completion": "Piper is a kitten or a cute animal."}
{"prompt": "ParticipatedIn(guam, winterolympics)", "completion": "Guam has participated in the Winter Olympics."}
{"prompt": "Year(y1988) \u2192 BeHeld(winterolympics, calgary)", "completion": "In 1988, the Winter Olympics were held in Calgary."}
{"prompt": "BeHeld(winterolympics, calgary) \u2192 SendAthletes(guam)", "completion": "Guam sent an athlete to the Calgary Winter Olympics."}
{"prompt": "SendAthletes(guam) \u2192 ParticipatedIn(guam, winterolympics)", "completion": "If Guan sent an athlete to the Calgary Winter Olympics, then it participated in the Calgary Winter Olympics."}
{"prompt": "BeFrom(bankert, guam) \u2227 ParticipatedIn(bankert, winterolympics)", "completion": "Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics."}
{"prompt": "British(michael) \u2227 Physician(michael) \u2227 Journalist(michael) \u2227 Author(michael) \u2227 Broadcaster(michael)", "completion": "Michael O'Donnell is a British physician, journalist, author and broadcaster."}
{"prompt": "WordSetter(michael)", "completion": "One of the word-setters of My Word! was Michael O'Donnell."}
{"prompt": "Magazine(worldmedicine) \u2227 EditedBy(worldmedicine, michael)", "completion": "The magazine World Medicine was edited by Michael O'Donnell."}
{"prompt": "\u2203x (BornIn(michael, yorkshire) \u2227 Son(michael, x) \u2227 GeneralPractitioner(x))", "completion": "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."}
{"prompt": "\u2200x (Homework(x) \u2192 \u00acIsFun(x))", "completion": "No homework is fun."}
{"prompt": "\u2203x (IsReading(x) \u2227 Homework(x))", "completion": "Some reading is homework."}
{"prompt": "\u2200x ((Violence(x) \u2227 Good(x)) \u2192 Justified(x))", "completion": "If violence is good, it is justified."}
{"prompt": "\u2200x (Justified(x) \u2192 Lawful(x))", "completion": "If something is justified, it is lawful."}
{"prompt": "\u2200x (Ranch(x) \u2192 RegularlyRide(x))", "completion": "All people who have a horse ranch regularly ride horses for pleasure and sport."}
{"prompt": "\u2200x (DisposableIncome(x) \u2192 Ranch(x))", "completion": "All people who have a lot of disposable income have a horse ranch."}
{"prompt": "\u2200x (Compete(x) \u2192 DisposableIncome(x))", "completion": "If people compete in horse dressage shows, then they have a lot of disposable income."}
{"prompt": "\u2200x (Compete(x) \u2192 Invested(x))", "completion": "If people compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment."}
{"prompt": "\u2200x (RegularlyRide(x) \u2192 \u00acCramped(x))", "completion": "If people regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings."}
{"prompt": "(Ranch(manny) \u2227 Cramped(manny)) \u2295 (\u00acRanch(manny) \u2227 \u00acCramped(manny))", "completion": "Manny either has a horse ranch and lives in cramped residential buildings, or he neither has a horse ranch nor lives in cramped residential buildings."}
{"prompt": "\u2200x (Roundel(x) \u2192 Rounded(x) \u2227 ArtilleryFortification(x))", "completion": "A roundel is a rounded artillery fortification."}
{"prompt": "\u2200x \u2200y (Roundel(x) \u2227 AdjacentWall(y) \u2192 \u00acHigher(x, y))", "completion": "A roundel is not higher than adjacent walls. "}
{"prompt": "\u2200x (ArtilleryFortification(x) \u2192 DeployCannons(x))", "completion": "Cannons can be deployed on artillery fortifications. "}
{"prompt": "\u2200x \u2200y (Roundel(x) \u2227 ArtilleryFortification(x) \u2227 ArtilleryFortification(y) \u2192 Older(x, y))", "completion": "Roundels are the oldest artillery fortifications."}
{"prompt": "\u2200x (BatteryTower(x) \u2192 ArtilleryFortification(x))", "completion": "Battery towers are an artillery fortification."}
{"prompt": "\u2200x (Tissue(x) \u2192 Soft(x))", "completion": "All tissues are soft."}
{"prompt": "\u2203x (Paper(x) \u2227 Tissue(x))", "completion": "Some papers are tissues."}
{"prompt": "\u2200x (Volunteer(x) \u2192 GetIntangibleBenefits(x))", "completion": "All volunteers receive intangible benefits for their work."}
{"prompt": "\u2200x (Volunteer(x) \u2192 WorkRegularly(x) \u2228 WorkAsNeeded(x))", "completion": "Volunteers work regularly or on an as-needed basis."}
{"prompt": "\u2203x (Volunteer(x) \u2192 Trained(x))", "completion": "Some volunteers are trained."}
{"prompt": "\u2200x (Volunteer(x) \u2192 (WorkInGroup(x) \u2228 WorkIndividually(x)))", "completion": "Volunteers work in groups or individually."}
{"prompt": "\u2200x (Volunteer(x) \u2227 Environmental(x) \u2192 (ContributeTo(x, environmentalmanagement) \u2228 ContributeTo(x, environmentalconservation)))", "completion": "Environmental volunteers contribute toward environmental management or conservation."}
{"prompt": "\u2203x (Volunteer(x) \u2227 ContributeTo(x, naturaldisasterresponse) \u2192 WorkInGroup(x) \u2227 WorkAsNeeded(x))", "completion": "Participating in natural disaster response is an example of volunteers working in groups on an as-needed basis."}
{"prompt": "\u2200x (Consistent(x) \u2192 NoSurprises(x))", "completion": "All people who are very consistent and enjoy sticking to their regular routines do not like surprises."}
{"prompt": "\u2200x (Flannel(x) \u2192 Consistent(x))", "completion": "If people wear flannel shirts every day, then they are very consistent and enjoy sticking to their regular routines."}
{"prompt": "\u2200x (NoShopping(x) \u2192 Flannel(x))", "completion": "If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day."}
{"prompt": "\u2200x (Old(x) \u2192 NoSurprises(x))", "completion": "All old people living in stable homes do not like surprises."}
{"prompt": "\u2200x (Impulsive(x) \u2192 \u00acNoSurprises(x))", "completion": "If people have very high energy and are impulsive, then they like surprises."}
{"prompt": "\u00ac(NoSurprises(mike) \u2227 Impulsive(mike)) \u2192 Consistent(mike) \u2295 NoSurprises(mike)", "completion": "If Mike is not a person who wears flannel shirts every day and has very high energy and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises."}
{"prompt": "\u2203x (Owns(adam, x))", "completion": "Adam owns cars."}
{"prompt": "\u2203x (Favorite(adam, x))", "completion": "Adam has a favorite car."}
{"prompt": "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 European(x))", "completion": "Among the cars he owns, Adam's favorite car is European."}
{"prompt": "\u2200x ((Owns(adam, x) \u2227 Favorite(adam, x)) \u2192 Broke(adam, x))", "completion": "Adam broke his favorite car."}
{"prompt": "\u2200x (NewHaven(x) \u2192 \u00acHigh(x))", "completion": "No buildings in New Haven are higher than 400 meters. "}
{"prompt": "\u2200x (YaleHousing(x) \u2192 NewHaven(x))", "completion": "All buildings managed by Yale Housing are in New Haven. "}
{"prompt": "\u2200x (Manhattan(x) \u2192 High(x))", "completion": "All buildings in Manhattan are higher than 400 meters. "}
{"prompt": "\u2200x (Bloomberg(x) \u2192 Manhattan(x))", "completion": "All buildings owned by Bloomberg are in Manhattan. "}
{"prompt": "\u2200x (BloombergLogo(x) \u2192 Bloomberg(x))", "completion": "All buildings with the Bloomberg logo are buildings owned by Bloomberg. "}
{"prompt": "\u00ac(NewHaven(towera) \u2295 Manhattan(towera))", "completion": "Tower A is neither in New Haven nor in Manhattan."}
{"prompt": "BloombergLogo(towerb) \u2227 Manhattan(towerb)", "completion": "Tower B is a building with the Bloomberg logo and in Manhattan. "}
{"prompt": "\u2200x (Fish(x) \u2192 \u00acBird(x))", "completion": "No fish are birds."}
{"prompt": "\u2200x (Osprey(x) \u2192 Bird(x))", "completion": "Everything that is an osprey is a bird."}
{"prompt": "\u2200x (Carp(x) \u2192 Fish(x))", "completion": "If something is a carp, then it is a fish."}
{"prompt": "\u2200x (Goldfish(x) \u2192 Carp(x))", "completion": "All goldfish are carp."}
{"prompt": "Osprey(bubbles) \u2295 Carp(bubbles) \u2192 \u00acFish(bubbles)", "completion": "If Bubbles is either an osprey or a goldfish, then Bubbles is not a fish."}
{"prompt": "\u2200x (WantToGo(x) \u2192 (California(x) \u2228 Florida(x)) \u2227 (NeverGo(x)))", "completion": "Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been."}
{"prompt": "\u2200x (((SanFrancisco(x) \u2228 LosAngeles(x) \u2228 SanDiego(x)) \u2227 California(x)) \u2192 WantToGo(x))", "completion": "Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego."}
{"prompt": "\u2200x ((Orlando(x) \u2228 Miami(x)) \u2227 Florida(x)) \u2192 WantToGo(x))", "completion": "Cities in Florida that they are interested in are Orlando and Miami."}
{"prompt": "CaliforniaCityVisited(mr.smith, two)", "completion": "Mr. Smith has been to two cities in California."}
{"prompt": "FloridaCityVisited(mrs.smith, one)", "completion": "Mrs. Smith has been to one city in Florida."}
{"prompt": "\u2200x (Big(x) \u2295 Small(x))", "completion": "Everything is either big or small."}
{"prompt": "\u2200x (Big(x) \u2192 Heavy(x))", "completion": "All big things are heavy. "}
{"prompt": "\u2200x (Small(x) \u2192 Light(x))", "completion": "All small things are light. "}
{"prompt": "\u2200x (Heavy(x) \u2192 Still(x))", "completion": "All heavy things are still."}
{"prompt": "\u2200x (Light(x) \u2192 Unstable(x))", "completion": "All light things are unstable."}
{"prompt": "\u2200x (Unstable(x) \u2192 Changing(x))", "completion": "All unstable things are changing."}
{"prompt": "\u2200x (Unstable(x) \u2192 Kinetic(x))", "completion": "All unstable things are kinetic. "}
{"prompt": "\u00ac(Heavy(bird) \u2227 Still(bird))", "completion": "A bird is not both heavy and still."}
{"prompt": "TelevisionSeries(diRay)", "completion": "DI Ray is a police procedural television series."}
{"prompt": "Create(maya, diRay) \u2227 Write(maya, diRay)", "completion": "DI Ray was created and written by Maya Sondhi."}
{"prompt": "Produce(jed, diRay)", "completion": "DI Ray was produced by Jed Mercurio."}
{"prompt": "British(maya) \u2227 British(jed) ", "completion": "Maya Sondhi and Jed Mercurio are both British."}
{"prompt": "\u2200x (Man(x) \u2192 Human(x))", "completion": "All men are human."}
{"prompt": "\u2200x (Gentleman(x) \u2192 Man(x))", "completion": "All gentlemen are men."}
{"prompt": "\u2200x (Lawyer(x) \u2192 Gentleman(x))", "completion": "All lawyers are gentlemen."}
{"prompt": "\u2200x (Woman(x) \u2192 Human(x))", "completion": "All women are human."}
{"prompt": "\u2200x (Sheep(x) \u2192 \u00acHuman(x))", "completion": "No sheep are human."}
{"prompt": "(\u00acHuman(mike) \u2228 \u00acSheep(mike)) \u2192 Man(mike) \u2295 Human(mike)", "completion": "If Mike is not both a human and a sheep, then Mike is either a man or a human."}
{"prompt": "\u2203x (Defender(x) \u2227 Centerback(x))", "completion": "Some defenders are centerback."}
{"prompt": "NBAPlayer(stephencurry)", "completion": "Stephen Curry is an NBA player."}
{"prompt": "\u2200x \u2200y (Person(x) \u2227 Product(y) \u2227 \u00acHaveEnoughMoneyFor(x, y) \u2192 \u00acBuy(x, y))", "completion": "If a person doesn't have enough money to buy a product, then that person can't buy it."}
{"prompt": "\u2200x (Monitor(x) \u2192 Product(x))", "completion": "Monitors are products."}
{"prompt": "\u2200x \u2200y \u2200z (Monitor(x) \u2227 Monitor(y) \u2227 Monitor(z) \u2227 FourK(x) \u2227 OneOEightO(y) \u2227 TwoK(z) \u2192 MoreExpensive(x, y) \u2227 MoreExpensive(x, z))", "completion": "4k monitors are more expensive than 1080 monitors and 2k monitors."}
{"prompt": "Person(john)", "completion": "John is a person."}
{"prompt": "\u2200x (Monitor(x) \u2227 TwoK(x) \u2192 \u00acHaveEnoughMoneyFor(john, x))", "completion": "John doesn't have enough money to buy a 2k monitor."}
{"prompt": "\u2200x (ArtificialSatellite(x) \u2192 ImportantScientificAchievement(x))", "completion": "All artificial satellites are important scientific achievements."}
{"prompt": "\u2203x (ArtificialSatellite(x) \u2227 \u00acUSInvention(x))", "completion": "Some artificial satellites are not U.S. inventions."}
{"prompt": "\u2203x (Cat(x) \u2227 \u00acPet(x))", "completion": "Some cats are not pets."}
{"prompt": "\u2200x (Cat(x) \u2192 Mammal(x))", "completion": "All cats are mammals."}
{"prompt": "\u2200x (CoffeeShop(x) \u2192 CaffeineAddict(x))", "completion": "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks."}
{"prompt": "\u2200x (CoffeeShop(x) \u2228 Takeout(x))", "completion": "People either visit a coffee shop at least three times a week or order takeout at least once a day."}
{"prompt": "\u2200x (MakeFood(x) \u2192 Takeout(x))", "completion": "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day."}
{"prompt": "\u2200x (KitchenAppliance(x) \u2192 \u00acTakeout(x))", "completion": "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day."}
{"prompt": "\u2200x (Busy(x) \u2192 MakeFood(x))", "completion": "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides."}
{"prompt": "(CaffeineAddict(sam) \u2227 Busy(sam)) \u2295 (\u00acCaffeineAddict(sam) \u2227 \u00acBusy(sam))", "completion": "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours"}
{"prompt": "\u00ac(\u2203x (SoccerPlayer(x) \u2227 ProfessionalBasketballPlayer(x)))", "completion": "No professional basketball players are soccer players."}
{"prompt": "\u2200x (Centerback(x) \u2192 Defender(x))", "completion": "All centerbacks are defenders."}
{"prompt": "\u00ac(NBAPlayer(rogerfederer) \u2295 Defender(rogerfederer))", "completion": "Roger Federer is not an NBA player or a defender."}
{"prompt": "\u2203x (TeacherWorkingAtPool(x) \u2227 \u00acNice(x))", "completion": "Some teachers working at a pool are not nice."}
{"prompt": "\u2200x (TeacherWorkingAtPool(x) \u2192 PoolManager(x))", "completion": "All teachers working at pools are pool managers."}
{"prompt": "\u2200x (PoolManager(x) \u2192 Lifeguard(x))", "completion": "All pool managers are lifeguards."}
{"prompt": "\u2200x (Lifeguard(x) \u2192 WorkAtPool(x))", "completion": "If someone is a lifeguard, then they work at a pool."}
{"prompt": "\u00acWorkAtPool(mary))", "completion": "Mary does not work at a pool."}
{"prompt": "\u2203x (ArtPiece(x) \u2227 \u00acRequiresTalent(x))", "completion": "Not all art pieces require talent."}
{"prompt": "\u2200x (RequiresTalent(x) \u2192 RequiresPractice(x))", "completion": "Everything that requires talent requires practice."}
{"prompt": "Painter(bernardaBrysonShahn) \u2227 Lithographer(bernardaBrysonShahn) ", "completion": "Bernarda Bryson Shahn was a painter and lithographer."}
{"prompt": "BornIn(bernardaBrysonShahn, athensOhio)", "completion": "Bernarda Bryson Shahn was born in Athens, Ohio. "}
{"prompt": "MarriedTo(bernardaBrysonShahn, benShahn)", "completion": "Bernarda Bryson Shahn was married to Ben Shahn."}
{"prompt": "\u2200x (BornIn(x, athensOhio) \u2192 American(x))", "completion": "People born in Athens, Ohio are Americans."}
{"prompt": "\u2200x (Iphone(x) \u2192 \u00acHouse(x))", "completion": "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house."}
{"prompt": "\u2200x (Tech(x) \u2192 Iphone(x))", "completion": "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year."}
{"prompt": "\u2200x (House(x) \u2228 Apartment(x))", "completion": "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities."}
{"prompt": "\u2200x (Roommate(x) \u2192 \u00acPet(x))", "completion": "If people live with at least one roommate then they do not own at least one pet."}
{"prompt": "\u2200x (Apartment(x) \u2192 Roommate(x))", "completion": "All people who own at least one pet live with at least one roommate."}
{"prompt": "\u00ac(Pet(emma) \u2227 Apartment(emma)) \u2192 ((Pet(emma) \u2227 Apartment(emma)) \u2228 (\u00acPet(emma) \u2227 \u00acApartment(emma)))", "completion": "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "}
{"prompt": "\u2200x (OnPayroll(x) \u2192 PaidBySchool(x))", "completion": "If you are on the payroll, then you are being paid by the school."}
{"prompt": "\u2200x (JobAtSchool(x) \u2192 OnPayroll(x))", "completion": "If someone has a job at a school, then they are on the payroll."}
{"prompt": "\u2200x (FacultyMember(x) \u2192 JobAtSchool(x))", "completion": "All faculty members have a job at a school."}
{"prompt": "\u2200x (FacultyMember(x) \u2228 Teacher(x))", "completion": "One can either be a faculty member or a teacher."}
{"prompt": "\u2200x (Teacher(x) \u2192 HasStudents(x))", "completion": "Every teacher has students."}
{"prompt": "Teacher(nancy) \u2192 OnPayroll(nancy)", "completion": "If Nancy is a teacher, then they are on the payroll."}
{"prompt": "\u00acTeacher(nancy) \u2192 \u00acOnPayroll(nancy)", "completion": "If Nancy is not a teacher, then they are not paid by the school."}
{"prompt": "\u2200x (Kangaroo(x) \u2192 Animal(x))", "completion": "Kangaroo is an animal."}
{"prompt": "\u2200x (Kangaroo(x) \u2192 \u00acLiveIn(x, germany))", "completion": "No Kangaroos live in Germany."}
{"prompt": "EnoughMoney(jane) \u2192 FlyTo(jane, germany)", "completion": "If Jane saves enough money for the summer, she will fly to Germany."}
{"prompt": "FlyTo(jane, germany) \u2192 GoTo(jane, berlinzoo) ", "completion": "If Jane flies to Germany, she will go to the Berlin Zoo."}
{"prompt": "\u2200x \u2203y (GoTo(x, berlinzoo) \u2227 Animal(y) \u2192 MaySee(y, x, berlinzoo))", "completion": "If someone goes to the Berlin Zoo, they will see some of the animals that live in Germany."}
{"prompt": "\u2200x \u2200y ((Prereq(x, y) \u2227 Taken(x)) \u2194 CanTake(y))", "completion": "If a class has prerequisites the student must take the prerequisites to take the class."}
{"prompt": "\u2200x \u2200y (\u00acPrereq(x, y) \u2192 CanTake(y))", "completion": "If a class has no prerequisites, then the student can take the class"}
{"prompt": "Prereq(cpsc201, cpsc323) \u2227 Prereq(cpsc223, cpsc323)", "completion": "CPSC 201 and CPSC 223 are prerequisites for CPSC 323."}
{"prompt": "(Prereq(intromicro, intermediatemicro) \u2227 Taken(intromicro)) \u2192 CanTake(intermediatemicro)", "completion": "Intro Microeconomics is the only prerequisite for Intermediate Microeconomics."}
{"prompt": "\u2200x (\u00acPrereq(x, introgeology))", "completion": "Intro Geology has no prerequisites."}
{"prompt": "\u2200x (SevenDistinctWorks(x) \u2192 Heptalogy(x))", "completion": "A heptalogy, is a compound literary or narrative work that is made up of seven distinct works."}
{"prompt": "SevenDistinctWorks(harryPotter)", "completion": "The Harry Potter series consists of 7 distinct works."}
{"prompt": "SevenDistinctWorks(chroniclesofNarnia)", "completion": "The Chronicles of Narnia consists of 7 distinct works."}
{"prompt": "\u2200x (RenaissanceFair(x) \u2192 DressingUp(x))", "completion": "All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing."}
{"prompt": "\u2200x (HistoryRenaissance(x) \u2192 RenaissanceFair(x))", "completion": "If people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly."}
{"prompt": "\u2200x (HistoryRenaissance(x) \u2228 NotAcademics(x))", "completion": "People are either fascinated by the history of the Renaissance and other past eras, or are not nostalgic academics who enjoy learning."}
{"prompt": "\u2200x (Industry(x) \u2192 NotAcademics(x))", "completion": "If people are focused on the future and industry professions, then they are not nostalgic academics who enjoy learning."}
{"prompt": "\u2200x (HistoryProf(x) \u2192 \u00acNotAcademics(x))", "completion": "If people are historical professors who are passionate about their job and subject, then they are nostalgic academics who enjoy learning."}
{"prompt": "\u00acIndustry(clyde) \u2192 \u00ac(Industry(clyde) \u2228 DressingUp(clyde))", "completion": "If Clyde is not focused on the future and industry professions, then he is neither focused on the future and industry professions nor enjoys dressing up in old-fashioned and historical period clothing."}
{"prompt": "\u2200x (SportsCar(x) \u2192 \u00acIntendedToBeDrivenAtModerateSpeeds(x))", "completion": "No sports cars are vehicles intended to be driven at moderate speeds."}
{"prompt": "\u2200x (ForFamilyUse(x) \u2192 IntendedToBeDrivenAtModerateSpeeds(x))", "completion": "All automobiles designed for family use are vehicles intended to be driven at moderate speeds."}
{"prompt": "\u2200x (WorkTeams(x) \u2192 Colleagues(x))", "completion": "If people work well in teams in their workplace, then they get along with all their colleagues at their work."}
{"prompt": "\u2200x (PositiveAttitude(x) \u2192 WorkTeams(x))", "completion": "If people come to work every day with a positive attitude, then they work well in teams in their workplace."}
{"prompt": "\u2200x (PositiveAttitude(x) \u2295 Tired(x)) \u2227 (\u2200x (Tired(x) \u2192 BossPromotions(x)))", "completion": "People either come into work every day with a positive attitude or are always tired every morning."}
{"prompt": "\u2200x (BossPromotions(x) \u2192 \u00acNegativeFeedback(x))", "completion": "If people get many promotions from their boss at work, then they receive negative feedback from teams at work."}
{"prompt": "(WorkTeams(kat) \u2227 Tired(kat)) \u2228 \u00acWorkTeams(kat) \u2227 \u00acTired(kat))", "completion": "Kat is either both a person who works well in teams in their workplace and is always tired every morning, or she neither works well in teams in their workplace nor is always tired every morning."}
{"prompt": "OpenSource(drishti)", "completion": "Drishti is open-source."}
{"prompt": "\u2200x (OpenSource(x) \u2192 ModifyFree(x))", "completion": "Open-source software is free to modify."}
{"prompt": "Grade(a+) \u2228 Grade(a) \u2228 Grade(b+) \u2228 Grade(b) \u2228 Grade(c)", "completion": "There are five grades including A+, A, B+, B, and C in English."}
{"prompt": "\u2200x (GetGrade(x, a+) \u2192 GreaterThan95(x))", "completion": "If a student gets A+ in English, then his score is greater than 95."}
{"prompt": "\u2200x (GetGrade(x, a) \u2192 Range90to95(x))", "completion": "If a student gets A in English, then his score is in the range of 90-95."}
{"prompt": "GetGrade(zhang, a)", "completion": "Zhang got an A in English."}
{"prompt": "Better(wang, zhang)", "completion": "Wang's English score is better than Zhang's."}
{"prompt": "LowerThan90(wu)", "completion": "Wu's English score is lower than 90."}
{"prompt": "\u2200x (Day(x) \u2192 \u00acPrefersWarmAt(olivia, x))", "completion": "Olivia doesn't prefer warm temperature during the day."}
{"prompt": "\u2200x (SleepingDuring(olivia, x) \u2192 PrefersCoolAt(olivia, x))", "completion": "When Olivia sleeps, she prefers cool temperature."}
{"prompt": "\u2200x (SleepingDuring(olivia, x) \u2192 Night(x))", "completion": "Olivia sleeps during the night."}
{"prompt": "\u2200x (WorkingDuring(olivia, x) \u2192 Day(x))", "completion": "Olivia works during the day."}
{"prompt": "\u2200x (WorkingDuring(olivia, x) \u2228 SleepingDuring(olivia, x))", "completion": "Olivia either works or sleeps."}
{"prompt": "\u2200x (Day(x) \u2228 Night(x))", "completion": "The time is either the day or the night."}
{"prompt": "\u2200x (PrefersWarmAt(olivia, x) \u2228 PrefersCoolAt(olivia, x))", "completion": "Olivia either prefers warm temperature or prefers cool temperature."}
{"prompt": "Speech(taylorSwift, nyc)", "completion": "Taylor Swift gives a commencement speech in New York University in 2022."}
{"prompt": "Manhattan(columbiaUniversity) \u2227 Manhattan(nyc)", "completion": "Both Columbia University and New York University are located in Manhattan."}
{"prompt": "HaveAlbum(taylorSwift)", "completion": "Taylor Swift has received three Grammy Album of the Year Awards."}
{"prompt": "IvyLeague(columbiaUniversity)", "completion": "Columbia University is one of the Ivy League schools."}
{"prompt": "\u2200x (PlanA(x) \u2228 PlanB(x))", "completion": "Customers either choose Plan A or Plan B."}
{"prompt": "\u2200x (PlanB(x) \u2192 Award(x))", "completion": "All who choose Plan B are rewarded with a $30 gift card. "}
{"prompt": "\u2200x (\u00acNoPlan(x))", "completion": "There are no customers who do not choose any plans. "}
{"prompt": "\u2200x (Award(x) \u2192 \u00acOlderThan80(x))", "completion": "No customers rewarded a $30 gift card are older than 80."}
{"prompt": "\u2200x (OlderThan80(x) \u2228 StudyAtSchool(x))", "completion": "Customers are either older than 80 or are currently studying at school. "}
{"prompt": "\u00acStudyAtSchool(james)", "completion": "James is not a customer who is currently studying at school. "}
{"prompt": "Horse(detroitcity)", "completion": "Detroit City is a horse."}
{"prompt": "\u2203x (Horse(x) \u2227 Racehorse(x))", "completion": "Some horses are racehorses."}
{"prompt": "\u2200x (Horse(x) \u2227 Racing(x) \u2227 Falls(x) \u2192 Dead(x))", "completion": "If a horse falls during a race, then it dies."}
{"prompt": "Racing(detroitcity) \u2227 Falls(detroitcity)", "completion": "Detroit City fell during a race."}
{"prompt": "\u2200x (Horse(x) \u2227 Racing(x) \u2192 Racehorse(x))", "completion": "A horse is a racehorse if it is in a race."}
{"prompt": "Architect(monhoff) \u2227 Artist(monhoff) \u2227 Illustrator(monhoff)", "completion": "Frederick Monhoff was an architect, artist, and illustrator."}
{"prompt": "American(monhoff)", "completion": "Frederick Monhoff was an American."}
{"prompt": "\u2200x (Artist(x) \u2192 GoodAt(x, painting) \u2228 GoodAt(x, music))", "completion": "An artist is good at painting or music."}
{"prompt": "\u2200x (American(x) \u2192 Speak(x, english))", "completion": "All Americans speak English."}
{"prompt": "Czech(miroslavfiedler) \u2227 Mathematician(miroslavfiedler)", "completion": "Miroslav Fiedler was a Czech mathematician."}
{"prompt": "KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)", "completion": "Miroslav Fiedler is known for his contributions to linear algebra and graph theory."}
{"prompt": "HonoredBy(miroslavfiedler, fiedlerEigenvalue)", "completion": "Miroslav Fiedler is honored by the Fiedler eigenvalue."}
{"prompt": "TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)", "completion": "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian."}
{"prompt": "\u2200x (Laptop(x) \u2192 Computer(x))", "completion": "A laptop is a computer."}
{"prompt": "\u2200x (Computer(x) \u2192 CanPlayGames(x))", "completion": "You can play games on a computer."}
{"prompt": "\u2200x (Phone(x) \u2192 \u00acComputer(x))", "completion": "A phone is not a computer."}
{"prompt": "AmericanPolitician(walterbrown) \u2227 Lawyer(walterbrown) \u2227 ServedAs(walterbrown, postamastergeneral)", "completion": "Walter Folger Brown was an American politician and lawyer, and served as the postmaster general."}
{"prompt": "Graduated(walterbrown, harvard) \u2227 GraduatedWith(walterbrown, bachelorsofart)", "completion": "Walter Folger Brown graduated from Harvard University with a Bachelors of Arts."}
{"prompt": "In(walterbrown, toledo) \u2227 In(walterbrownfather, toledo) \u2227 PracticedLawTogether(walterbrownfather, walterbrown)", "completion": "While they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown."}
{"prompt": "Married(ketherinhafer, walterbrown)", "completion": "Katherin Hafer married Walter Folger Brown."}
{"prompt": "\u2200x (ShipChina(x) \u2192 MadeInChina(x))", "completion": "All products shipped from China are made in China. "}
{"prompt": "\u2200x (SoldJD(x) \u2192 ShipChina(x))", "completion": "All products sold in JD are shipped from China. "}
{"prompt": "\u2200x (CommonlyUsedChina(x) \u2192 SoldJD(x))", "completion": "All products commonly used in China are sold in JD."}
{"prompt": "\u2200x (FavoredByYoungPeople(x) \u2192 CommonlyUsedChina(x))", "completion": "All products favored by young people are commonly used in China. "}
{"prompt": "\u00ac(MadeInChina(macbook) \u2227 CommonlyUsedChina(macbook))", "completion": "MacBook is not made in China and is not commonly used in China."}
{"prompt": "OxfordStreet(oxfordCircus) \u2227 RegentStreet(oxfordCircus)", "completion": "Oxford Circus is a road junction connecting Oxford Street and Regent Street."}
{"prompt": "\u2200x (OxfordStreet(x) \u2192 London(x))", "completion": "Oxford Street is in London."}
{"prompt": "\u2203x (RegentStreet(x) \u2227 Design(johnNash, x))", "completion": "John Nash designed the construction on Regent Street."}
{"prompt": "Design(johnNash, oxfordCircus)", "completion": "John Nash designed Oxford Circus."}
{"prompt": "British(johnNash) \u2227 Architect(johnNash)", "completion": "John Nash is an architect in British."}
{"prompt": "CentralLine(oxfordCircus)", "completion": "Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900."}
{"prompt": "\u2200x (Cat(x) \u2295 Dog(x))", "completion": "An animal is either a cat or a dog."}
{"prompt": "\u2200x (Dog(x) \u2192 Bark(x))", "completion": "All dogs bark."}
{"prompt": "\u2200x (\u00acGhost(x))", "completion": "Ghosts do not exist."}
{"prompt": "\u2200x (Bark(x) \u2192 \u00acAlive(x))", "completion": "If something barks, then it is not alive."}
{"prompt": "\u2200x (Alive(x) \u2295 Dead(x))", "completion": "A thing is either alive or dead."}
{"prompt": "\u00acDead(jojo)", "completion": "Jojo is not dead."}
{"prompt": "\u2200x (Tiger(x) \u2192 Cat(x))", "completion": "All animals that are tigers are cats."}
{"prompt": "\u2200x (Cat(x) \u2192 \u00acDog(x))", "completion": "No cats are dogs."}
{"prompt": "\u2200x (BengalTiger(x) \u2192 Tiger(x))", "completion": "All Bengal tigers are tigers."}
{"prompt": "\u2200x (Husky(x) \u2192 Dog(x))", "completion": "Everything that is a husky is a dog."}
{"prompt": "BengalTiger(fido) \u2228 Cat(fido)", "completion": "Fido is either a Bengal tiger or a cat."}
{"prompt": "\u2200x \u2200y (SummerOlympicsCity(x, y) \u2227 CityInCountry(y, us) \u2192 SummerOlympicsCountry(x, us))", "completion": "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US."}
{"prompt": "\u2200x \u2200y (CityInState(x, y) \u2227 StateInCountry(y, us) \u2192 CityInCountry(x, us))", "completion": "If a city is in a state which is in US, the city is a US city."}
{"prompt": "\u2200x \u2200y \u2200z (CityInState(x, y) \u2227 SummerOlympicsCity(z, x) \u2192 SummerOlympicsState(z, y))", "completion": "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state."}
{"prompt": "SummerOlympicsCity(y2028, la)", "completion": "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA)."}
{"prompt": "CityInState(la, ca)", "completion": "LA is a city in California(CA)."}
{"prompt": "CityInCountry(atlanta, us)", "completion": "Atlanta is a US city."}
{"prompt": "StateInCountry(ca, us)", "completion": "Atlanta is in Georgia(CA)."}
{"prompt": "CityInState(atlanta, ga)", "completion": "CA is a state in the United States."}
{"prompt": "\u00acInSummerOlympics(y2028, boxing) \u2227 \u00acInSummerOlympics(y2028, modern_pentathlon) \u2227 \u00acInSummerOlympics(y2028, weightlifting)", "completion": "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics."}
{"prompt": "SummerOlympicsCity(y1996, atlanta)", "completion": "Atlanta in the United States hold the 1996 Summer Olympics."}
{"prompt": "Vole(taigaVole) \u2227 Find(taigaVole, northAmerica)", "completion": "The taiga vole is a large vole found in northwestern North America. "}
{"prompt": "\u2200x (Vole(x) \u2192 CatLikePlayingWith(x))", "completion": "Cats like playing with all voles."}
{"prompt": "Live(taigaVole, borealTaigaZone)", "completion": "The taiga vole lives in the boreal taiga zone."}
{"prompt": "\u2200x (Find(x, northAmerica) \u2227 Live(x, borealTaigaZone) \u2192 LiveInColdPlace(x))", "completion": "The boreal taiga zone in North America is a cold place to live in."}
{"prompt": "Larger(taigaVole, microtusVole)", "completion": "Taiga vole is typically much larger than most other North American voles, especially those from the genus Microtus."}
{"prompt": "\u2200x (Women(x) \u2228 Men(x)) ", "completion": "Either in women or in men. "}
{"prompt": " \u2200x (Men(x) \u2192 \u00acBreastCancer(x))", "completion": "No men have breast cancer."}
{"prompt": " \u2200x (BreastCancer (x) \u2228 Non-BreastCancer(x)) ", "completion": "Either breast cancer or non-breast cancer. "}
{"prompt": " \u2200x (ATypeOfCancer(x) \u2192 \u00acWithoutTumor (x)) ", "completion": "No type of cancer is without a tumor."}
{"prompt": " \u2200x (Non-BreastCancer(x) \u2192 ATypeOfCancer(x)) ", "completion": "All non-breast cancers are a type of cancer."}
{"prompt": " ATypeOfCancer(adenocarcinoma) \u2228 WithoutTumor(adenocarcinoma) \u2192 women(adenocarcinoma) \u2228 WithoutTumor(adenocarcinoma)", "completion": "If adenocarcinoma is a type of cancer or without a tumor, then adenocarcinoma is in women or without a tumor."}
{"prompt": "\u2203x (Lab(x) \u2227 AOC(x))", "completion": "Some monitors equipped in the lab are produced by the company named AOC. "}
{"prompt": "\u2200x (Lab(x) \u2192 Cheaper(x))", "completion": "All monitors equipped in the lab are cheaper than their original prices. "}
{"prompt": "\u2200x (Cheaper(x) \u2192 A1080p(x))", "completion": "If the monitor is cheaper than its original prices, then its resolution is 1080p. "}
{"prompt": "\u2200x (A1080p(x) \u2192 \u00acTypeC(x))", "completion": "If a monitor is with a resolution of 1080p, then it does not support the type-c port. "}
{"prompt": "Lab(lg-34)", "completion": "LG34 is equipped in the lab.  "}
{"prompt": "\u2200x (SoldBoston(x) \u2192 ShippedFromColumbia(x))", "completion": "All fruits sold in Boston are shipped from Columbia. "}
{"prompt": "\u2203x (SoldNewHaven(x) \u2227 ShippedFromMexico(x))", "completion": "Some fruits sold in New Haven are shipped from Mexico."}
{"prompt": "\u2200x (ShippedFromColumbia(x) \u2192 \u00acSoldNewYork(x))", "completion": "No fruits shipped from Columbia are fruits sold in New York. "}
{"prompt": "SoldNewYork(avocado) \u2228 SoldBoston(avocado)", "completion": "Avocadoe are a kind of fruit sold in New York or New York. "}
{"prompt": "\u00ac(ShippedFromColumbia(avocado) \u2295 SoldNewHaven(avocado))", "completion": "Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. "}
{"prompt": "\u2203x (Library(x) \u2227 AOC(x))", "completion": "Some monitors equipped in the library are produced by AOC. "}
{"prompt": "\u2200x (Library(x) \u2192 Cheap(x))", "completion": "All monitors equipped in the library are cheaper than 800 dollars. "}
{"prompt": "\u2200x (Cheap(x) \u2192 A1080p(x))", "completion": "All monitors cheaper than 800 dollars are with a resolution of 1080p. "}
{"prompt": "\u2200x (A1080p(x) \u2192 \u00acTypeC(x))", "completion": "If a monitor has a resolution of 1080p, then it does not support the type-c port. "}
{"prompt": "TypeC(a-2017)", "completion": "A-2017 supports the type-c port. "}
{"prompt": "Hold(suduva, thelithuaniansupercup)", "completion": "S\u016bduva Marijampol\u0117 holds the Lithuanian Supercup."}
{"prompt": "SoccerTeam(suduva)", "completion": "S\u016bduva Marijampol\u0117 is a soccer team."}
{"prompt": "\u2200x (AinderbyQuernhow(x) \u2192 Village(x) \u2227 CivilParish(x) \u2227 Hambleton(x))", "completion": "Ainderby Quernhow is a village and civil parish in the Hambleton District."}
{"prompt": "\u2200x (Hambleton(x) \u2192 NorthYorkshire(x))", "completion": "Hambleton District is in North Yorkshire."}
{"prompt": "\u2200x (NorthYorkshire(x) \u2192 England(x))", "completion": "North Yorkshire is in England."}
{"prompt": "Author(douglasAdams) \u2227 Book(theSalmonOfDoubt)", "completion": "Douglas Adams is an author who created the book collection called The Salmon of Doubt. "}
{"prompt": "AboutLifeExperience(theSalmonOfDoubt) \u2227 AboutTechnology(theSalmonOfDoubt)", "completion": "The Salmon of Doubt is about life experiences and technology."}
{"prompt": "\u2200x (Author(x) \u2192 Writer(x))", "completion": "All authors are writers."}
{"prompt": "\u2200x (Writer(x) \u2192 CreateInnovativeIdea(x))", "completion": "Writers create innovative ideas."}
{"prompt": "\u2203x (ContainInnovativeIdea(x) \u2227 AboutTechnology(x))", "completion": "Some books that contain innovative ideas are about technology."}
{"prompt": "\u2200x (DisposableProducts(x) \u2192 \u00acHelpSlowDownGlobalWarming(x))", "completion": "No disposable products can help slow down global warming. "}
{"prompt": " \u2200x (Eco-friendlyBrand(x) \u2192 HelpSlowDownGlobalWarming(x))", "completion": "All eco-friendly brands can help slow down global warming. "}
{"prompt": " \u2200x (SustainableFashionBrand(x) \u2192 Eco-friendlyBrand(x))", "completion": "All sustainable fashion brands are eco-friendly brands."}
{"prompt": " \u2200x (FastFashionProducts(x) \u2192 DisposableProducts(x)) ", "completion": "All fast fashion products are disposable products."}
{"prompt": " \u00acHelpSlowDownGlobalWarming(reformation) \u2192 Eco-friendlyBrand(reformation) \u2228 SustainableFashionBrand(reformation)", "completion": "If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand."}
{"prompt": "Cricketeer(royrichardson) \u2227 PlayedFor(royrichardson, sintmaartener) \u2227 ConstituentCountry(sintmaartener)", "completion": "Roy Richardson was a cricketer for Sint Maartener, a consituent country."}
{"prompt": "RightHanded(royrichardson) \u2227 Batsman(royrichardson) \u2227 MediumPaceBowler(royrichardson)", "completion": "Roy Richardson was a right handed batsman and medium pace bowler."}
{"prompt": "Old(royrichardson) \u2227 DebutedIn(royrichardson, cricket)", "completion": "Roy Richardson was old when he debuted in cricket."}
{"prompt": "Dismissed(shervillehuggins, royrichardson)", "completion": "Sherville Huggins dismissed Roy Richardson."}
{"prompt": "\u2200x (Employed(x, google) \u2192 WorkExp(x) \u2228 GoodEduc(x))", "completion": "To get a job at Google, you need to have a lot of work experience or a good education."}
{"prompt": "\u2200x ((Yale(x) \u2227 CV(x, google)) \u2192 Employed(x, google))", "completion": " All Yale graduates who submitted their resumes to Google got jobs there."}
{"prompt": "WorkExp(john)", "completion": " John has a lot of work experience."}
{"prompt": "CV(john, google) \u2227 Employed(john, google)", "completion": " John submitted his resume to Google and got a job there."}
{"prompt": "\u2200x (Student(x) \u2192 \u00acDoctor(x))", "completion": "No students are doctors."}
{"prompt": "\u2200x (TakingClass(x) \u2192 Student(x))", "completion": "All people taking classes are students. "}
{"prompt": "\u2200x (GraduateStudent(x) \u2192 TakingClass(x))", "completion": "All graduate students are people taking classes. "}
{"prompt": "\u2200x (PhDStudent(x) \u2192 GraduateStudent(x))", "completion": "All PhD students are graduate students. "}
{"prompt": "GraduateStudent(joe) \u2295  Doctor(joe) \u2192 \u00ac(GraduateStudent(joe) \u2227 Student(joe))", "completion": "If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student."}
{"prompt": "WorldLeadingLightningDesigner(hughVanstone)", "completion": "Hugh Vanstone is one of the world's leading lighting designers. "}
{"prompt": "FromUK(hughVanstone)", "completion": "Hugh Vanstone is from the UK."}
{"prompt": "LitOver160Productions(hughVanstone)", "completion": "Hugh Vanstone has lit more than 160 productions."}
{"prompt": "AttendedSchoolWhereFrom(hughVanstone)", "completion": "Hugh Vanstone attended school where he is from. "}
{"prompt": "\u2200x (Man(x) \u2192 \u00acFasterThanBolt(x))", "completion": "No man can run faster than Bolt. "}
{"prompt": "\u00acMan(superman) ", "completion": "Superman is not a man."}
{"prompt": "AmericanComputerScientist(donaldErvinKnuth) \u2227 Mathematician(donaldErvinKnuth) \u2227 ProfessorStanford(donaldErvinKnuth)", "completion": "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University."}
{"prompt": "BeCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)", "completion": "Knuth has been called the \"father of the analysis of algorithms\"."}
{"prompt": "FleaBeetle(neocrepidoderacorpulenta) \u2228 Moth(neocrepidoderacorpulenta)", "completion": "Neocrepidodera Corpulentas are flea beetles or moths."}
{"prompt": "Species(neocrepidoderacorpulenta) \u2227 Family(chrysomelidae) \u2227 In(neocrepidoderacorpulenta, chrysomelidae)", "completion": "The species Neocrepidodera Corpulenta is in the Chrysomelidae family."}
{"prompt": "\u2200x (In(x, chrysomelidae) \u2227 Family(chrysomelidae) \u2192 \u00acMoth(x))", "completion": "There are no moths within the Chrysomelidae family."}
{"prompt": "MilaneseCoachbuilderCompany(carrozzeriacolli) \u2227 EstablishedBy(carrozzeriacolli, giuseppecolli) \u2227 EstablishedIn(carrozzeriacolli, y1901)", "completion": "Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931."}
{"prompt": "SpecializedIn(carrozzeriacolli, usingaluminum)", "completion": "Carrozzeria Colli is a company that specialized in using aluminum."}
{"prompt": "\u2200x (FirstAutomobilesBy(x, carrozzeriacolli) \u2192 Racingcar(x))", "completion": "The first automobiles built by Carrozzeria Colli were racing cars."}
{"prompt": "\u2203x (RacingCar(x) \u2227 BuiltBy(x, carrozzeriacolli) \u2227 Used(x, fiat110mechanicals) \u2227 Used(x, chasis))", "completion": "Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis."}
{"prompt": "\u2203x (Airforce(x) \u2227 WorkedFor(carrozzeriacolli, x))", "completion": "Carrozzeria Colli worked for airforces."}
{"prompt": "Made(carrozzeriacolli, carbodies)", "completion": "Carrozzeria Colli made car bodies. "}
{"prompt": "GoToTheCinema(john, today) \u2194 GoToTheCinema(jack, today)", "completion": "John will go to the cinema if and only if Jack goes to the cinema today."}
{"prompt": "GoToTheCinema(jack, today) \u2194 (Movie(ironman) \u2227 \u00acBadWeather(today))", "completion": "Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today."}
{"prompt": "\u2203x (Month(march) \u2192 BadWeather(x))", "completion": "Some days in March have bad weather."}
{"prompt": "Movie(ironman)", "completion": "Iron man is on."}
{"prompt": "Month(march)", "completion": "It's March now."}
{"prompt": "\u2200x (QuiksilverSells(x) \u2192 Sportswear(x) \u2228 Clothing(x) \u2228 Footwear(x) \u2228 Accessory(x))", "completion": "Quiksilver sells sportswear, clothing, footwear, and accessories."}
{"prompt": "Clothing(flannel)", "completion": "Flannels are a type of clothing."}
{"prompt": "\u2203x (QuiksilverSells(x) \u2192 JoeOwns(x))", "completion": "Joe owns an item fron Quiksilver."}
{"prompt": "\u2200x (Nintendo(x) \u2192 \u00acSupportPS4(x))", "completion": "No video games released by Nintendo support the PS4 platform."}
{"prompt": "\u2200x (Pokemon(x) \u2192 Nintendo(x))", "completion": "All video games in the Pokemon series are released by Nintendo. "}
{"prompt": "\u2200x (FIFA(x) \u2192 SupportPS4(x))", "completion": "All video games in the FIFA series support the PS4 platform. "}
{"prompt": "\u2200x (SoccerOnline(x) \u2192 FIFA(x))", "completion": "All video games supporting users to simulate playing soccer games online are in the FIFA series."}
{"prompt": "Pokemon(belionel) \u2295 SoccerOnline(belionel)", "completion": "The video game named \u201cBe Lionel\u201d is in the Pokemon series or supports users to simulate playing football games online."}
{"prompt": "\u2200x (RussianBank(x) \u2192 \u00acApplePay(x))", "completion": "No payment cards issued by Russian banks can be used with ApplePay."}
{"prompt": "\u2200x (Mir(x) \u2192 RussianBank(x))", "completion": "All MIR payment cards are issued by Russian banks."}
{"prompt": "\u2203x (International(x) \u2192 ApplePay(x))", "completion": "Some international payment cards can be used with ApplePay."}
{"prompt": "\u2200x (SocialRussia(x) \u2192 Mir(x))", "completion": "Social payments in Russia can only be transferred to MIR payment cards."}
{"prompt": "ApplePay(boapaymentcards)", "completion": "Bank of America payment cards can be used with ApplePay."}
{"prompt": "Chevrolet(luminaAPV)", "completion": "The Lumina APV is produced by Chevrolet. "}
{"prompt": "Chevrolet(astro) \u2227 Van(astro)", "completion": "The Astro is a van produced by Chevrolet. "}
{"prompt": "\u2200x (Chevrolet(x) \u2192 Car(x) \u2295 Van(x))", "completion": "Cars produced by Chevrolet are either cars or vans."}
{"prompt": "\u2200x (InPerson(x) \u2192 Commuter(x))", "completion": "Everyone who works in person is a commuter."}
{"prompt": "\u2200x (InPerson(x) \u2295 FromHome(x))", "completion": "People either work in person or work from home."}
{"prompt": "\u2200x (FromHome(x) \u2192 Relaxed(x))", "completion": "Everyone who works from home has a relaxed schedule."}
{"prompt": "Commuter(george) \u2295 HomeOffice(george)", "completion": "George is either a commuter or has a home office setup."}
{"prompt": "FromHome(george) \u2295 HomeOffice(george) \u2192 \u00ac(FromHome(george) \u2227 Commuter(george))", "completion": "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter."}
{"prompt": "MusicSupervisor(jasonKramer) \u2227 American(jasonKramer)", "completion": "Jason Kramer is an American music supervisor."}
{"prompt": "\u2203x (American(x) \u2227 MusicSupervisor(x) \u2227 RadioPersonality(x))", "completion": "Some American radio personalities are also music supervisors. "}
{"prompt": "\u2200x (HostShowOnPublicRadioStation(x) \u2192 RadioPersonality(x))", "completion": "Anyone who hosts a show on a public radio station is a radio personality."}
{"prompt": "RadioPersonality(joeRogan)", "completion": "Joe Rogan is a radio personality."}
{"prompt": "HostShowOnPublicRadioStation(jasonKramer)", "completion": "Jason Kramer hosted a show on a public radio station."}
{"prompt": "\u2200x (Walmart(x) \u2192 \u00acFrance(x))", "completion": "No coffee sold in Walmart is produced in France. "}
{"prompt": "\u2200x (Company(x) \u2192 Walmart(x))", "completion": "All coffee supplied by the company is sold in Walmart. "}
{"prompt": "\u2200x (Columbia(x) \u2192 France(x))", "completion": "All coffee produced in Columbia is produced in France. "}
{"prompt": "\u2200x (Favored(x) \u2192 Columbia(x))", "completion": "All coffee favored by local residents is coffee produced in Columbia. "}
{"prompt": "\u2200x (HighPrice(x) \u2192 Favored(x))", "completion": "All coffee with high prices is favored by local residents. "}
{"prompt": "\u00ac(Columbia(civetcoffee) \u2227 HighPrice(civetcoffee))", "completion": "Civet Coffee is not produced in Columbia and is cheap."}
{"prompt": "Walmart(jamaicablue) \u2228 Favored(jamaicablue)", "completion": "Jamaica Blue is sold in Walmart or favored by local residents."}
{"prompt": "\u2200x (Galicia(x) \u2192 Spain(x) \u2295 Poland(x))", "completion": "There are two places named Galicia: either in Spain or in Poland."}
{"prompt": "\u2200x (Spain(x) \u2192 Europe(x))", "completion": "Spain is in Europe."}
{"prompt": "\u2200x (Poland(x) \u2192 Europe(x))", "completion": "Poland is in Europe."}
{"prompt": "\u2200x (RochelleLive(x) \u2192 Europe(x))", "completion": "Rochelle lives in Europe."}
{"prompt": "\u2200x (DominiqueLive(x) \u2192 \u00acEurope(x))", "completion": "Dominique does not live in Europe."}
{"prompt": "\u2200x (AlfonsoLive(x) \u2192 Galicia(x))", "completion": "Alfonso lives in Galicia."}
{"prompt": "BornIn(ralphHammerthaler, wasserburgAmInn)", "completion": "Ralph Hammerthaler was born in Wasserburg am Inn."}
{"prompt": "LocatedIn(wasserbAmInn, germany)", "completion": "Wasserburg am Inn is in Germany."}
{"prompt": "LocatedIn(germany, europe)", "completion": "Germany is in Europe."}
{"prompt": "Writer(ralphHammerthaler)", "completion": "Ralph Hammerthaler is a German writer."}
{"prompt": "BornIn1965(ralphHammerthaler)", "completion": "Ralph Hammerthaler was born in 1965. "}
{"prompt": "\u2200x (WrittenByTomas(x) \u2192 SoldOneMillion(x))", "completion": "All books written by Tomas have sold more than 1 million copies. "}
{"prompt": "\u2203x (WinningHugoAward(x) \u2227 WrittenByTomas(x))", "completion": "Some books that have won Hugo Awards are written by Tomas."}
{"prompt": "\u2200x (AboutFuture(x) \u2192 InspiredFromShakespeare(x))", "completion": "All books about the future are inspired by Shakespeare. "}
{"prompt": "InspiredFromShakespeare(y2001) \u2295 SoldOneMillion(y2001) ", "completion": "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies."}
{"prompt": "SoldOneMillion(y2001) \u2295 WrittenByTomas(y2001)", "completion": "2001 is a book that has either sold more than 1 million copies or it was written by Tomas."}
{"prompt": "\u2200x (Grass(x) \u2192 \u00acFood(x))", "completion": "No grass is food. "}
{"prompt": "\u2200x (Meadow(x) \u2192 Grass(x))", "completion": "All meadows are grass."}
{"prompt": "\u2200x (Edible(x) \u2192 Food(x))", "completion": "All edible things are food. "}
{"prompt": "\u2200x (Fruit(x) \u2192 Edible(x))", "completion": "All fruits are edible."}
{"prompt": "\u2200x (Lemon(x) \u2192 Fruit(x))", "completion": "All lemons are fruit."}
{"prompt": "\u00ac(Edible(grape) \u2227 Lemon(grape))", "completion": "Grapes are not edible and lemons."}
{"prompt": "Grass(banana) \u2228 Fruit(banana)", "completion": "Bananas are grass or fruit."}
{"prompt": "Team(goldenstatewarriors) \u2227 From(goldenstatewarriors, sanfrancisco)", "completion": "The Golden State Warriors are a team from San Francisco."}
{"prompt": "Won(goldenstatewarriors, nbafinals)", "completion": "The Golden State Warriors won the NBA finals."}
{"prompt": "\u2200x (team(x) \u2227 Attending(x, nbafinals) \u2192 HasMoreThan(x, thirtyyearsofhistory))", "completion": "All teams attending the NBA finals have more than thirty years of history."}
{"prompt": "Team(bostonceltics) \u2227 Lost(bostonceltics, nbafinals)", "completion": "Boston Celtics are a team that lost the NBA finals."}
{"prompt": "\u2200x (Team(x) \u2227 Won(x, nbafinals) \u2192 MoreIncome(x))", "completion": "If a team wins the NBA finals, then they will have more income."}
{"prompt": "\u2200x (Won(x, nbafinals) \u2228 Lost(x, nbafinals) \u2192 Attending(x, nbafinals))", "completion": "If a team wins or loses at the NBA finals, then they are attending the finals."}
{"prompt": "CanInjureFingures(maya) \u2192 \u00acWillPlayViolin(maya)", "completion": "Maya will play violin if and only if she never injures her fingers."}
{"prompt": "\u2200x (VolleyballPlayer(x) \u2192 CanInjureFingures(x))", "completion": "Volleyball players can injure their ankle, fingers, or shoulder."}
{"prompt": "VolleyballPlayer(maya)", "completion": "Maya is a volleyball player."}
{"prompt": "\u2200x (InCompany(x) \u2192 GoogleHome(x))", "completion": "All devices belonging to the company are connected to Google Home. "}
{"prompt": "\u2200x (CompanyLogo(x) \u2192 InCompany(x))", "completion": "All devices with the company logo belong to the company. "}
{"prompt": "\u2200x (CompanyLogo(x) \u2228 Employee(x))", "completion": "A device is either with the company logo or belongs to employees. "}
{"prompt": "\u2200x (Employee(x) \u2192 Wifi(x))", "completion": "All devices belonging to employees are available to connect to the company's wifi. "}
{"prompt": "\u2200x (GoogleHome(x) \u2192 ControlledByManager(x))", "completion": "All devices connected to Google Home are controlled by managers. "}
{"prompt": "\u2200x (EasyToOperate(x) \u2192 ProducedAfter2020(x))", "completion": "All devices that are easy to operate are produced after 2020. "}
{"prompt": "\u00acProducedAfter2020(iPod1)", "completion": "IPod1 is produced before 2020. "}
{"prompt": "\u2200x (CDPlayer(x) \u2192 DelicateMechanism(x))", "completion": "All CD players are delicate mechanisms."}
{"prompt": "\u2200x (DelicateMechanism(x) \u2192 \u00acSuitableToyForChildren(x))", "completion": "No delicate mechanisms are suitable toys for children."}
{"prompt": "\u2200x (Mammal(x) \u2192 LivingBeing(x)) ", "completion": "All mammals are living beings."}
{"prompt": "\u2200x (Elephant(x) \u2192 Mammal(x))", "completion": "All elephants are mammals."}
{"prompt": "\u2200x (BabyElephant(x) \u2192 Elephant(x))", "completion": "All baby elephants are elephants."}
{"prompt": "\u2203x (BabyElephant(x) \u2227 Sleepy(x))", "completion": "Some baby elephants are sleepy."}
{"prompt": "LivingBeing(jumbo) \u2192 \u00ac(Elephant(jumbo) \u2228 Mammal(jumbo))", "completion": "If Jumbo is a living being, then Jumbo is not an elephant or a mammal."}
{"prompt": "Sleepy(jumbo) \u2192 BabyElephant(jumbo) \u2228 Mammal(jumbo)", "completion": "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant."}
{"prompt": "\u2200x (Faculty(x) \u2192 \u00acDoesHomework(x))", "completion": "No faculty does homework."}
{"prompt": "\u2200x (Student(x) \u2192 DoesHomework(x))", "completion": "All students do homework."}
{"prompt": "\u2200x (Kid(x) \u2192 Student(x))", "completion": "All kids are students."}
{"prompt": "\u2200x (WorkAtSchool(x) \u2192 Faculty(x))", "completion": "If someone works at a school, then they are faculty."}
{"prompt": "WorkAtSchool(jill) \u2228 DoesHomework(jill) \u2192 WorkAtSchool(jill)", "completion": "If Jill works at a school or is a teacher, then Jill works at a school."}
{"prompt": "\u2200x (MaxListensToClassicalMusic(x) \u2228 MaxListensToRap(x))", "completion": "Either Max listens to classical music or Max listens to rap. "}
{"prompt": "\u2200x (MaxListensToClassicalMusic(x) \u2192 SongsFrom12thCentury(x))", "completion": "All the songs that Max listens to that are classical music are from the 12th century."}
{"prompt": "\u2200x (MaxListensToRap(x) \u2192 SongsFromKanyeWest(x))", "completion": "If the song Max listens to is rap, then the song is from Kanye West. "}
{"prompt": "\u2200x (SongsFromKanyeWest(x) \u2192 SongsFullOfLyrics(x))", "completion": "If a songs is from Kanye West, then the song is full of lyrics. "}
{"prompt": "\u2200x (SongsFullOfLyrics(x) \u2192 NeedToBeWrittenWithWords(x))", "completion": "All songs that are full of lyrics need to be written with words"}
{"prompt": "MaxListensToClassicalMusic(asItWasByHarryStyles) \u2228 SongsFrom12thCentury(asItWasByHarryStyles) \u2192 MaxListensToClassicalMusic(asItWasByHarryStyles) \u2295 SongsFrom12thCentury(asItWasByHarryStyles)", "completion": "If \u201cAs it was\u201d by Harry Styles is classical music that Max listens to or  from the 12th century, then \u201cAs it was\u201d by Harry Styles is either classical music that Max listens to, or the songs are from 12th century."}
{"prompt": "Produce(whiteTown, yourWoman)", "completion": "\"Your Woman\" is a song by British one-man band White Town."}
{"prompt": "Peak(yourWoman, uKSinglesChart)", "completion": "\"Your Woman\" song peaked at No. 1 on the UK Singles Chart."}
{"prompt": "\u2200x \u2200y (Peak(x, y) \u2192 Popular(x))", "completion": "If a song peaked at No.1 at a cetain place, then it was extremely popular."}
{"prompt": "Peak(yourWoman, iceland) \u2227 Peak(yourWoman, isarel) \u2227 Peak(yourWoman, spain)", "completion": "\"Your Woman\" also peaked No. 1 in Iceland, Israel and Spain."}
{"prompt": "\u2200x (Limp(x) \u2192 Medical(x))", "completion": "All people who limp often and regularly have long-term medical issues with underlying causes."}
{"prompt": "\u2200x (Medical(x) \u2192 \u00acSpry(x))", "completion": "If people have long-term medical issues with underlying causes, then they are not often spry and energetic."}
{"prompt": "\u2200x (Spry(x) \u2295 Tired(x)) \u2227 (\u2200x (Tired(x) \u2192 Indoors(x)))", "completion": "People either stay indoors and rest a lot at home or people are often tired and disinterested in their activities."}
{"prompt": "\u2200x (Indoors(x) \u2192 \u00acGym(x))", "completion": "If people stay indoors and rest a lot at home, then they do not visit the gym at least once a day."}
{"prompt": "(Limp(Mark) \u2295 Spry(Mark)) \u2192 Limp(Mark) \u2228 Tired(Mark)", "completion": "If Mark either limps often and regularly or is often spry and energetic, then Mark limps often and regularly or is often tired and disinterested in his activities."}
{"prompt": "\u2200x \u2200y (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 SameScore(x, y) \u2227 During(regularTime) \u2192 PlayExtra(x, y))", "completion": "If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time."}
{"prompt": "\u2200x \u2200y (SoccerTeam(x) \u2227 SoccerTeam(y) \u2227 SameScore(x, y) \u2227 During(regularTime) \u2227 During(extraTime) \u2192 PlayPenalty(x, y))", "completion": "If two soccer teams score the same number of goals in one UCL final during both the regular time and extra time, they need to play the penalty shoot-out."}
{"prompt": "SoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(regularTime)", "completion": "Real Madrid and Atl\u00e9tico Madrid both scored one goal in 2016 UCL final during the regular time."}
{"prompt": "SoccerTeam(realMadrid) \u2227 SoccerTeam(atleticoMadrid) \u2227 SameScore(realMadrid, atleticoMadrid) \u2227 During(extraTime)", "completion": "Real Madrid and Atl\u00e9tico Madrid both scored zero goals in 2016 UCL final during the extra time."}
{"prompt": "BasedOn(system7, uk) \u2227 ElectronicDanceMusicBand(system7)", "completion": "System 7 is a UK-based electronic dance music band."}
{"prompt": "Formed(stevehillage, system7) \u2227 Formed(miquettegiraudy, system7)", "completion": "Steve Hillage and Miquette Giraudy formed System 7."}
{"prompt": "FormerMemberOf(stevehillage, gong) \u2227 FormerMemberOf(miquettegiraudy, gong)", "completion": "Steve Hillage and Miquette Giraudy are former members of the band Gong."}
{"prompt": "\u2200x (ElectronicDanceMusicBand(x) \u2192 Band(x))", "completion": "Electric dance music bands are bands."}
{"prompt": "\u2203x (ClubSingle(x) \u2227 Released(system7, x))", "completion": "System 7 has released several club singles."}
{"prompt": "\u2200x (ClubSingle(x) \u2192 \u00acSingle(x))", "completion": "Club singles are not singles."}
{"prompt": "\u2200x (Model(x) \u2227 Summarization(x) \u2227 OnlyUseInputDocument(x) \u2192 Faithful(x))", "completion": "A summarization model is always faithful if it uses content from the input documents."}
{"prompt": "\u2200x (Model(x) \u2227 Extractive(x) \u2192 Summarization(x))", "completion": "Extractive models are a kind of summarization models."}
{"prompt": "\u2200x (Model(x) \u2227 Extractive(x) \u2192 OnlyUseInputDocument(x))", "completion": "Extractive model can only use content from the input documents."}
{"prompt": "\u2200x Coding(x) \u2192 \u00acStudyingToBeDoctor(x)", "completion": "If people practice coding questions, then they are not studying to go to medical school to become a doctor."}
{"prompt": "\u2200x Industry(x) \u2192 Coding(x)", "completion": "If people want to work in the software engineering industry, then they practice coding questions."}
{"prompt": "\u2200x Healthcare(x) \u2192 StudyingToBeDoctor(x)", "completion": "If people enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor."}
{"prompt": "\u2200x ParentDoctors(x) \u2192 Healthcare(x)", "completion": "If people grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues."}
{"prompt": "\u2200x Study(x) \u2192 ParentDoctors(x)", "completion": "If people study hard, then they grew up with parents who worked as doctors."}
{"prompt": "\u00ac(Healthcare(Robin) \u2228 ParentDoctors(Robin)) \u2192 (Study(Robin) \u2228 ParentDoctors(Robin)) ", "completion": "If Robin neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Robin is either a person who studies hard or grew up with parents who worked as doctors."}
{"prompt": "\u2200x Spa(x) \u2192 \u00acMiserly(x)", "completion": "If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income."}
{"prompt": "\u2200x Miserly(x) \u2228 Frivolous(x)", "completion": "People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out."}
{"prompt": "\u2200x Frivolous(x) \u2192 Luxury(x)", "completion": "If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items."}
{"prompt": "\u2200x Luxury(x) \u2192 Shopping(x)", "completion": "If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time."}
{"prompt": "\u00acMiserly(Jess) \u2192 \u00acLuxury(Jess)", "completion": "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items."}
{"prompt": "Luxury(Jess) \u2295 Miserly(Jess)) \u2192  Luxury(Jess)", "completion": "If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out."}
{"prompt": "AlbumsReleased(phoenix, l6)", "completion": "The indie pop band Phoenix has released 6 albums. "}
{"prompt": "Album(wolfgangamadeusphoenix) \u2227 IsAlbumOf(wolfgangamadeusphoenix, phoenix) \u2227 SoldOver(wolfgangamadeusphoenix, l500000)", "completion": "Phoenix's album \"Wolfgang Amadeus Phoenix\" sold over 500,000 copies. "}
{"prompt": "\u2200x ((Album(x) \u2228 Single(x)) \u2227 SoldOver(x, l500000) \u2192 CertifiedGold(x))", "completion": "A certified gold album or single is one which sold over half a million copies. "}
{"prompt": "Single(l1901) \u2227 From(l1901, wolfgangamadeusphoenix) \u2227 By(l1901, phoenix)", "completion": "\"1901\" is a single from Phoenix's album \"Wolfgang Amadeus Phoenix.\""}
{"prompt": "SoldOver(l1901, l400000)", "completion": "Over 400,000 copies of \"1901\" have been sold. "}
{"prompt": "Superhero(peter) \u2295 Civilian(peter)", "completion": "Peter Parker is a either a superhero or a civilian."}
{"prompt": "Destroyer(hulk)", "completion": "The Hulk is a destroyer."}
{"prompt": "Angry(hulk) \u2192 Wake(hulk)", "completion": "The Hulk wakes up when he is angry."}
{"prompt": "Wake(hulk) \u2192 BreakBridge(hulk)", "completion": "If the Hulk wakes up, then he will break a bridge."}
{"prompt": "God(thor)", "completion": "Thor is a god."}
{"prompt": "Happy(thor) \u2192 BreakBridge(thor)", "completion": "Thor will break a bridge when he is happy."}
{"prompt": "\u2200x (God(x) \u2194 \u00acDestroyer(x))", "completion": "A god is not a destroyer and a destroyer is not a god."}
{"prompt": "Superhero(peter) \u2192 WearUniform(peter)", "completion": "Peter Parker wears a uniform when he is a superhero."}
{"prompt": "\u2200x (\u00acCivilian(peter) \u2194 (Destroyer(x) \u2227 BreakBridge(x)))", "completion": "Peter Parker is not a civilian if and only if a destroyer is breaking a bridge."}
{"prompt": "Happy(thor) \u2192 Angry(hulk)", "completion": "If Thor is happy, the Hulk is angry."}
{"prompt": "\u2200x (Diethylcarbamazine(x) \u2227 Medication(x) \u2227 DiscoveredIn(x, year1947))", "completion": "Diethylcarbamazine is a medication discovered in the year 1947."}
{"prompt": "\u2200x \u2200y (Diethylcarbamazine(x) \u2227 RiverBlindness(y) \u2192 Treats(x, y))", "completion": "Diethylcarbamazine can be used to treat river blindness."}
{"prompt": "\u2200x \u2200y (RiverBlindness(y) \u2227 PreferredTreatment(x, y) \u2192 Ivermectin(x))", "completion": "The only preferred treatment for river blindness is ivermectin."}
{"prompt": "\u2200x (Diethylcarbamazine(x) \u2192 \u00acIvermectin(x))", "completion": "Diethylcarbamazine is not ivermectin."}
{"prompt": "\u2200x (UnivariateAnalysis(x) \u2192 UsesGeneralizedLinearModel(x)) ", "completion": "All univariate analyses use a generalized linear model. "}
{"prompt": " \u2200x (MultivoxelPatternAnalysis(x) \u2192 ImplementingMachineLearningAlgorithms(x))", "completion": "All multivoxel (pattern) analyses are implementing machine learning algorithms."}
{"prompt": " \u2200x (ImplementingMachineLearningAlgorithms(x) \u2192 LearnAndClassifyMultivariateData(x)) ", "completion": "All implementing machine learning algorithms are to learn and classify multivariate data."}
{"prompt": " UsesGeneralizedLinearModel(latentDirichletAllocationModel) \u2228 UnivariateAnalysis(latentDirichletAllocationModel)", "completion": "The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. "}
{"prompt": " \u00acLearnAndClassifyMultivariateData(latentDirichletAllocationModel) \u2192 UsesGeneralizedLinearModel(latentDirichletAllocationModel) \u2227 MultivoxelPatternAnalysis(latentDirichletAllocationModel)", "completion": "If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis."}
{"prompt": "\u2200x (RequiresAMedicalDiagnosis(x) \u2192 LabTestsOrImagingRequired(x)) ", "completion": "If something requires a medical diagnosis, then lab tests or imaging is required. "}
{"prompt": "\u2200x (RareDiseases(x) \u2192 RequiresAMedicalDiagnosis(x))", "completion": "All rare diseases require a medical diagnosis."}
{"prompt": "\u2200x (Mild(x) \u2192 \u00acLabTestsOrImagingRequired(x)) ", "completion": "If something is mild, then no lab tests or imaging is required. "}
{"prompt": "\u2200x (BloodCancer(x) \u2192 RareDiseases(x))", "completion": "All blood cancers are rare diseases."}
{"prompt": "\u2200x (Leukemia(x) \u2192 BloodCancer(x))", "completion": "All Leukemia is blood cancer. "}
{"prompt": "\u00ac(BloodCancer(bladderCancer) \u2295 Leukemia(bladderCancer)) \u2192 Leukemia(bladderCancer)", "completion": "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia."}
{"prompt": "\u2200x (PreciousMetals(x) \u2192 \u00acNotScarce(x))", "completion": "No precious metals aren't scarce."}
{"prompt": " \u2200x (Non-rareEarthMetals(x) \u2192 NotScarce(x)) ", "completion": "All non-rare earth metals are not scarce."}
{"prompt": " \u2200x (Non-rareEarthMetals(x) \u2228 RareEarthMetals(x)) ", "completion": "Either non-rare earth metals or rare earth metals. "}
{"prompt": " \u2200x (RareEarthMetals(x) \u2192 BeUsedForBatteries(x)) ", "completion": "All rare earth metals can be used for batteries."}
{"prompt": " \u2200x (RareEarthMetals(x) \u2192 EssentialForElectricVehicles(x))", "completion": "All rare earth metals are essential for electric vehicles."}
{"prompt": " \u00acNon-rareEarthMetals(lithium) \u2295 \u00acEssentialForElectricVehicles(lithium)", "completion": "Lithium is neither a non-rare earth metal nor essential for electric vehicles."}
{"prompt": "\u2200x (OwnPet(x) \u2192 \u00acTidyHouse(x))", "completion": "If people own at least one pet, then they do not have tidy houses."}
{"prompt": "\u2200x (ChildhoodPet(x) \u2192 OwnPet(x))", "completion": "If people grew up with childhood pets, then they own at least one pet."}
{"prompt": "\u2200x (HireCleaning(x) \u2192 TidyHouse(x))", "completion": "If people hire a maid or cleaning service, then they have tidy houses."}
{"prompt": "\u2200x (Suburbs(x) \u2192 ChildhoodPet(x))", "completion": "If people live in the suburbs, then they have tidy houses."}
{"prompt": "\u00ac(HireCleaning(jack) \u2295 OwnPet(jack))", "completion": "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet."}
{"prompt": "Upright(bottle) \u2295 ToppledOver(bottle)", "completion": "A bottle is either standing upright or toppled over. "}
{"prompt": "\u00acUpright(bottle)", "completion": "The bottle is not upright."}
{"prompt": "\u2200x (Cereal(x) \u2192 BusyMorning(x))", "completion": "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day."}
{"prompt": "\u2200x (YoungChildren(x) \u2192 BusyMorning(x))", "completion": "All young children below the age of ten eat cereal and milk every day for breakfast."}
{"prompt": "\u2200x (YoungChildren(x) \u2295 Committments(x))", "completion": "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for."}
{"prompt": "\u2200x (Committments(x) \u2192 Hardworking(x))", "completion": "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future."}
{"prompt": "\u2200x (Hardworking(x) \u2192 \u00acOrganized(x))", "completion": "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated."}
{"prompt": "(Hardworking(john) \u2227 BusyMorning(john)) \u2295 (\u00acHardworking(john) \u2227 \u00acBusyMorning(john))", "completion": "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day."}
{"prompt": "OfficeIn(ableton, germany)", "completion": "Ableton has an office in Germany."}
{"prompt": "OfficeIn(ableton, usa)", "completion": "Ableton has an office in the USA."}
{"prompt": "\u00acSameCountry(germany, usa)", "completion": "USA and Germany are different countries."}
{"prompt": "\u2200x \u2200y \u2200z (OfficeIn(x, y) \u2227 OfficeIn(x, z) \u2227 \u00acSameCountry(y, z) \u2192 IsMultinationalCompany(x))", "completion": "Any company that has offices in different countries is a multinational company."}
{"prompt": "MakesMusicSoftware(ableton)", "completion": "Ableton makes music software."}
{"prompt": "\u2200x (Swimmer(x) \u2192 GoesUnderwater(x))", "completion": "Every swimmer can go underwater."}
{"prompt": "\u2200x (EatsFishCaughtThemselves(x) \u2192 Swimmer(x))", "completion": "Everyone that eats fish they catch themselves is a swimmer."}
{"prompt": "\u2200x (Penguin(x) \u2192 EatsFishCaughtThemselves(x))", "completion": "Every penguin eats fish they catch themselves."}
{"prompt": "\u2200x (NonFlyingBirdAntartica(x) \u2192 Penguin(x))", "completion": "All nonflying birds in Antarctica are penguins."}
{"prompt": "Penguin(fido) \u2228 Swimmer(fido)", "completion": "Fido is a penguin or a swimmer."}
{"prompt": "\u2200x (Professor(x) \u2192 Teacher(x))", "completion": "All professors are teachers."}
{"prompt": "\u2200x (Researcher(x) \u2192 Professor(x))", "completion": "All researchers are professors."}
{"prompt": "\u2200x (Teacher(x) \u2192 \u00acStudent(x))", "completion": "No teachers are students."}
{"prompt": "\u2200x (Study(x) \u2192 Student(x))", "completion": "All people who study are students."}
{"prompt": "\u00acStudy(leon) \u2295 Researcher(leon)", "completion": "Leon is not studying or a researcher."}
{"prompt": "\u00acStudy(leon) \u2192 Teacher(leon)", "completion": "If Leon is not studying, then Leon is a teacher."}
{"prompt": "\u2200x (Cutman(x) \u2192 Prevent(x, physicalDamage) \u2227 Treat(x, physicalDamage))", "completion": "A cutman is responsible for preventing and treating physical damage to a fighter."}
{"prompt": "\u2200x (Cutman(x) \u2192 Appear(x, boxing) \u2228 Appear(x, kickboxing) \u2228 Appear(x, mixedMartialBout))", "completion": "Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout. "}
{"prompt": "\u2200x (Cutman(x) \u2192 Handle(x, swelling) \u2227 Handle(x, nosebleeds) \u2227 Handle(x, lacerations))", "completion": "Cutmen typically handle swelling, nosebleeds and lacerations. "}
{"prompt": "Cutman(jack)", "completion": "Jack is a cutman."}
{"prompt": "Painting(monaLisa) \u2227 WorldsBestKnown(monaLisa)", "completion": "The Mona Lisa is one of the world's best-known artworks."}
{"prompt": "PaintedBy(monaLisa, leonardodaVinci) \u2227 Portrait(monaLisa)", "completion": "The Mona Lisa is a portrait painted by Leonardo da Vinci."}
{"prompt": "Scientist(leonardodaVinci) \u2227 Painter(leonardodaVinci)", "completion": "Leonardo da Vinci was a scientist and painter."}
{"prompt": "\u2200x (Painting(x) \u2192 (History(x) \u2228 Portrait(x) \u2228 Animal(x) \u2228 Landscape(x) \u2228 StillLife(x)))", "completion": "Painting genres are history, portrait, animal, landscape, and still life."}
{"prompt": "\u2200x (ProfessionalTennisUmpire(x) \u2192 \u00acProfessionalTennisPlayer(x))", "completion": "No professional tennis umpires are professional tennis players."}
{"prompt": "\u2200x (WorldTourPlayer(x) \u2192 ProfessionalTennisPlayer(x))", "completion": "If you are a World Tour player, then you are a professional tennis player."}
{"prompt": "\u2200x (GrandSlamChampion(x) \u2192 WorldTourPlayer(x))", "completion": "All Grand Slam champions are World Tour players."}
{"prompt": "\u2200x (GrandSlamUmpire(x) \u2192 ProfessionalTennisUmpire(x))", "completion": "All Grand Slam umpires are professional tennis umpires."}
{"prompt": "WorldTourPlayer(nadal) \u2228 GrandSlamChampion(nadal)", "completion": "Nadal is a World Tour player or a Grand Slam champion"}
{"prompt": "\u2200x (Buisness(x) \u2192 Sanctioned(x) \u2295 \u00acSanctioned(x))", "completion": "Buisnesses are either sanctioned or unsanctioned."}
{"prompt": "\u2200x (Buisness(x) \u2227 Sanctioned(x) \u2192 Limited(x))", "completion": "Sanctioned buisnesses are limited."}
{"prompt": "\u2200x (Buisness(x) \u2227 \u00acSanctioned(x) \u2192 Free(x))", "completion": "Unsanctioned buisnesses are free."}
{"prompt": "Buisness(crudeoildataexchange) \u2227 \u00acFree(crudeoildataexchange)", "completion": "The Crude Oil Data Exchange is a buisness that isn't free."}
{"prompt": "\u2200x (Depressing(x) \u2192 Sad(x))", "completion": "When something is depressing, it is sad."}
{"prompt": "\u2200x (V(x) \u2192 Depressing(x))", "completion": "V is depressing. "}
{"prompt": "\u2200x (Palstave(x) \u2192 From(x, earlybronzeage) \u2227 Axe(x))", "completion": "Palstaves are a type of early bronze axe."}
{"prompt": "\u2200x \u2200y (Palstave(x) \u2227 Mould(y) \u2192 FoundIn(x, northerneurope) \u2227 FoundIn(x, westerneurope) \u2227 FoundIn(x, south-westerneurope) \u2227 CastIn(x, y))", "completion": "Commonly found in northern, western and south-western Europe, palstaves are cast in moulds."}
{"prompt": "Archeologist(johnevans) \u2227 Popularized(johnevans, termpalstave)", "completion": "John Evans is an archeologist who popularized the term \"palstave\"."}
{"prompt": "\u2200x (Paalstab(x) \u2192 \u00acAxe(x) \u2227 DiggingShovel(x))", "completion": "A paalstab is not an axe, but rather a digging shovel."}
{"prompt": "Japanese(koeitecmo) \u2227 VideoGameHoldingCompany(koeitecmo) \u2227 AnimeHoldingCompany(koeitecmo)", "completion": "Koei Tecmo is a Japanese video game and anime holding company."}
{"prompt": "\u2200x \u2203y (HoldingCompany(x) \u2192 Company(y) \u2227 Holds(x, y))", "completion": "Holding companies hold several companies."}
{"prompt": "Disbanded(tecmo) \u2227 DisbandedIn(tecmo, japan) \u2227 Survived(koei) \u2227 Renamed(koei)", "completion": "Tecmo was disbanded in Japan, while Koei survived, but was renamed."}
{"prompt": "\u2200x (VideoGameHoldingCompany(x) \u2192 HoldingCompany(x))", "completion": "Video game holding companies are holding companies."}
{"prompt": "Accessory(pseyetoy, ps2)", "completion": "The PlayStation EyeToy is a camera accessory for the Playstation 2. "}
{"prompt": "Accessory(pseye, ps3)", "completion": "The PlayStation Eye is a camera accessory for the Playstation 3."}
{"prompt": "Accessory(pscamera, ps4) \u2227 Accessory(pscamera, ps5)", "completion": "The Playstation Camera is a camera accessory for the Playstation 4 and the Playstation 5."}
{"prompt": "\u2200x \u2200y (Accessory(x, y) \u2192 Compatible(x, y))", "completion": "Camera accessory for the system is compatible with that system"}
{"prompt": "\u00acCompatible(pseye, ps2) \u2227 \u00acCompatible(pseye, ps4)\u2227\u00acCompatible(pseye, ps5)\u2227\u00acCompatible(pseyetoy, ps3)\u2227\u00acCompatible(pseyetoy, ps4)\u2227\u00acCompatible(pseyetoy, ps5)", "completion": "Only the Playstation Camera is compatible with more than one system."}
{"prompt": "FootballPlayer(adambuska) \u2227 European(adambuska)", "completion": "Adam Buska is a European football player."}
{"prompt": "\u2200x ((FootballPlayer(x) \u2227 European(x)) \u2192 PlaysAmericanSoccer(x))", "completion": "If a European plays football, they play what Americans call soccer."}
{"prompt": "\u2200x (SoldMillion(x) \u2192 BestSeller(x))", "completion": "If the game has sold more than 1 million copies, then it is on the Best Seller list. "}
{"prompt": "\u2200x (DevelopedByParadox(x) \u2192 SoldMillion(x))", "completion": "All Games developed by Paradox Development Studio sold more than 1 million copies. "}
{"prompt": "\u2203x ((PublishedBefore2010(x) \u2227 SupportLinuxSystem(x)))", "completion": "Some games published before 2010 support the Linux OS system. "}
{"prompt": "\u2200x (BestSeller(x) \u2192 Popular(x))", "completion": "All games on the Best Seller list are popular among young people. "}
{"prompt": "\u00ac(SupportLinuxSystem(fifa21) \u2228 Popular(fifa21))", "completion": "FIFA22 neither supports the Linux OS system nor is it popular among young people."}
{"prompt": "\u2200x (China(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))", "completion": "China is one of BRICS and its economy is emerging."}
{"prompt": "\u2200x (India(x) \u2192 BRICS(x) \u2227 EmergingEconomy(x))", "completion": "India is one of BRICS and its economy is emerging."}
{"prompt": "\u2200x \u2200y (From(x, y) \u2227 China(y) \u2192 Speak(x, chinese))", "completion": "All people from China speak Chinese."}
{"prompt": "\u2200x \u2200y (From(x, y) \u2227 India(y) \u2192 Speak(x, hindi) \u2228 Speak(x, english))", "completion": "All people from India speak Hindi or English."}
{"prompt": "\u2203x \u2203y (From(x, y) \u2227 India(y))", "completion": "There is an Indian."}
{"prompt": "Actor(daveedDiggs) \u2227 FilmProducer(daveedDiggs)", "completion": "Daveed Diggs is an actor and film producer."}
{"prompt": "PlayedTwoRoles(daveedDiggs) \u2227 PlayedIn(daveedDiggs, hamilton) \u2227 Musical(hamilton)", "completion": "Daveed Diggs played two roles in the musical Hamilton."}
{"prompt": "\u2203x (Actor(x) \u2227 PlayedIn(x, hamilton) \u2227 WonBestActorAward(x))", "completion": "One of the actors from Hamilton won the best actor award."}
{"prompt": "\u2200x (Actor(x) \u2227 Played(x, thomasJefferson) \u2192 WonBestActorAward(x))", "completion": "The actor playing Thomas Jefferson won the best actor award."}
{"prompt": "Played(daveedDiggs, thomasJefferson)", "completion": "Daveed Diggs played Thomas Jefferson."}
{"prompt": "\u2200x (Musical(x) \u2192 \u00acFilm(x))", "completion": "Musicals are not films."}
{"prompt": "PolishFootballPlayer(ernestpohl)", "completion": "Ernest Pohl was a Polish football player. "}
{"prompt": "\u2203x (In(x, polishfirstdivision) \u2227 ScoredMoreThan180Goals(x))", "completion": "A football player in the Polish First Division has scored over 180 goals. "}
{"prompt": "ScoredMoreThan180Goals(ernestpohl) \u2227 In(ernestpohl, polishfirstdivision)", "completion": "Ernest Pohl scored more than 180 goals in the Polish First Division. "}
{"prompt": "\u2203x (NamedAfter(gornikzabrze, x) \u2227 FootballPlayer(x) \u2227 From(x, rudaslaska))", "completion": "G\u00f3rnik Zabrze's stadium was named after a soccer player from Ruda \u015al\u0105ska. "}
{"prompt": "From(ernestpohl, rudaslaska)", "completion": "Ernest Pohl is from Ruda \u015al\u0105ska. "}
{"prompt": "PhiladephiaCouncil(annJLand) \u2227 DemocraticParty(annJLand)", "completion": "Ann J. Land was a member of the Philadelphia City Council and was also a member of the Democratic Party."}
{"prompt": "Year(y1980) \u2192 PhiladephiaCouncil(annJLand) \u2227 RunFor(annJLand)", "completion": "Ann J. Land ran unopposed for the Philadephia City Council in 1980."}
{"prompt": "\u2200x (RunFor(x) \u2227 PhiladephiaCouncil(x) \u2192 Elected(x))", "completion": "People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year."}
{"prompt": "Challenger(nutter)", "completion": "Michael Nutter was a political challenger."}
{"prompt": "Year(y1987) \u2192 PhiladephiaCouncil(annJLand) \u2227 RunFor(annJLand) \u2227 Defeated(annJLand, nutter)", "completion": "Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987."}
{"prompt": "WonCup(aberdeen, twentythirteen)", "completion": "Aberdeen won the cup in the 2013 final."}
{"prompt": "WonCup(rangers, twentyfourteen)", "completion": "Rangers won the cup in 2014 final."}
{"prompt": "Different(aberdeen, rangers) \u2227 Different(rangers, aberdeen)", "completion": "Aberdeen and Rangers are different teams."}
{"prompt": "\u2200x \u2200y \u2200z (Different(x, y)  \u2227 WonCup(x, z)  \u2192 \u00acWonCup(y, z))", "completion": "Different teams cannot win the same cup in a given year's final."}
{"prompt": "\u2200x (Working(x) \u2192 Pets(x))", "completion": "All young working professionals who have regular 9-5 jobs also have pets."}
{"prompt": "\u2203x (Manhattan(x) \u2227 Working(x))", "completion": "Some people who live in Manhattan are young working professionals who have regular 9-5 jobs."}
{"prompt": "\u2200x (Pets(x) \u2192 Child(x))", "completion": "All people who have pets are people who have at least one child."}
{"prompt": "\u2200x (Child(x) \u2192 \u00acCar(x))", "completion": "People who do not have at least one child are people who own a sports car."}
{"prompt": "\u00ac(Car(mary) \u2295 Child(mary))", "completion": "Mary either does not own a sports car or, if they do, then they do not have at least one child."}
{"prompt": "\u2200x (BlockDesign(x) \u2228 Event-relatedDesign(x))", "completion": "Either block design or event-related design. "}
{"prompt": "\u2200x (Event-relatedDesign(x) \u2192 BrainImageAcquisition(x))", "completion": "All event-related designs are brain image acquisition."}
{"prompt": "\u2200x (BrainImageAcquisition(x) \u2192 PrecededByDataProcessing(x))", "completion": "All brain image acquisition is preceded by data processing."}
{"prompt": "\u2200x (PrecededByDataProcessing(x) \u2192 \u00acAcquiringData(x))", "completion": "Nothing preceded by data processing acquires data."}
{"prompt": "(Event-relatedDesign(pictureMemory) \u2227 AcquiringData(pictureMemory)) \u2228 (\u00acEvent-relatedDesign(pictureMemory) \u2227 \u00acAcquiringData(pictureMemory))", "completion": "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data."}
{"prompt": "(USNavyShip(usslyon) \u2227 InWWII(usslyon))", "completion": "The USS Lyon was a US Navy ship involved in WWII."}
{"prompt": "\u2200x (InWWII(x) \u2192 (Decommissioned(x) \u2228 InMuseum(x)))", "completion": "All ships involved in WWII are currently decommissioned or in a museum."}
{"prompt": "\u2200x (DisposableChopsticks(x) \u2192 MadeFromTrees(x))", "completion": "All disposable chopsticks are made from trees."}
{"prompt": "\u2203x (EcoFriendly(x))", "completion": "Some chopsticks are eco-friendly."}
{"prompt": "\u2200x (DisposableChopsticks(x) \u2295 Reusable(x)) ", "completion": "Either disposable chopsticks or reusable chopsticks. "}
{"prompt": "\u2200x (MadeFromMetals(x) \u2192 \u00acMadeFromPlastics(x))", "completion": "If chopsticks are made from metals, then they are not made from plastics. "}
{"prompt": "\u2200x (Reusable(x) \u2192 MadeFromMetals(x))", "completion": "All reusable chopsticks are made from metal."}
{"prompt": "\u00ac(MadeFromMetals(chopsticksAtRestaurants) \u2295 MadeFromPlastics(chopsticksAtRestaurants))", "completion": "Chopsticks at restaurants are either made from metals and made from plastics, or neither made from metals nor made from plastics."}
{"prompt": "\u2200x (Lazy(x) \u2192 Unproductive(x))", "completion": "Anything that is lazy is unproductive."}
{"prompt": "\u2200x (Unproductive(x) \u2192 \u00acEnergetic(x))", "completion": "No one unproductive is an energetic person."}
{"prompt": "\u2200x (Sloth(x) \u2192 Lazy(x))", "completion": "If something is a sloth, then it is lazy."}
{"prompt": "\u2203x (Animal(x) \u2227 Sloth(x))", "completion": "Some animals are sloths."}
{"prompt": "\u00acEnergetic(sid) \u2228 Sloth(sid)", "completion": "Sid is not either an energetic person or a sloth."}
{"prompt": "\u2200x (European(x) \u2227 SoccerClub(x) \u2192 Attend(x, ucl) \u2228 Attend(x, uel) \u2228 Attend(x, uecl))", "completion": "European soccer clubs can attend UCL, UEL and UECL."}
{"prompt": "\u2200x \u2200y (SoccerClub(x) \u2227 SoccerClub(y) \u2227 Attend(x, ucl) \u2227 Attend(y, uel) \u2192 HigherRank(x, y))", "completion": "A soccer club eligible to attend UCL has a higher ranking than a soccer club eligible to attend UEL."}
{"prompt": "\u2200x \u2200y (SoccerClub(x) \u2227 SoccerClub(y) \u2227 Attend(x, uel) \u2227 Attend(y, uecl) \u2192 HigherRank(x, y))", "completion": "A soccer club eligible to attend UEL has a higher ranking than a soccer club eligible to attend UECL."}
{"prompt": "European(manchesterunited) \u2227 SoccerClub(manchesterunited) \u2227 European(manchestercity) \u2227 SoccerClub(manchestercity)", "completion": "Manchester United and Machester City are both European soccer clubs."}
{"prompt": "Attend(manchesterunited, uel)", "completion": "Manchester United is eligible to attend UEL next season."}
{"prompt": "Attend(manchestercity, ucl)", "completion": "Manchester City is eligible to attend UCL next season."}
{"prompt": "\u2200x \u2200y (Coach(x, y) \u2227 IsFootballClub(y) \u2192 IsFootballCoach(x))", "completion": "If a person coach a football club, the person is a football coach."}
{"prompt": "\u2200x \u2200y \u2200z (PlayFor(x, y) \u2227 NFLTeamYear(y, z) \u2227 InTeam(x, z) \u2192 PlayInNFL(x))", "completion": "If a person has a position in a club for a position in a year, and the club is in NFL in the same year, the person plays in NFL."}
{"prompt": "IsFootballClub(minnesota_Vikings)", "completion": "Minnesota Vikings is a football club."}
{"prompt": "Coach(dennis_Green, minnesota_Vikings)", "completion": "Dennis Green coached Minnesota Vikings."}
{"prompt": "TouchDownReceptionTime(cris_Carter, t13)", "completion": "Cris Carter had 13 touchdown receptions."}
{"prompt": "NFLTeamYear(minnesota_Vikings, y1997)", "completion": "Minnesota Vikings was in the National Football League in 1997."}
{"prompt": "Position(john_Randle, defensive_tackle) \u2227 InTeam(john_Randle, y1997) \u2227 PlayFor(john_Randle, minnesota_Vikings)", "completion": "John Randle was Minnesota Vikings defensive tackle in 1997."}
{"prompt": "\u2200x (Cat(x) \u2192 Cute(x))", "completion": "All cats are cute."}
{"prompt": "\u2200x (Cat(x) \u2228 Dog(x))", "completion": "An animal is either a cat or a dog."}
{"prompt": "\u2200x (Bark(x) \u2192 \u00acLovely(x))", "completion": "Nothing that barks is lovely. "}
{"prompt": "\u2200x (Dog(x) \u2192 Bark(x))", "completion": "If something is a dog, then it barks."}
{"prompt": "(Cat(grace) \u2227 Dog(grace)) \u2295 (\u00acCat(grace) \u2227 \u00acDog(grace))", "completion": "Grace is either a cat and a dog, or neither a cat nor a dog."}
{"prompt": "LargeComplex(shafaq-asiman) \u2227 LargeComplex(shafaq-asiman) \u2227 Offshore(shafaq-asiman) \u2227 GeologicalStructures(shafaq-asiman) \u2227 In(shafaq-asiman, caspiansea)", "completion": "Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea."}
{"prompt": "NorthwestOf(baku, shafaq-asiman)", "completion": "Baku is northwest of Shafaq-Asiman."}
{"prompt": "\u2200x \u2200y (NorthwestOf(x, y) \u2192 SoutheastOf(y, x))", "completion": "If place A is northwest of place B, then place B is southeast of place A."}
{"prompt": "Greek(herodicus) \u2227 Physician(herodicus) \u2227 Dietician(herodicus) \u2227 Sophist(herodicus) \u2227 GymnasticMaster(herodicus)", "completion": "Herodicus was a Greek physician, dietician, sophist, and gymnastic-master."}
{"prompt": "Born(herodicus, selymbia) \u2227 City(selymbia)", "completion": "Herodicus was born in the city of Selymbria."}
{"prompt": "Colony(selymbia, megara) \u2227 CityState(megara)", "completion": "Selymbria is a colony of the city-state Megara."}
{"prompt": "Tutored(herodicus, hippocrates)", "completion": "One of the tutors of Hippocrates was Herodicus."}
{"prompt": "Recommended(herodicus, massages)", "completion": "Massages were recommended by Herodicus."}
{"prompt": "\u2203x (Theory(x) \u2227 From(x, herodicus) \u2227 FoundationOf(x, sportsMedicine))", "completion": "Some of theories of Herodicus are considered to be the foundation of sports medicine."}
{"prompt": "\u2200x (Kid(x) \u2192 \u00acOperaLover(x))", "completion": "No kid loves the Opera."}
{"prompt": "\u2200x (Adult(x) \u2192 OperaLover(x))", "completion": "All adults love the Opera."}
{"prompt": "\u2200x (Scientist(x) \u2192 Adult(x))", "completion": "If someone is a scientist, then they are an adult."}
{"prompt": "\u2203x (Student(x) \u2227 Kid(x))", "completion": "Some students are kids."}
{"prompt": "Kid(billy)", "completion": "Billy is a kid."}
{"prompt": "Scottish(brianwinter) \u2227 FootballReferee(brianwinter)", "completion": "Brian Winter is a Scottish football referee."}
{"prompt": "Injured(brianwinter) \u2227 Retired(brianwinter)", "completion": "After being injured, Brian Winter retired in 2012."}
{"prompt": "RefereeObserver(brianwinter)", "completion": "Brian Winter was appointed as a referee observer after his retirement."}
{"prompt": "\u2203x (FootballReferee(x) \u2227 RefereeObserver(x))", "completion": "Some football referees become referee observers."}
{"prompt": "Son(andywinter, brianwinter) \u2227 FootballPlayer(andywinter) \u2227 PlaysFor(andywinter, hamiltonacademical)", "completion": "The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical."}
{"prompt": "\u2200x (Puzzles(x) \u2228 BadChess(x))", "completion": "People are either interested in puzzles or bad at chess."}
{"prompt": "\u2200x (BadChess(x) \u2192 \u00acPlaysLots(x))", "completion": "If a person is bad at chess, then they don't play a lot of chess."}
{"prompt": "\u2200x (Plans(x) \u2228 Creative(x))", "completion": "A person is either a planner or a creative person."}
{"prompt": "PlaysLots(erica)", "completion": "Erica is someone who plays a lot of chess."}
{"prompt": "\u00ac(BadChess(erica) \u2228 Creative(erica)) \u2192 (Plans(erica) \u2295 Creative(erica))", "completion": "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative."}
{"prompt": "\u2200x (SoccerPlayer(x) \u2192 HasLeftFoot(x) \u2227 HasRightFoot(x))", "completion": "Soccer players have a right foot and a left foot."}
{"prompt": "\u2200x (SoccerPlayer(x) \u2227 Efficient(x, left) \u2227 Efficient(x, right) \u2192 Top(x))", "completion": "Top soccer players are soccer players who can use their both feet very efficiently."}
{"prompt": "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, left) \u2192 Efficient(x, left))", "completion": "If a soccer player can score many goals using left foot, then they can use that foot very efficiently."}
{"prompt": "\u2200x (SoccerPlayer(x) \u2227 ScoreManyGoals(x, right) \u2192 Efficient(x, right))", "completion": "If a soccer player can score many goals using right foot, then they can use that foot very efficiently."}
{"prompt": "SoccerPlayer(ronaldo)", "completion": "Cristiano Ronaldo is a soccer player."}
{"prompt": "Efficient(ronaldo, right)", "completion": "Cristiano Ronaldo can use his right foot very efficiently."}
{"prompt": "ScoreManyGoals(ronaldo, left)", "completion": "Cristiano Ronaldo have scored more than one hundred goals using his left foot."}
{"prompt": "Hatchery(nationallobsterhatchery) \u2227 LocatedIn(nationallobsterhatchery, padstowengland)", "completion": "The National Lobster Hatchery is a hatchery located in Padstow England."}
{"prompt": "OpenToVisitors(nationallobsterhatchery)", "completion": "The National Lobster Hatchery is open to visitors."}
{"prompt": "\u2200x (Hatchery(x) \u2192 ForConservation(x) \u2228 ForProfit(x))", "completion": "A hatchery is either for profit, or for conservation."}
{"prompt": "\u2203x (Hatchery(x) \u2227 ForConservation(x) \u2227 ReleasesAnimalsToWild(x))", "completion": "If a hatchery is for conservation, it might release animals into the wild."}
{"prompt": "\u00acForProfit(nationallobsterhatchery)", "completion": "The National Lobster Hatchery is not for profit."}
{"prompt": "\u2200x (Rhosaelwydfc(x) \u2192 FootballClub(x) \u2227 BasedInPonciau(x) \u2227 Welsh(x))", "completion": "Rhos Aelwyd F.C. is a Welsh football club."}
{"prompt": "\u2200x (BasedInPonciau(x) \u2194 Rhosaelwydfc(x))", "completion": "Rhos Aelwyd F.C. is the only club based in Ponciau. "}
{"prompt": "\u2203x (BasedInPonciau(x) \u2227 WonPremierDivisionDuring(x, y2005))", "completion": "The Premier Division was won in 2005\u201306 by a team from Ponciau. "}
{"prompt": "\u2200x (WonPremierDivisionDuring(x, y2009) \u2192 Promoted(x))", "completion": "The winner of the Premier Division in 2009\u201310 was promoted back to the Cymru Alliance."}
{"prompt": "\u2200x (WonPremierDivisionDuring(x, y2009) \u2194 WonPremierDivisionDuring(x, y2005))", "completion": "The Premier Division in 2009\u201310 was won by the same team that won in 2005-06. "}
{"prompt": "\u2200x (OS(x) \u2192 Software(x))", "completion": "All OS are software."}
{"prompt": "\u2200x (Mac(x) \u2192 OS(x))", "completion": "All Mac are OS."}
{"prompt": "\u2200x (Mac(x) \u2228 Windows(x))", "completion": "An OS is either Mac or Windows."}
{"prompt": "\u2200x (Windows(x) \u2192 Convenient(x))", "completion": "All Windows are convenient."}
{"prompt": "\u2200x (Software(x) \u2192 Code(x))", "completion": "All software has code."}
{"prompt": "\u2200x (Convenient(x) \u2192 Popular(x))", "completion": "If something is convenient, then it is popular."}
{"prompt": "Code(burger) \u2227 Mac(burger))", "completion": "Burger is a piece of code and a Mac."}
{"prompt": "(Windows(pytorch) \u2227 Software(pytorch)) \u2295 (\u00acWindows(pytorch) \u2227 \u00acSoftware(pytorch))", "completion": "PyTorch is either Windows and software, or neither Windows nor software."}
{"prompt": "\u2200x (Road(x) \u2192 (MadeOfConcrete(x) \u2228 MadeOfAsphalt(x))", "completion": "Roads are made of either concrete or asphalt."}
{"prompt": "\u2200x \u2200y (Road(x) \u2227 MadeOfConcrete(x) \u2227 Road(y) \u2227 MadeOfAsphalt(y) \u2192 LastLonger(x, y))", "completion": "Roads made of concrete last longer than roads made with asphalt."}
{"prompt": "\u2200x \u2200y (Road(x) \u2227 MadeOfAsphalt(x) \u2227 Road(y) \u2227 MadeOfConcrete(y) \u2192 Smoother(x, y))", "completion": "Roads made of asphalt are smoother than roads made of concrete."}
{"prompt": "\u2200x \u2200y \u2200z (Road(x) \u2227 Road(y) \u2227 Smoother(x, y) \u2192 Prefers(z, x))", "completion": "Everyone prefers the smoother of two roads. "}
{"prompt": "Road(one) \u2227 MadeOfConcrete(one) \u2227 Road(two) \u2227 MadeOfAsphalt(two)", "completion": "Road one is made of concrete and Road two is made of asphalt."}
{"prompt": "TraditionalSummerCamp(campdavern) \u2227 ForBoysAndGirls(campdavern)", "completion": "Camp Davern is a traditional summer camp for boys and girls."}
{"prompt": "EstablishedIn(campdavern, year1946)", "completion": "Camp Davern was established in the year 1946."}
{"prompt": "OperatedByYMCAUntil(campdavern, year2015)", "completion": "Camp Davern was operated by the YMCA until the year 2015."}
{"prompt": "OneOf(campdavern, ontariosoldestsummercamps)", "completion": "Camp Davern is one of Ontario's oldest summer camps."}
{"prompt": "\u2200x (PublishJournals(x) \u2192 \u00acEntertainment(x))", "completion": "If people publish journals, then they do not work in the entertainment industry."}
{"prompt": "\u2200x (Novelist(x) \u2192 PublishJournals(x))", "completion": "All people who are award-winning novelists publish journals."}
{"prompt": "\u2200x (Entertainment(x) \u2228 Acclaimed(x))", "completion": "People either work in the entertainment industry or are highly acclaimed in their profession."}
{"prompt": "\u2200x (Acclaimed(x) \u2192 Tenured(x))", "completion": "If people are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace."}
{"prompt": "\u2200x (Acclaimed(x) \u2192 Glowing(x))", "completion": "If people are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues."}
{"prompt": "(Acclaimed(emily) \u2227 Tenured(emily)) \u2228 (\u00acAcclaimed(emily) \u2227 \u00acTenured(emily)) \u2192 \u00acAcclaimed(emily)", "completion": "If Emily is either both highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace, or she is neither highly acclaimed in her profession nor often holds tenured and high-ranking positions at her workplace, then Emily is not highly acclaimed in her profession. "}
{"prompt": "YoungAdultFantasyNovel(thickastheives) \u2227 WrittenBy(thickastheives, megan)", "completion": "Thick as Thieves is a young adult fantasy novel, written by Megan Whalen Turner."}
{"prompt": "PublishedBy(thickastheives, greenwillowbooks)", "completion": "Thick as Thieves was published by Greenwillow Books."}
{"prompt": "\u2200x \u2200y \u2200z (WrittenBy(x, y) \u2227 PublishedBy(x, z) \u2192 WorkedWith(y, z))", "completion": "If a book was published by a company, than the author of that book worked with the company that published the book."}
{"prompt": "Fictional(medeempire) \u2227 SetIn(thickastheives, medeempire)", "completion": "The fictional Mede Empire is where Thick as Thieves is set."}
{"prompt": "\u2203x (Country(x) Nearby(medeempire, x) \u2227 PlotsToSwallowUp(medeempire, x))", "completion": "The Mede Empire plots to swallow up some nearby countries."}
{"prompt": "Country(attolia) \u2227 Nearby(medeempire, attolia) \u2227 Country(sounis) \u2227 Nearby(medeempire, sounis)", "completion": "Attolia and Sounis are countries near the Mede Empire."}
{"prompt": "SoldAs(thickastheives, hardcover) \u2227 SoldAs(thickastheives, softcover)", "completion": "Thick as Thieves was sold both as a hardcover and an e-book."}
{"prompt": "\u2200x (WeTab(x) \u2192 MeeGoBased(x) \u2227 TabletComputer(x))", "completion": "WeTab is a MeeGo-based tablet computer."}
{"prompt": "\u2203x (WeTab(x))", "completion": "There is a WeTab product."}
{"prompt": "\u2200x (WeTab(x) \u2192 Announce(neofonie, x))", "completion": "WeTab was announced by Neofonie."}
{"prompt": "German(neofonie) \u2227 Producer(neofonie)", "completion": "Neofonie is a German producer."}
{"prompt": "\u2200x (German(x) \u2192 Speak(x, english) \u2228 Speak(x, german))", "completion": "Germans speak English or German."}
{"prompt": "\u2203x ( BusinessAnalysis(x) \u2227 GoodAtMath(x))", "completion": "Some employees working in business analysis are good at math. "}
{"prompt": "\u2200x (BusinessAnalysis(x) \u2192 WorkInCompany(x))", "completion": "All employees working in business analysis are working in this company. "}
{"prompt": "\u2200x (WorkInCompany(x) \u2192 \u00acFromChina(x))", "completion": "No employees working in this company are from China. "}
{"prompt": "\u2200x (SoftwareEngineering(x) \u2192 FromChina(x))", "completion": "All employees working in software engineering are from China. "}
{"prompt": "SoftwareEngineering(james)", "completion": "James is working in software engineering. "}
{"prompt": "Party(strawberry) \u2228 Party(orange) \u2228 Party(blueberry) \u2228 Party(grape) \u2228 Party(cherry) ", "completion": "The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry."}
{"prompt": "\u2200x (Party(x) \u2192 SameWeight(x))", "completion": "All fruits are provided in the same weight at the beginning of the party."}
{"prompt": "\u2200x (LowestAmount(x) \u2192 MostPopular(x)) ", "completion": "If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit."}
{"prompt": "LowestAmount(strawberries)", "completion": "At the end of the party, strawberries had the lowest remaining weight."}
{"prompt": "Lower(blueberry, cherry)", "completion": "At the end of the party, the amount of leftover blueberries was lower than that of cherries."}
{"prompt": "Eat(orange, benjamin) \u2227 Eat(grape, benjamin) \u2227 \u00acEat(blueberry, benjamin) \u2227 \u00acEat(cherry, benjamin) \u2227 \u00acEat(strawberry, benjamin)", "completion": "Benjamin only ate oranges and grapes at the party."}
{"prompt": "\u2200x (Attend(x) \u2192 Registered(x))", "completion": "All students who attend in person have registered for the conference. "}
{"prompt": "\u2200x (Attend(x) \u2192 InPerson(x) \u2295 Remotely(x))", "completion": "Students either attend the conference in person or remotely. "}
{"prompt": "\u2200x ((Attend(x) \u2227 China(x)) \u2192 \u00acRemotely(x))", "completion": "No students from China attend the conference remotely. "}
{"prompt": "Attend(james) \u2227 \u00acRemotely(james)", "completion": "James attends the conference but he does not attend the conference remotely."}
{"prompt": "China(jack) \u2227 Attend(jack)", "completion": "Jack attends the conference and he is a student from China."}
{"prompt": "PoliticalStrategist(davidhaivri)", "completion": "David Ha'ivri is a political strategist. "}
{"prompt": "\u2200x \u2203y (BornInIsrael(x) \u2227 ParentOf(x, y) \u2227 Israeli(y) \u2192 IsraeliCitizen(x))", "completion": "If you are born in Israel to at least one Israeli parent, then you receive citizenship at birth. "}
{"prompt": "\u2203x (EmigratedTo(davidhaivri, america) \u2227 BornInIsrael(davidhaivri) \u2227 ParentOf(davidhaivri, x) \u2227 Israeli(x))", "completion": "David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. "}
{"prompt": "\u2203x (ZionistLeader(x) \u2227 ElectedTo(x, shomronmunicipalcouncil))", "completion": "Several Zionist leaders have been elected to the Shomron Regional Municipal council. "}
{"prompt": "ZionstLeader(davidhaivri)", "completion": "David Ha'ivri is a Zionist leader. "}
{"prompt": "Have(mary, flu)", "completion": "Mary has the flu."}
{"prompt": "\u2200x (Have(x, flu) \u2194 Have(x, influenza))", "completion": "Flu and influenza are the same disease."}
{"prompt": "\u00acHave(susan, influenza)", "completion": "Susan doesn't have influenza."}
{"prompt": "British(james) \u2227 Lawyer(james)", "completion": "James Cocks was a British lawyer."}
{"prompt": "Whig(james) \u2227 Politician(james) \u2227 SatInHouseOfCommons(james)", "completion": "James Cocks was a Whig politician who sat in the House of Commons."}
{"prompt": "\u2200x (British(x) \u2192 European(x))", "completion": "A British is a European."}
{"prompt": "\u2200x (Lawyer(x) \u2192 FamiliarWithLaws(x))", "completion": "Any lawyer is familiar with laws."}
{"prompt": "\u2203x (Whig(x) \u2227 SpeakFrench(x))", "completion": "Some Whigs speak French."}
{"prompt": "Novel(beastsofprey) \u2227 Fantasy(beastsofprey) \u2228 ScienceFiction(beastsofprey)", "completion": "Beasts of Prey is either a fantasy novel or a science fiction novel."}
{"prompt": "\u2200x \u2200y (ScienceFiction(x) \u2227 Mythological(y) \u2227 Creature(y) \u2192 \u00acAbout(x, y))", "completion": "Science fiction novels are not about mythological creatures"}
{"prompt": "About(beastsofprey, shetani) \u2227 Creature(shetani)", "completion": "Beasts of Prey Is about a creature known as the Shetani."}
{"prompt": "Mythological(shetani)", "completion": "Shetanis are mythological."}
{"prompt": "\u2200x (Odell(x) \u2192 Surname(x))", "completion": "Odell is an English surname originating in Odell, Bedfordshire."}
{"prompt": "\u2203x (Odell(x) \u2227 SpelledODell(x))", "completion": "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation."}
{"prompt": "Odell(amyOdell) \u2227 NotablePeople(amyOdell) \u2227 Odell(jackOdell) \u2227 NotablePeople(jackOdell) \u2227 Odell(matsOdell) \u2227 NotablePeople(matsOdell)", "completion": "Notable people with the surname include Amy Odell, Jack Odell, and Mats Odell."}
{"prompt": "British(amyOdell) \u2227 Singer(amyOdell) \u2227 SongWriter(amyOdell)", "completion": "Amy Odell is a British singer-songwriter."}
{"prompt": "English(jackOdell) \u2227 ToyInvertor(jackOdell)", "completion": "Jack Odell is an English toy inventor."}
{"prompt": "\u2200x (Train(x) \u2192 \u00acLoseTime(x))", "completion": "If you go somewhere by train, you will not lose time."}
{"prompt": "\u2200x ((Car(x) \u2227 MeetJam(x)) \u2192 LoseTime(x))", "completion": "If you go somewhere by car and meet traffic jam, you will lose time."}
{"prompt": "\u2200x (LoseTime(x) \u2194 LateForWork(x))", "completion": "If you lose time, you will be late for work."}
{"prompt": "Train(mary) \u2295 Car(mary)", "completion": "Mary can get from New Haven to New York City either by train or car."}
{"prompt": "LateForWork(mary)", "completion": "Mary is late for work."}
{"prompt": "\u2200x (Hungry(x) \u2192 Uncomfortable(x))", "completion": "If a person is hungry, the person is uncomfortable."}
{"prompt": "\u2200x (Uncomfortable(x) \u2192 \u00acHappy(x))", "completion": "If a person is uncomfortable, the person is unhappy."}
{"prompt": "\u2200x (Tipped(x) \u2192 \u00acGetMinWage(x))", "completion": "Tipped employees do not get a guaranteed minimum wage."}
{"prompt": "\u2200x (WhiteCollar(x) \u2192 GetMinWage(x))", "completion": "If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage)."}
{"prompt": "\u2200x (Lawyer(x) \u2192 WhiteCollar(x))", "completion": "All lawyers are white-collar workers."}
{"prompt": "\u2200x (Advocate(x) \u2192 Lawyer(x))", "completion": "Every advocate is a lawyer."}
{"prompt": "\u00acLawyer(mary) \u2295 Tipped(mary)", "completion": "Mary is not a lawyer or a tipped employee."}
{"prompt": "BornIn(asaHoffmann, newyorkcity)", "completion": "Asa Hoffmann was born in New York City."}
{"prompt": "LivesIn(asaHoffmann, manhattan)", "completion": "Asa Hoffman lives in Manhattan."}
{"prompt": "IsChessPlayer(asaHoffmann)", "completion": "Asa Hoffman is a chess player."}
{"prompt": "\u2203x (IsChestPlayer(x) \u2227 IsGrandMaster(x))", "completion": "Some chess players are grandmasters."}
{"prompt": "\u2200x (BornIn(x, newyorkcity) \u2227 LivesIn(x, newyorkcity) \u2192 IsNewYorker(x))", "completion": "People born and living in New York City are New Yorkers."}
{"prompt": "\u2200x (LivesIn(x, manhattan) \u2192 LivesIn(x, newyorkcity))", "completion": "People liviing in Manhattan live in New York City."}
{"prompt": "\u2203x (ApplyVisa(x) \u2192 GetVisa(x))", "completion": "Some of those who apply for a Schengen Visa get it."}
{"prompt": "\u2200x (ApplyVisa(x) \u2192 FinancialGuarantees(x))", "completion": "To apply for a Schengen Visa, you need to provide financial guarantees."}
{"prompt": "\u2200x (FinancialGuarantees(x) \u2192 RequestDocuments(x))", "completion": "If you need to provide financial guarantees, you must request documents from the bank."}
{"prompt": "\u2200x (RequestDocuments(x) \u2192 \u00acCloseBankAccount(x))", "completion": "Do not close your bank account if you request documents from the bank."}
{"prompt": "CloseBankAccount(philip)", "completion": "Philip closed his bank account."}
{"prompt": "\u2203x (Fear(x) \u2227 Anxiety(x))", "completion": "Some fears lead to anxiety."}
{"prompt": "\u2203x (Anxiety(x) \u2227 Terror(x))", "completion": "Some anxiety leads to terror."}
{"prompt": "\u2200x (GreatLake(x) \u2192 Superior(x) \u2228 Michigan(x) \u2228 Huron(x) \u2228 Erie(x) \u2228 Ontario(x))", "completion": "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario."}
{"prompt": "\u2203x \u2200y (Erie(y) \u2227 MajorSettlementOf(x, y) \u2227 In(x, ny) \u2228 In(x, pa) \u2228 In(x, oh) \u2228 In(x, mi))", "completion": "Some major settlements of Lake Erie are in NY, PA, OH, and MI."}
{"prompt": "State(ny, us) \u2227 State(pa, us) \u2227 State(oh, us) \u2227 State(mi, us)", "completion": "NY, PA, OH, MI are states in the US."}
{"prompt": "State(on, canada)", "completion": "ON is a state of Canada."}
{"prompt": "\u2203x \u2200y (Huron(y) \u2227 MajorSettlementOf(x, y) \u2227 In(x, on))", "completion": "There is a major settlement of Lake Huron in ON. "}
{"prompt": "\u2200x \u2200y (State(x, y) \u2192 In(x, y))", "completion": "All states are in their country."}
{"prompt": "In(us, northamerica)", "completion": "The US is in North America."}
{"prompt": "\u2200x (GreatLake(x) \u2192 FormAtEndOf(x, lastglacialperiod))", "completion": "The Great Lakes began to form at the end of the Last Glacial Period."}
{"prompt": "\u2200x (SoccerPlayer(x) \u2192 \u00acProfessionalBasketballPlayer(x))", "completion": "No soccer players are professional basketball players."}
{"prompt": "\u2200x (CenterBack(x) \u2192 Defender(x))", "completion": "All centerbacks are defenders."}
{"prompt": "\u00acNBAPlayer(stephencurry) \u2192 \u00ac(NBAPlayer(stephencurry) \u2295 SoccerPlayer(stephencurry))", "completion": "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player."}
{"prompt": "Proposed(justinKruger, naiveCynicism) \u2227 Proposed(colleagueOfJustinKruger, naiveCynicism) ", "completion": "Naive cynicism was proposed by Justin Kruger and a colleague."}
{"prompt": "Colleague(thomasGilovich, justinKruger)", "completion": "Thomas Gilovich is a colleague of Justin Kruger. "}
{"prompt": "PhilosophyOfMind(naiveCynicism)", "completion": "Naive cynicism is a philosophy of mind."}
{"prompt": "TuringAwarded(donaldKnuth) \u2227 TuringAwarded(marvinMinsky) \u2227 TuringAwarded(richardHamming) \u2227 TuringAwarded(johnMccarthy)", "completion": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. "}
{"prompt": "ContributedTo(donaldKnuth, algorithms)", "completion": "Donald Knuth made major contributions to the analysis of algorithms."}
{"prompt": "ContributedTo(marvinMinsky, ai)", "completion": "Marvin Minsky is recognized by his contributions to the field of artificial intelligence."}
{"prompt": "ContributedTo(richardHamming, numericalMethods)", "completion": "Richard Hamming did research on numerical methods."}
{"prompt": "ContributedTo(johnMccarthy, ai)", "completion": "John McCarthy had a central role in creating and shaping the field of artificial inteligence. "}
{"prompt": "\u2200x (Easy(x) \u2192 \u00acLowerAC(x))", "completion": "No easy Leetcode problems have an AC rate lower than 20 percent. "}
{"prompt": "\u2200x (Recommended(x) \u2192 Easy(x))", "completion": "All Leetcode problems recommended to novices are easy.                                                                                                       "}
{"prompt": "\u2200x (LowerAC(x) \u2295 Starred(x))", "completion": "Leetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. "}
{"prompt": "\u2200x (Hard(x) \u2192 Starred(x))", "completion": "All hard Leetcode problems are starred by more than 1 thousand users. "}
{"prompt": "\u2200x (PublishedAfter2022(x) \u2192 \u00acStarred(x))", "completion": "No Leetcode problems published after 2022 are starred by more than 1 thousand users. "}
{"prompt": "\u00ac(Recommended(twosum) \u2227 Hard(twosum))", "completion": "2Sum is not recommended to novices and hard. "}
{"prompt": "\u00ac(Starred(foursum) \u2295 PublishedAfter2022(foursum))", "completion": "4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. "}
{"prompt": "Song(showyourlove) \u2227 RecordedBy(showyourlove, btob4u) \u2227 SouthKorean(btob4u) \u2227 BoyBand(btob4u)", "completion": "Show Your Love is a song recorded by the South Korean boy band BtoB 4u."}
{"prompt": "ExtendedPlay(inside) \u2227 LeadSingle(showyourlove) \u2227 LeadSingleOf(showyourlove, inside)", "completion": "The lead single of the extended play Inside is Show Your Love."}
{"prompt": "Contains(showyourlove, hopefulmessage)", "completion": "Show Your Love contains a hopeful message."}
{"prompt": "Member(hyunsik, btob4u) \u2227 Wrote(hyunsik, showyourlove)", "completion": "BtoB 4u member Hyunsik wrote Show Your Love."}
{"prompt": "HasMusicVideo(showyourlove)", "completion": "There is a music video for Show Your Love."}
{"prompt": "\u2200x (Table(x) \u2192 Round(x))", "completion": "All tables are round."}
{"prompt": "\u2203x (Furniture(x) \u2227 Table(x))", "completion": "Some furniture are tables."}
{"prompt": "\u2200x (JuvenileDelinquent(x) \u2192 MaladjustedIndividual(x))", "completion": "All juvenile delinquents are maladjusted individuals."}
{"prompt": "\u2203x (JuvenileDelinquent(x)  \u2227 ProductOfBrokenHome(x))", "completion": "Some juvenile delinquents are products of broken homes."}
{"prompt": "\u2200x (BrainReading(x) \u2228 BrainDecoding(x)) ", "completion": "Either brain reading or brain decoding. "}
{"prompt": "\u2200x (BrainDecoding(x) \u2192 ExtractingInformationFromBOLDSignals(x))", "completion": "All brain decoding is extracting information from BOLD signals."}
{"prompt": "\u2200x (ExtractingInformationFromBOLDSignals(x) \u2192 \u00acWithoutStatisticalPatternAnalysis(x))", "completion": "No extracting information from BOLD signals is without statistical pattern analysis. "}
{"prompt": "\u2200x (WritingANovel(x) \u2192 WithoutStatisticalPatternAnalysis(x)) ", "completion": "Writing a novel is without statistical pattern analysis."}
{"prompt": "WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainReading(multivoxelPatternAnalysis) \u2192 WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) \u2227 BrainDecoding(multivoxelPatternAnalysis)", "completion": "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding."}
{"prompt": "\u2200x (RoomFor(x, dessert) \u2192 RoomFor(x, broccoli))", "completion": "If you have room for dessert, you have room for broccoli."}
{"prompt": "\u2200x (AtLuisParty(x) \u2192 RoomFor(x, dessert))", "completion": "Everyone at Luis's dinner party has room for dessert, including Luis."}
{"prompt": "\u00acRoomFor(mauricia, broccoli)", "completion": "Mauricia does not have room for broccoli."}
{"prompt": "FirstDinnerParty(allison, luisparty) \u2227 AtLuisParty(allison)", "completion": "Luis's dinner party is the first ever dinner party that Allison has attended."}
{"prompt": "RoomFor(gustave, broccoli) \u2227 RoomFor(gustave, asparagus)", "completion": "Gustave has room for both broccoli and asparagus."}
{"prompt": "Vegetable(broccoli) \u2227 Vegetable(asparagus)", "completion": "Broccoli and asparagus are both vegetables."}
{"prompt": "American(imagineDragon) \u2227 RockBand(imagineDragon)", "completion": "Imagine Dragons is an American pop rock band."}
{"prompt": "LeadSinger(imagineDragon, dan)", "completion": "The lead singer of Imagine Dragons is Dan."}
{"prompt": "SongWriter(dan)", "completion": "Dan is also a songwriter."}
{"prompt": "\u2200x \u2200y (LeadSinger(x, y) \u2192 Singer(y))", "completion": "All lead singers are singers."}
{"prompt": "\u2200x (Singer(x) \u2192 Musician(x))", "completion": "All singers are musicians."}
{"prompt": "PopularSingle(imagineDragon, demons)", "completion": "Demons is one of the most popular singles of Imagine Dragons."}
{"prompt": "\u2203x (PopularSingle(imagineDragon, x) \u2227 BillboardHot100(x))", "completion": "Some singles of Imagine Dragons have been on Billboard Hot 100."}
{"prompt": "\u2200x (Bread(x) \u2192 Food(x))", "completion": "All bread is food."}
{"prompt": "\u2203x (Sandwich(x) \u2227 Bread(x))", "completion": "Some sandwiches are bread."}
{"prompt": "\u2200x (Food(x) \u2192 Edible(x))", "completion": "All food is edible. "}
{"prompt": "\u2200x (Edible(x) \u2192 \u00acPoisonous(x))", "completion": "No edible things are poisonous."}
{"prompt": "Poisonous(deodorant)", "completion": "Deodorant is poisonous."}
{"prompt": "CommonUtilities(water) \u2227 CommonUtilities(electricity) \u2227 CommonUtilities(gas) \u2227 CommonUtilities(heating)", "completion": "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling."}
{"prompt": "\u2203x (Cover(x, water) \u2227 Cover(x, electricity))", "completion": "Many apartment rents cover the cost of water and electricity."}
{"prompt": "\u2200x (Cover(susan, x))", "completion": "Susan lives in an apartment where the rent covers all utilities."}
{"prompt": "\u2200x (\u00acCover(ava, x))", "completion": "The rent of the apartment where Ava lives does not cover any utility expenses."}
{"prompt": "\u00acCover(noah, heating)", "completion": "Noah lives in an apartment where the rent does not cover heating."}
{"prompt": "\u2200x (Clothes(x) \u2192 Product(x))", "completion": "All clothes are products. "}
{"prompt": "\u2200x (Product(x) \u2192 \u00acPerfect(x))", "completion": "No products are perfect. "}
{"prompt": "\u2200x (Dress(x) \u2192 Clothes(x))", "completion": "All dresses are clothes."}
{"prompt": "\u2200x (Skirt(x) \u2192 Dress(x))", "completion": "All skirts are dresses. "}
{"prompt": "Clothes(nike) \u2192 Perfect(nike) \u2227 Dress(nike)", "completion": "If Nike is clothes, then Nike is perfect and a dress."}
{"prompt": "\u2200x (Pet(x) \u2192 Animal(x))", "completion": "All pets are animals."}
{"prompt": "\u2200x (Pet(x) \u2192 Dog(x) \u2295 Cat(x))", "completion": "Pets can be either a dog or a cat."}
{"prompt": "\u2200x \u2200y (HasPet(x) \u2192 Cares(x, y))", "completion": "If a person has a pet, they care for that pet. "}
{"prompt": "\u2203x ((Cat(x) \u2227 Naughty(x)) \u2228 (Dog(x) \u2227 Naughty(x)))", "completion": "Dogs and Cats can be naughty. "}
{"prompt": "\u2200x \u2200y (Pet(x) \u2227 Naughty(x) \u2192 \u00acLiked(x, y))", "completion": "Pets who are naughty are not liked as much. "}
{"prompt": "HasPet(charlie) \u2227 Pet(leo) \u2227 Dog(leo) \u2227 Naughty(leo)", "completion": "Charlie has a naughty pet dog named Leo. "}
{"prompt": "\u2200x (Surprise(x) \u2192 (Fun(x) \u2295 Dreadful(x)))", "completion": "Surprises are either fun or dreadful."}
{"prompt": "\u2200x (Scare(x) \u2192 Surprise(x))", "completion": "All scares are surprises."}
{"prompt": "\u2200x (Book(x) \u2227 WrittenBy(x, cixinliu) \u2192 SoldMoreThan(x, onemillion))", "completion": "All books written by Cixin Liu have sold more than 1 million copies. "}
{"prompt": "\u2203x (Won(x, hugoaward) \u2227 Book(x) \u2227 WrittenBy(x, cixinliu))", "completion": "Some books that have won the Hugo Award were written by Cixin Liu."}
{"prompt": "\u2200x (Book(x) \u2227 AboutFuture(x) \u2192 InfluencedBy(x, isaacasimov))", "completion": "All books about the future are influenced by Isaac Asimov."}
{"prompt": "Book(threebodyproblem) \u2227 SoldMoreThan(threebodyproblem, onemillion)", "completion": "The book the Three Body Problem has sold more than 1 million copies."}
{"prompt": "AboutFuture(threebodyproblem)", "completion": "The Three Body Problem is about the future."}
{"prompt": "\u2203x (ComputerScience(x) \u2227 GetUpEarly(x))", "completion": "Some students who major in computer science get up early. "}
{"prompt": "\u2200x (GetUpEarly(x) \u2192 StudyMorning(x))", "completion": "If a student gets up early, then he/she will study in the morning. "}
{"prompt": "\u2200x (StudyMorning(x) \u2192 GoodAtTimeManagement(x))", "completion": "All students studying in the morning are good at time management. "}
{"prompt": "\u2200x (GoodAtTimeManagement(x) \u2192 Popular(x))", "completion": "All students good at time management are popular among students. "}
{"prompt": "\u00acPopular(james)", "completion": "James is not popular among students. "}
{"prompt": "\u00ac(\u2203x (Dog(x) \u2227 OnRoof(x)))", "completion": "There is no dog on the roof."}
{"prompt": "\u2200x \u2203y ((Dog(x) \u2227 OnRoof(x)) \u2192 WentWrong(y))", "completion": "If there is a dog on the roof something went wrong."}
{"prompt": "\u2200x (Elephantopus(x) \u2192 Genus(x, perennialplants) \u2227 BelongTo(x, daisyfamily))", "completion": "Elephantopus is a genus of perennial plants in the daisy family."}
{"prompt": "\u2200x (Elephantopus(x) \u2192 WidespreadOver(x, africa) \u2227 WidespreadOver(x, southernasia) \u2227 WidespreadOver(x, australia) \u2227 WidespreadOver(x, americas))", "completion": "Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas."}
{"prompt": "\u2203x (Elephantopus(x) \u2227 NativeTo(x, southeasternunitedstates))", "completion": "Several species of Elephantopus are native to the southeastern United States."}
{"prompt": "\u2200x (ElephantopusScaber(x) \u2192 TraditionalMedicine(x))", "completion": "Elephantopus scaber is a traditional medicine."}
{"prompt": "\u2200x (YaleDormitory(x) \u2192 InYorkStreet(x))", "completion": "All Yale dormitories are located on York Street. "}
{"prompt": "\u2200x (ManagedByYaleHousing(x) \u2192 YaleDormitory(x))", "completion": "All buildings managed by Yale Housing are dormitories. "}
{"prompt": "\u2200x (OperatedByYaleHousingStaffs(x) \u2192 ManagedByYaleHousing(x))", "completion": "All buildings operated by Yale Housing staff are managed by Yale Housing. "}
{"prompt": "\u2200x (OpenToStudents(x) \u2192 \u00acEstablishedAfter1800(x))", "completion": "No buildings open to students are established after 1800. "}
{"prompt": "\u2200x (InYorkStreet(x) \u2192 OpenToStudents(x))", "completion": "All buildings located on York Street are open to students. "}
{"prompt": "OperatedByYaleHousingStaffs(harkness) \u2295 InYorkStreet(harkness)", "completion": "Harkness is either a building operated by Yale Housing staff or located on York Street. "}
{"prompt": "\u2200x (UrbanArea(x) \u2192 \u00acMansionHouse(x))", "completion": "There are no mansion houses in an urban area."}
{"prompt": "\u2200x (Skyscraper(x) \u2192 UrbanArea(x))", "completion": "All skyscrapers reside in urban areas."}
{"prompt": "\u2200x (CreepyHauntedHouse(x) \u2192 MansionHouse(x))", "completion": "Every creepy haunted house is in a mansion house."}
{"prompt": "\u2200x (TerrifyingHalloweenScare(x) \u2192 CreepyHauntedHouse(x))", "completion": "Every terrifying Halloween scare comes from a creepy haunted house."}
{"prompt": "CreepyHauntedHouse(thescream) \u2228 TerrifyingHalloweenScare(thescream)", "completion": "The Scream is a creepy haunted house or a terrifying Halloween scare."}
{"prompt": "NationalPark(phuocBinh) \u2227 Locatedin(phuocBinh, vietnam)", "completion": "Phuoc Binh national park is a national park in Vietnam. "}
{"prompt": "\u2200x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2192 NatureReserve(x))", "completion": "Any national park in Vietnam is classified as a nature reserve. "}
{"prompt": "\u2203x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2227 UNESCOWorldHeritageSite(x))", "completion": "There is a national park in Vietnam classified as a UNESCO World Heritage Site."}
{"prompt": "\u2200x (NationalPark(x) \u2227 Locatedin(x, vietnam) \u2192 Mangedby(x, ministryofAgriculture) \u2228 Mangedby(x, peoplesCommittee))", "completion": "All national parks in Vietnam are either managed by the Ministry of Agriculture or by the People's Committee. "}
{"prompt": "\u00acMangedby(phuocBinh, ministryofAgriculture)", "completion": "Phuoc Binh is not managed by the Ministry of Agriculture."}
{"prompt": "\u2200x \u2203y (GreyhoundRacing(x) \u2192 CompetitiveSport(x) \u2227 Greyhound(y) \u2227 SpectatorsBetOn(x, y))", "completion": "Greyhound racing is a competitive sport where spectators bet on greyhounds."}
{"prompt": "\u2200x (GreyhoundRacing(x) \u2194 Coursing(x))", "completion": "Coursing is a part of Greyhound racing."}
{"prompt": "\u2203x \u2203y (CompetitiveSport(x) \u2227 SpectaorsBetOn(x, y) \u2227 Banned(x))", "completion": "Some competitive sports where spectators bet on things are banned."}
{"prompt": "\u2200x \u2203y \u2203z (Coursing(x) \u2192 Hare(y) \u2227 SpectatorsBetOn(x, y) \u2227 GreyHound(z) \u2227 Pursue(z, y))", "completion": "Coursing involves spectators betting on a hare being pursued by greyhounds."}
{"prompt": "\u2200x (Hare(x) \u2192 SmallGame(x))", "completion": "Hares are small game."}
{"prompt": "\u2200x \u2203y (CompetitiveSport(x) \u2227 SmallGame(y) \u2227 SpectatorsBetOn(x, y) \u2192 Banned(x))", "completion": "If a competitive sport involves spectators betting on small game, then it is banned."}
{"prompt": "\u2200x (SoccerPlayer(x) \u2227 TwoYellow(x) \u2192 Eject(x))", "completion": "If a soccer player receives two yellow cards in one game, this player will be ejected from the rest of the game."}
{"prompt": "\u2200x (SoccerPlayer(x) \u2227 OneRed(x) \u2192 Eject(x))   ", "completion": "If a soccer player receives one red card in one game, this player will be ejected from the rest of the game."}
{"prompt": "SoccerPlayer(henry)", "completion": "Henry is a soccer player."}
{"prompt": "\u00acTwoYellow(henry) \u2227 OneRed(henry)", "completion": "In one game, Henry first receives one yellow card, then he receives one red card."}
{"prompt": "\u2200x (Tree(x) \u2192 Plant(x))", "completion": "All trees are plants. "}
{"prompt": "\u2203x (Living(x) \u2227 Tree(x))", "completion": "Some living things are trees."}
{"prompt": "\u2200x (Dagfinn(x) \u2192 GivenName(x))", "completion": "Dagfinn is a given name."}
{"prompt": "Dagfinn(dagfinnAarskog) \u2227 NotablePeople(dagfinnAarskog) \u2227 Dagfinn(dagfinnBakke) \u2227 NotablePeople(dagfinnBakke) \u2227 Dagfinn(dagfinnDahl) \u2227 NotablePeople(dagfinnDahl)", "completion": "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl. "}
{"prompt": "Norwegian(dagfinnAarskog) \u2227 Physician(dagfinnAarskog)", "completion": "Dagfinn Aarskog is a Norwegian physician."}
{"prompt": "Norwegian(dagfinnDahl) \u2227 Barrister(dagfinnDahl)", "completion": "Dagfinn Dahl is a Norwegian barrister."}
{"prompt": "\u2200x ((Entertainment(x) \u2227 Interesting(x)) \u2192 Popular(x))", "completion": "If entertainment is interesting, it will be popular."}
{"prompt": "\u2200x (Popular(x) \u2192 WellKnown(x))", "completion": "All popular things are well-known."}
{"prompt": "\u00ac(\u2203x (LanguageModel(x) \u2227 Giant(x) \u2227 \u00acGoodPerformance(x)))", "completion": "It is not true that some giant language models do not have good performance. "}
{"prompt": "\u2200x ((LanguageModel(x) \u2227 GoodPerformance(x)) \u2192 UsedBySomeResearchers(x))", "completion": "All language models with good performance are used by some researchers."}
{"prompt": "\u2200x (UsedBySomeResearchers(x) \u2192 Popular(x))", "completion": "If a language model is used by some researchers, it is popular. "}
{"prompt": "(LanguageModel(bert) \u2227 Giant(bert)) \u2192 (LanguageModel(gpt-3) \u2227 Giant(gpt-3)).", "completion": "If BERT is a giant language model, then GPT-3 is also a giant language model. "}
{"prompt": "LanguageModel(bert) \u2227 Giant(bert) ", "completion": "BERT is a giant language model. "}
{"prompt": "Scottish(johnstone)", "completion": "St Johnstone is a Scottish team."}
{"prompt": "PartOf(johnstone, scottishpremiership)", "completion": "St Johnstone is part of the Scottish Premiership."}
{"prompt": "\u2200x \u2200y (PartOf(x, y) \u2192 Joined(x, y))", "completion": "If a team is part of the league, it has joined the league."}
{"prompt": "Different(misnk, johnstone) \u2227 Different(johnstone, minsk)", "completion": "St Johnstone and Minsk are different teams."}
{"prompt": "\u2200x \u2200y (Different(x, y) \u2192 WonGame(x, y) \u2295 WonGame(y, x))", "completion": "For two different teams, either one team wins or the other team wins."}
{"prompt": "WonGame(minsk, johnstone)", "completion": "Minsk won against St Johnstone."}
{"prompt": "\u2200x (Boeing737(x) \u2192 \u00acSeats300(x))", "completion": "No Boeing-737 plane is equipped with more than 300 seats. "}
{"prompt": "\u2200x (Delta(x) \u2192 Boeing737(x))", "completion": "All planes in Delta are of type Boeing-737. "}
{"prompt": "\u2200x (Seats300(x) \u2228 Passengers100(x))", "completion": "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. "}
{"prompt": "\u2200x (Passengers100(x) \u2192 ShortDistance(x))", "completion": "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. "}
{"prompt": "\u2200x (Passengers100(x) \u2192 ProducedBefore2010(x))", "completion": "All planes with a capacity of 100 passengers are produced before 2010. "}
{"prompt": "Boeing737(jake32) \u2295 Delta(jake32) ", "completion": "Jake32 is either a Boeing-737 plane or a plane in Delta. "}
{"prompt": "Boeing737(t10) \u2295 Delta(t10)", "completion": "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. "}
{"prompt": "Own(sat, collegeBoard) \u2227 \u00acOwn(sat, others)", "completion": "The SAT test is wholly owned and developed by the College Board."}
{"prompt": "Test(sat, readiness)", "completion": "The SAT test is intended to assess student's readiness for college."}
{"prompt": "\u2200x (Year(x) \u2227 Before2016(x) \u2192 \u00acAlignHighSchool(x)) ", "completion": "The SAT was originally designed not to be aligned with high school curricula. "}
{"prompt": "\u2203x (Year(x) \u2227 Since2016(x) \u2227 AlignHighSchool(x)) ", "completion": "Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. "}
{"prompt": "BornIn(rafaNadal, mallorca)", "completion": "Rafa Nadal was born in Mallorca."}
{"prompt": "ProfessionalTennisPlayer(rafaNadal)", "completion": "Rafa Nadal is a professional tennis player."}
{"prompt": "HighWinRatio(rafaNadal)", "completion": "Nadal's win ratio is higher than 80%."}
{"prompt": "\u2200x (ProfessionalTennisPlayer(x) \u2227 HighWinRatio(x) \u2192 InBig3(x))", "completion": "All players in the Big 3 are professionals who have a high win ratio."}
{"prompt": "\u2200x (Cookie(x) \u2192 \u00acHealthy(x))", "completion": "No cookie is healthy."}
{"prompt": "\u2200x (Oreo(x) \u2192 Cookie(x))", "completion": "All oreos are cookies."}
{"prompt": "\u2200x (Animal(x) \u2192 \u00acPlant(x))", "completion": "No animals are plants. "}
{"prompt": "\u2200x (Human(x) \u2192 Animal(x))", "completion": "All humans are animals."}
{"prompt": "\u2200x (Pupil(x) \u2192 Human(x))", "completion": "All pupils are human."}
{"prompt": "Human(jack) \u2228 Flower(jack) \u2192 Human(jack) \u2227 Flower(jack)", "completion": "If Jack is a human or a flower, then Jack is a human and a flower."}
{"prompt": "\u2200x (Shoes(x) \u2192 \u00acFood(x))", "completion": "No shoes are food. "}
{"prompt": "\u2200x (Slipper(x) \u2192 Shoes(x))", "completion": "All slippers are shoes."}
{"prompt": "\u2200x (Food(x) \u2295 Clothes(x))", "completion": "A thing is either food or clothes."}
{"prompt": "\u2200x (Wearable(x) \u2192 \u00acAirTight(x))", "completion": "No wearable things are airtight."}
{"prompt": "\u2200x (Clothes(x) \u2192 Wearable(x))", "completion": "All clothes are wearable. "}
{"prompt": "\u00ac(AirTight(watch) \u2227 Clothes(watch)) \u2192 (AirTight(watch) \u2227 Clothes(watch)) \u2295 (\u00acAirTight(watch) \u2227 \u00acClothes(watch))", "completion": "If a watch is not airtight and clothes, then a watch is either both airtight and clothes, or neither airtight nor clothes."}
{"prompt": "\u2200x (DoesOlympicSport(x) \u2227 GoesToOlympicGames(x) \u2192 IsOlympian(x))", "completion": "An Olympian is a person who trains for an Olympic sport and goes to the Olympics."}
{"prompt": "DoesOlympicSport(carlosReyes)", "completion": "Carlos Reyes trains for an Olympic sport."}
{"prompt": "GoesToOlympicGames(carlosReyes)", "completion": "Carlos Reyes went to the Olympics."}
{"prompt": "IsWelterWeight(carlosReyes)", "completion": "Carlos Reyes is a welterweight."}
{"prompt": "\u2200x (IsWelterWeight(x) \u2192 \u00acIsHeavyWeight(x))", "completion": "Heavy weights are not welterweights."}
{"prompt": "\u2200x (Decor(x) \u2192 \u00acMoveOut(x))", "completion": "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily."}
{"prompt": "\u2200x (Ambitious(x) \u2192 MoveOut(x))", "completion": "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily."}
{"prompt": "\u2200x (Fans(x) \u2192 Decor(x))", "completion": "If people are big fans of pop bands and singers, then they have a lot of decorations in their room."}
{"prompt": "\u2200x (CollegeTeen(x) \u2192 Ambitious(x))", "completion": "All young teenage girls who attend college are big fans of pop bands and singers."}
{"prompt": "Ambitious(sam) \u2192 Fans(sam)", "completion": "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."}
{"prompt": "\u2200x (Student(x) \u2227 Shriek(x) \u2192 Punished(x))", "completion": "A student who loves shrieking will be punished."}
{"prompt": "\u2200x (Swear(x) \u2192 Student(x))", "completion": "If a person swears, then he is a student."}
{"prompt": "\u2200x (Teacher(x) \u2192 Talk(bob, x))", "completion": "If someone is a teacher, then Bob will talk to him."}
{"prompt": "\u2200x (Gentleman(x) \u2192 Suit(x))", "completion": "All gentlemen are in a suit."}
{"prompt": "\u2200x (Teacher(x) \u2192 Man(x))", "completion": "All teachers are men."}
{"prompt": "\u2203x (Teacher(x))", "completion": "There is a teacher."}
{"prompt": "\u2200x (\u00acGentleman(x) \u2192 \u00acNice(x))", "completion": "If someone is not a gentlemen, then he is not nice."}
{"prompt": "Nice(willy)", "completion": "Willy is nice."}
{"prompt": "Shriek(bob) \u2227 Swear(bob)", "completion": "Bob loves shrieking and swearing."}
{"prompt": "American(quincymcduffie) \u2227 Professional(quincymcduffie) \u2227 WideReciever(quincymcduffie) \u2227 In(quincymcduffie, canadianfootball)", "completion": "Quincy McDuffie is an American professional wide receiver in Canadian Football."}
{"prompt": "\u2200x \u2203y (CanCatch(x, y) \u2227 Ball(y) \u2192 Good(x, widereciever))", "completion": "People who can catch balls are good wide receivers. "}
{"prompt": "\u2203x (Football(x) \u2227 CanCatch(quincymcduffie, x))", "completion": "Quincy McDuffie can catch many footballs easily."}
{"prompt": "\u2200x (Good(x, widereciever) \u2192 Professional(x))", "completion": "Good wide receivers play professionally."}
{"prompt": "\u2200x (Good(x, widereciever) \u2192 CanCatchWith(x, lefthand) \u2227 CanCatchWith(x, righthand))", "completion": "Good wide receivers can catch with both their left and right hand."}
{"prompt": "\u2200x (Football(x) \u2192 Ball(x))", "completion": "All footballs are balls."}
{"prompt": "RailwayStation(boves) \u2227 Locate(boves, france)", "completion": "Boves is a railway station located in France. "}
{"prompt": "Precede(boves, longueau)", "completion": "The preceding station of Boves is Longueau."}
{"prompt": "Precede(dommartin, boves)", "completion": "The preceding station of Dommartin is Boves."}
{"prompt": "Locate(france, europe)", "completion": "France is a European country."}
{"prompt": "Situate(dommartin, pairsLille)", "completion": "Dommartin is situated on the Paris\u2013Lille railway. "}
{"prompt": "\u2200x \u2200y \u2200z ((Situate(x, z) \u2227 (Precede(x, y) \u2228 Precede(y, x))) \u2192 Situate(y, z))", "completion": "Any two contiguous stations are on the same railway."}
{"prompt": "Serve(hautsDeFrance, boves)", "completion": "Boves is served by regional TER Hauts-de-France trains."}
{"prompt": "\u2200x \u2200y \u2200z ((Locate(x, y) \u2227 Locate(y, z)) \u2192 Locate(x, z))", "completion": "If A is located in B and B is located in C, then A is located in C."}
{"prompt": "\u2200x \u2200y \u2200z ((Precede(x, y) \u2227 Precede(y, z)) \u2192 Precede(x, z))", "completion": "If A precedes B and B preceds C, than A preceds C."}
{"prompt": "From(edwinsmith, newzealand) \u2227 Rower(edwinsmith) \u2227 From(edwinsmith, auckland)", "completion": "Edwin Smith was a New Zealand Rower from Auckland."}
{"prompt": "KnownAs(edwinsmith, tedsmith)", "completion": "Edwin Smith was also known as Ted Smith."}
{"prompt": "WentTo(edwinsmith, roseroadprimaryschool) \u2227 LocatedIn(roseroadprimaryschool, greylynn)", "completion": "Edwin Smith went to Rose Road Primary School, located in Grey Lynn."}
{"prompt": "Sergeant(edwinsmith) \u2227 ServedWith(edwinsmith, newzealand24thbattalion) \u2227 ServedIn(edwinsmith, italy) \u2227 ServedIn(edwinsmith, egypt)", "completion": "Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt."}
{"prompt": "Buisness(broadwaysheetmetals) \u2227 Ran(edwinsmith, broadwaysheetmetals) \u2227 Owned(edwinsmith, broadwaysheetmetals) \u2227 SheetmetalWorker(edwinsmith)", "completion": "Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker."}
{"prompt": "\u2200x (Human(x) \u2227 CanTurnInto(x, wolf) \u2192 Werewolf(x))", "completion": "A werewolf is a human that can turn into a wolf."}
{"prompt": "\u2200x \u2203y (Werewolf(x) \u2192 (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2227 Werewolf(y))", "completion": "A werewolf has been scratched or bitten by another werewolf."}
{"prompt": "\u2200x \u2203y (BittenBy(x, y) \u2228 ScratchedBy(x, y)) \u2192 AttackedBy(x,y)", "completion": "If someone has been scratched or bitten, they have been attacked."}
{"prompt": "Event(uFCFightNight) \u2227 MixedMartial(uFCFightNight) \u2227 Sweden(uFCFightNight)", "completion": "UFC Fight Night was a mixed martial arts event and was held in Sweden."}
{"prompt": "Event(uFCFightNight) \u2192 ScheduledToFight(sadollah, musoke)", "completion": "At UFC Fight Night, Sadollah was scheduled to fight Musoke."}
{"prompt": "Event(uFCFightNight) \u2192 Fight(sadollah, akiyama)", "completion": "Sadollah fought Akiyama at UFC Fight Night."}
{"prompt": "Event(uFCFightNight) \u2192 Fight(musoke, yakovlev)", "completion": "Musoke fought Yakovlev at UFC Fight Night."}
{"prompt": "Event(uFCFightNight) \u2192 Injured(jung)", "completion": "Jung was injured at UFC Fight Night."}
{"prompt": "\u2200x (Injured(x) \u2192 \u00acFightInUFC(x))", "completion": "Injured people did not fight at UFC Fight Night."}
{"prompt": "\u2200x (Drink(x) \u2192 Edible(x))", "completion": "All drinks are edible. "}
{"prompt": "\u2200x (Juice(x) \u2192 Drink(x))", "completion": "All juices are drinks. "}
{"prompt": "\u2200x (OrangeJuice(x) \u2192 Juice(x))", "completion": "All orange juice is a juice. "}
{"prompt": "\u2200x (OrangeJuice(x) \u2228 AppleJuice(x))", "completion": "A juice is either an orange juice or an apple juice."}
{"prompt": "\u2200x (AppleJuice(x) \u2192 Sweet(x))", "completion": "All apple juice is sweet."}
{"prompt": "AppleJuice(coke) \u2192 Drink(coke)", "completion": "If coke is apple juice, then coke is a drink."}
{"prompt": "\u00acAppleJuice(coke) \u2192 \u00acEdible(coke)", "completion": "If coke is not apple juice, then coke is not edible."}
{"prompt": "TalentedPoet(lorca) \u2227 SupportPopulists(lorca)", "completion": "Federico Garcia Lorca was a talented Spanish poet and he supported the Popular Front."}
{"prompt": "\u2200x (SupportPopulists(x) \u2192 Opposed(nationalists, x))", "completion": "The Spanish Nationalists opposed anyone who supported the Popular Front"}
{"prompt": "\u2200x (TalentedPoet(x) \u2192 Popular(x))", "completion": "Talented poets are popular."}
{"prompt": "\u2200x (Opposed(nationalists, x) \u2227 Popular(x) \u2192 Killed(nationalists, x))", "completion": "Spanish Nationalists killed anyone who they opposed and were popular."}
{"prompt": "SupportPopulists(daniel) \u2227 \u00acPopular(daniel)", "completion": "Daniel supported the Popular Front but was not popular."}
{"prompt": "\u2200x (Kombucha(x) \u2228 CocaCola(x))", "completion": "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day."}
{"prompt": "\u2200x (CocaCola(x) \u2192 BusyParents(x))", "completion": "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch."}
{"prompt": "\u2200x (CocaCola(x) \u2192 Dentist(x))", "completion": "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently."}
{"prompt": "\u2200x (BusyParents(x) \u2192 Erratic(x))", "completion": "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits."}
{"prompt": "\u2200x (Erratic(x) \u2192 \u00acConsistent(x))", "completion": "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule."}
{"prompt": "(BusyParents(franny) \u2227 Consistent(franny)) \u2295 (\u00acBusyParents(franny) \u2227 \u00acConsistent(franny))", "completion": "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  "}
{"prompt": "\u2200x (SubscribedTo(x, amcalist) \u2192 ThreeMovies(x) \u2227 NoFees(x))", "completion": "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. "}
{"prompt": "\u2203x (CinemaEveryWeek(x))", "completion": "Some customers go to cinemas every week. "}
{"prompt": "\u2200x (Prefer(x, tvseries) \u2192 \u00acWatchTVIn(x, cinemas))", "completion": "Customers who prefer TV series will not watch TV series in cinemas."}
{"prompt": "WatchTVIn(james, cinemas)", "completion": "James watches TV series in cinemas. "}
{"prompt": "SubscribedTo(james, amcalist)", "completion": "James subscribes to AMC A List."}
{"prompt": "Prefer(peter, tvseries)", "completion": "Peter prefers TV series."}
{"prompt": "InGenus(bulbophyllumattenuatum, bulbophyllum)", "completion": "Bulbophyllum attenuatum is in the genus bulbophyllum."}
{"prompt": "\u2200x (InGenus(x, bulbophyllum) \u2192 Orchid(x))", "completion": "All bulbophyllum are orchids."}
{"prompt": "FederalDistrictOfRussia(central) \u2228 FederalDistrictOfRussia(northwestern) \u2228 FederalDistrictOfRussia(southern) \u2228 FederalDistrictOfRussia(northcaucasian) \u2228 FederalDistrictOfRussia(volga) \u2228 FederalDistrictOfRussia(ural) \u2228 FederalDistrictOfRussia(siberian) \u2228 FederalDistrictOfRussia(fareastern)", "completion": "There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian and Far Eastern."}
{"prompt": "FederalDistrictOfRussia(central) \u2227 LargestPopulationIn(central) ", "completion": "The Central federal district has the largest population among all federal districts in Russia."}
{"prompt": "AdministrativeCenterOf(moscow, central)", "completion": "Moscow is the administrative center of the Central federal district."}
{"prompt": "AdministrativeCenterOf(yekaterinburg, ural)", "completion": "Yekaterinburg is the administrative center of the Ural federal district."}
{"prompt": "AdministrativeCenterOf(vladivostok, fareastern)", "completion": "Vladivostok is the administrative center of the Far Eastern federal district."}
{"prompt": "FederalDistrictOfRussia(fareastern) \u2227 LargestAreaIn(fareastern)", "completion": "The Far Eastern federal district has the largest area among all federal districts in Russia."}
{"prompt": "\u2203x (FederalDistrictOfRussia(x) \u2192 EstablishedIn(x, 2000))", "completion": "Some federal districts of Russia were established in 2000."}
{"prompt": "\u2200x (Cancer(x) \u2192 MalignantTumor(x))", "completion": "All cancers are malignant tumors."}
{"prompt": "\u2200x (MalignantTumor(x) \u2192 \u00acCanBeTreatedAtHome(x))", "completion": "No malignant tumor can be treated at home."}
{"prompt": "\u2200x (ColorectalCancer(x) \u2192 Cancer(x))", "completion": "All colorectal cancer is cancer."}
{"prompt": "\u2200x (HavingACold(x) \u2192 CanBeTreatedAtHome(x))", "completion": "Having a cold can be treated at home."}
{"prompt": "\u00ac(HavingACold(breastCancer) \u2295 MalignantTumor(breastCancer))", "completion": "Breast cancer is neither having a cold nor a malignant tumor (exclusive)."}
{"prompt": "\u2200x (OutsideControl(x) \u2192 \u00acShouldWorry(x))", "completion": "I should not worry about things outside of my control."}
{"prompt": "\u2200x (Traffic(x) \u2192 OutsideControl(x))", "completion": "Traffic is outside of my control."}
{"prompt": "\u2200x (UseAsSurname(x, roversi) \u2192 UseItalianSurname(x))", "completion": "Roversi is an Italian surname."}
{"prompt": "UseAsSurname(alba, roversi)", "completion": "Alba Roversi uses Roversi as a surname."}
{"prompt": "UseAsSurname(paolo, roversi)", "completion": "Paolo Roversi uses Roversi as a surname."}
{"prompt": "UseAsSurname(roberto, roversi)", "completion": "Roberto Roversi uses Roversi as a surname."}
{"prompt": "Photographer(paolo)", "completion": "Paolo Roversi is a photographer."}
{"prompt": "\u2200x (Photographer(x) \u2192 Professional(x) \u2228 Amateur(x))", "completion": "A photographer is a professional or an amateur."}
{"prompt": "British-IraqiArchitect(zahaHadid)", "completion": "Zaha Hadid is a British-Iraqi architect, artist and designer."}
{"prompt": "BornIn(zahaHadid, y1950)", "completion": "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq."}
{"prompt": "Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)", "completion": "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture."}
{"prompt": "AspiringArchitectureStudent(max) \u2227 PlansToApplyTo(max, yaleSchoolofArchitecture)", "completion": "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. "}
{"prompt": "\u2200x (InvasiveNeuroimagingTechnique(x) \u2228 NoninvasiveNeuroimagingTechnique(x)) ", "completion": "Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. "}
{"prompt": " \u2200x (NoninvasiveNeuroimagingTechnique(x) \u2192 ProvidesSpatialResolutionOfBrains(x)) ", "completion": "All noninvasive neuroimaging techniques provide a spatial resolution of brains."}
{"prompt": " \u2200x (ProvidesSpatialResolutionOfBrains(x) \u2192 MeasurementOfBrainActivity(x)) ", "completion": "If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. "}
{"prompt": " \u2200x (MeasurementOfBrainActivity(x) \u2192 UsedByNeuroscienceResearchers(x))", "completion": "All measurements of brain activity are used by neuroscience researchers."}
{"prompt": " MeasurementOfBrainActivity(fMRI) \u2295 NoninvasiveNeuroimagingTechnique(fMRI)", "completion": "FMRI is either a measurement of brain activity or a noninvasive neuroimaging technique."}
{"prompt": "\u2200x ( Present(x) \u2228 Tutorial(x))", "completion": "Either present their work at the conference or provide a tutorial session at the conference. "}
{"prompt": "\u2200x (Present(x) \u2192 InPerson(x))", "completion": "All who present their work at the conference will attend in person. "}
{"prompt": "\u2200x (Tutorial(x) \u2192 Invited(x))", "completion": "All those providing a tutorial session at the conference are invited to join the club. "}
{"prompt": "\u2200x (InPerson(x) \u2192 Souvenirs(x))", "completion": "All who attend the conference in person are provided with souvenirs. "}
{"prompt": "\u2200x (Invited(x) \u2192 Meals(x))", "completion": "All invited to join the club are provided with delicious meals. "}
{"prompt": "\u2200x (Meals(x) \u2192 HappyCommunicate(x))", "completion": "All provided with delicious meals are happy to communicate with each other during the dinner. "}
{"prompt": "\u2200x (Meals(x) \u2192 InvitedTakePhoto(x))", "completion": "All provided with delicious meals are invited to take a photo with the audience. "}
{"prompt": "\u00ac(InPerson(james) \u2227 Souvenirs(james))", "completion": "James does not attend the conference in person and is not provided with souvenirs."}
{"prompt": "HeavyCruiser(usssalem) \u2227 BuiltFor(usssalem, unitedstatesnavy)", "completion": "The USS Salem is a heavy cruiser built for the United States navy."}
{"prompt": "LastHeavyCruiserToEnterService(usssalem)", "completion": "The last heavy cruiser to enter service was the USS Salem."}
{"prompt": "MuseumShip(usssalem)", "completion": "The USS Salem is a museum ship."}
{"prompt": "\u2200x (MuseumShip(x) \u2192 OpenToPublic(x))", "completion": "Museum ships are open to the public."}
{"prompt": "ServedIn(usssalem, atlantic) \u2227 ServedIn(usssalem, mediterranean)", "completion": "The USS Salem served in the Atlantic and Mediterranean."}
{"prompt": "\u2200x (TSLeda(x) \u2192 Passenger(x) \u2227 CargoVessel(x))", "completion": "TS Leda was a good passenger and cargo vessel."}
{"prompt": "\u2200x (TSLeda(x) \u2192 Norweigian(x) \u2227 Stabilizers(x))", "completion": "TS Leda was the first Norweigian vessel that was built with stabilizers."}
{"prompt": "\u2200x (Stabilizers(x) \u2192 OnlyOnShips(x) \u2227 SteamTurbine(x))", "completion": "Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines."}
{"prompt": "\u2200x (Passenger(x) \u2227 CargoVessel(x) \u2192 Quiet(x) \u2227 GoodSea(x))", "completion": " To be a good passenger and cargo vessel, ships must be quiet and good at sea."}
{"prompt": "\u2203x (Quiet(x) \u2227 GoodSea(x) \u2227 SteamTurbine(x))", "completion": "Some ships that are quiet and good at sea have powerful steam turbine engines."}
{"prompt": "Born(rosa, santiago)", "completion": "Rosa was born in Santiago. "}
{"prompt": "Capital(santiago, chile) \u2227 LargestCity(santiago, chile)", "completion": "Santiago is the capital and largest city of Chile."}
{"prompt": "Daughter(rosa, jose) \u2227 BuildingContractor(jose) \u2227 \u00acChilean(jose)", "completion": "Rosa is the daughter of a Catalan building contractor, Jose."}
{"prompt": "Wife(jose, carmen) \u2227 Chilean(carmen)", "completion": "Jose has a Chilean wife, Carmen."}
{"prompt": "\u2200x \u2203y (BuildingContractor(x) \u2227 ConstructionSite(y) \u2192 Oversee(x, y))", "completion": "A building contractor is responsible for the day-to-day oversight of a construction site. "}
{"prompt": "IsRapper(tyga)", "completion": "Tyga is a rapper."}
{"prompt": "ReleasedAlbum(tyga, wellDone3)", "completion": "Rappers release rap albums."}
{"prompt": "\u2200x \u2200y (IsRapper(x) \u2227 ReleasedAlbum(x, y) \u2192 IsRapAlbum(y))", "completion": "Tyga released the Well Done 3 album."}
{"prompt": "\u2200x (IsRapper(x) \u2192 \u00acIsOperaSinger(x))", "completion": "Rappers are not opera singers."}
{"prompt": "BornIn(deborahwallace, scotland) \u2227 Actress(deborahwallace) \u2227 Playwright(deborahwallace) \u2227 Producer(deborahwallace)", "completion": "Deborah Wallace is a Scottish born actress, playwright and producer."}
{"prompt": "Play(psyche) \u2227 BasedOn(psyche, lifeofjamesmirandabarry)", "completion": "Psyche is a play based on the life of James Miranda Barry."}
{"prompt": "Play(homesick) \u2227 From(homesick, deborahwallace) \u2227 Play(psyche) \u2227 From(psyche, deborahwallace) \u2227 Play(thevoid) \u2227 From(thevoid, deborahwallace)", "completion": "Homesick, Psyche and The Void are plays from Deborah Wallace."}
{"prompt": "Co-Produced(deborahwallace, gasland)", "completion": "Deborah Wallace co-produced Gasland."}
{"prompt": "\u2200x (NeedsLargeTerritory(x) \u2192 TravelFar(x))", "completion": "If an animal needs a large territory, then it travels far."}
{"prompt": "\u2200x (EatsALot(x) \u2192 NeedsLargeTerritory(x))", "completion": "Everything that eats a lot needs a large territory."}
{"prompt": "\u2200x (BigAnimal(x) \u2192 EatsALot(x))", "completion": "If something is a big animal, then it will eat a lot."}
{"prompt": "\u2200x (Bear(x) \u2192 BigAnimal(x))", "completion": "All bears are big animals."}
{"prompt": "BigAnimal(larry)", "completion": "Larry is a big animal."}
{"prompt": "\u2200x (Criminal(x) \u2192 \u00acKind(x))", "completion": "No criminal is kind. "}
{"prompt": "\u2200x (BreakLaw(x) \u2192 Criminal(x))", "completion": "All person who breaks the law is a criminals."}
{"prompt": "\u2200x (Kind(x) \u2295 Evil(x))", "completion": "People are either kind or evil."}
{"prompt": "\u2200x (Evil(x) \u2192 Ugly(x))", "completion": "If someone is evil, then they are ugly."}
{"prompt": "\u2200x (Evil(x) \u2192 ColdBlood(x))", "completion": "If someone is evil, then they are cold-blood."}
{"prompt": "((Evil(garry) \u2227 Ugly(garry)) \u2295 (\u00acEvil(garry) \u2227 \u00acUgly(garry))) \u2192 \u00acEvil(garry)", "completion": "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil."}
{"prompt": "IndiePop(phoenix)", "completion": "Phoneix's music is classified under the indie pop genre."}
{"prompt": "Band(phoenix) \u2227 France(phoenix)", "completion": "Phoenix is a band from France."}
{"prompt": "\u2200x \u2200y (Band(x) \u2227 France(x) \u2227 Make(x, y) \u2192 FrenchSong(y) \u2295 EnglishSong(y))", "completion": "French bands write songs in French or in English."}
{"prompt": "\u2200x (IndiePop(x) \u2192 \u00acPopRock(x) \u2227 \u00acSynthPop(x))", "completion": "Aside from indie pop, pop rock and synth-pop are two other genres of music."}
{"prompt": "\u2200x (Make(phoenix, x) \u2192 \u00acFrenchSong(x))", "completion": "Phoneix has no songs in French."}
{"prompt": "\u2200x (TalentShows(x) \u2192 Engaged(x))", "completion": "If people perform in school talent shows often, then they attend and are very engaged with school events."}
{"prompt": "\u2200x (TalentShows(x) \u2228 Inactive(x))", "completion": "People either perform in school talent shows often or are inactive and disinterested members of their community."}
{"prompt": "\u2200x (Chaperone(x) \u2192 \u00acStudents(x))", "completion": "If people chaperone high school dances, then they are not students who attend the school."}
{"prompt": "\u2200x (Inactive(x) \u2192 Chaperone(x))", "completion": "All people who are inactive and disinterested members of their community chaperone high school dances."}
{"prompt": "\u2200x (AcademicCareer(x) \u2192 Students(x))", "completion": "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school."}
{"prompt": "(Engaged(bonnie) \u2227 Students(bonnie)) \u2295 (\u00acEngaged(bonnie) \u2227 \u00acStudents(bonnie))", "completion": "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. "}
{"prompt": "Engaged(bonnie)", "completion": "Bonnie performs in school talent shows often."}
{"prompt": "AcademicCareer(bonnie) \u2295 Chaperone(bonnie) \u2192 AcademicCareer(bonnie) \u2295 Inactive(bonnie)", "completion": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community."}
{"prompt": "Chaperone(bonnie) \u2295 TalentShows(bonnie) \u2192 AcademicCareer(bonnie) \u2227 Inactive(bonnie))", "completion": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community."}
{"prompt": "\u2200x (Meeting(x) \u2192 AppearInCompany(x))", "completion": "All employees who schedule a meeting with their customers will appear in the company today. "}
{"prompt": "\u2200x (LunchInCompany(x) \u2192 Meetings(x))", "completion": "Everyone who has lunch in the company schedules meetings with their customers. "}
{"prompt": "\u2200x (LunchInCompany(x) \u2228 LunchAtHome(x))", "completion": "Employees will either have lunch in the company or have lunch at home."}
{"prompt": "\u2200x (LunchAtHome(x) \u2192 WorkRemotelyFromHome(x))", "completion": "If an employee has lunch at home, then he/she is working remotely from home."}
{"prompt": "\u2200x (InOtherCountries(x) \u2192 WorkRemotelyFromHome(x))", "completion": "All employees who are in other countries work remotely from home. "}
{"prompt": "\u2200x (Manager(x) \u2192 \u00acWorkRemotelyFromHome(x))", "completion": "No managers work remotely from home. "}
{"prompt": "Manager(james) \u2295 AppearInCompany(james)", "completion": "James is either a manager and appears in the company today or neither a manager nor appears in the company today."}
{"prompt": "LunchInCompany(james)", "completion": "James has lunch in the company."}
{"prompt": "\u00acLunchInCompany(james)", "completion": "James does not have lunch in the company."}
{"prompt": "(Manager(james) \u2295 InOtherCountries(james)) \u2192 (LunchAtHome(james) \u2295 WorkRemotelyFromHome(james))", "completion": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home."}
{"prompt": "\u2203x (OccurMonkeypoxVirus(x) \u2227 GetMonkeypox(x))", "completion": "Monkeypox is an infectious disease caused by the monkeypox virus."}
{"prompt": "\u2203x (Animal(x) \u2227 OccurMonkeypoxVirus(x))", "completion": "Monkeypox virus can occur in certain animals, including humans."}
{"prompt": "\u2200x (Human(x) \u2192 Mammal(x))", "completion": "Humans are mammals."}
{"prompt": "\u2203x (GetMonkeypox(x) \u2227 (Fever(x) \u2228 Headache(x) \u2228 MusclePain(x) \u2228 Tired(x)))", "completion": "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on."}
{"prompt": "\u2200x (Human(x) \u2227 Flu(x) \u2192 Tired(x))", "completion": "People feel tired when they get a glu."}
{"prompt": "\u2203x (Animal(x))", "completion": "There is an animal."}
{"prompt": "\u2200x (Human(x) \u2192 \u00acFlu(x))", "completion": "No one gets flu."}
{"prompt": "\u2203x (GetMonkeypox(x) \u2227 Coughing(x))", "completion": "Symptons of Monkeypox include coughing."}
{"prompt": "\u2200x (WildTurkey(x) \u2192 (Eastern(x) \u2228 Osceola(x) \u2228 Goulds(x) \u2228 Merriams(x) \u2228 Riogrande(x) \u2228 Ocellated(x)))", "completion": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild"}
{"prompt": "\u00ac(WildTurkey(tom) \u2227 Eastern(tom))", "completion": "turkey, Rio Grande wild turkey, and Ocellated wild turkey."}
{"prompt": "\u00ac(WildTurkey(tom) \u2227 Osceola(tom))", "completion": "Tom is not an Eastern wild turkey."}
{"prompt": "WildTurkey(tom) \u2192 \u00ac(Goulds(tom) \u2228 Merriams(tom) \u2228 Riogrande(tom))", "completion": "Tom is not an Osceola wild turkey."}
{"prompt": "WildTurkey(tom)", "completion": "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey."}
{"prompt": "Ocellated(tom)", "completion": "Tom is an Ocellated wild turkey."}
{"prompt": "Eastern(tom)", "completion": "Tom is an Eastern wild turkey."}
{"prompt": "WildTurkey(joey)", "completion": "Joey is a wild turkey."}
{"prompt": "\u2203x (Japanese(x) \u2227 VideoGameCompany(x) \u2227 Game(thelegendofzelda) \u2227 Created(x, thelegendofzelda))", "completion": "A Japanese game company created the game the Legend of Zelda."}
{"prompt": "\u2200x \u2200y (Game(x) \u2227 InTop10(x) \u2227 Created(x, y) \u2192 Japanese(y))", "completion": "All games in the Top 10 list are made by Japanese game companies."}
{"prompt": "\u2200x (Game(x) \u2227 SellsMoreThan(x, onemillioncopies) \u2192 Top10(x))", "completion": "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list."}
{"prompt": "SellsMoreThan(thelegendofzelda, onemillioncopies)", "completion": "The Legend of Zelda sold more than one million copies."}
{"prompt": "Top10(thelegendofzelda)", "completion": "The Legend of Zelda is in the Top 10 list."}
{"prompt": "\u2200x (Created(fifa22, x) \u2192 Japanese(x) \u2227 VideoGameCompany(x))", "completion": "FIFA 22 is made by a Japanese video game company."}
{"prompt": "\u00acTop10(thelegendofzelda)", "completion": "The Legend of Zelda is not in the Top 10 list."}
{"prompt": "\u2200x (Square(x) \u2192 FourSides(x))", "completion": "All squares have four sides."}
{"prompt": "\u2200x (FourSides(x) \u2192 IsShape(x))", "completion": "All four-sided things are shapes. "}
{"prompt": "\u2200x (Square(x) \u2192 IsShape(x))", "completion": "All squares are shapes."}
{"prompt": "\u2200x (Rabbit(x) \u2192 Cute(x))", "completion": "All rabbits are cute. "}
{"prompt": "\u2203x (Turtle(x))", "completion": "Some turtles exist. "}
{"prompt": "\u2200x (Rabbit(x) \u2228 Squirrel(x))", "completion": "An animal is either a rabbit or a squirrel."}
{"prompt": "\u2200x (Skittish(x) \u2192 \u00acStill(x))", "completion": "If something is skittish, then it is not still."}
{"prompt": "\u2200x (Squirrel(x) \u2192 Skittish(x))", "completion": "All squirrels are skittish."}
{"prompt": "Still(rock)", "completion": "Rock is still."}
{"prompt": "Turtle(rock)", "completion": "Rock is a turtle."}
{"prompt": "\u00acTurtle(rock)", "completion": "Rock is not a turtle."}
{"prompt": "Turtle(rock) \u2228 Cute(rock)", "completion": "Rock is a turtle or cute."}
{"prompt": "\u00ac(Turtle(rock) \u2227 Squirrel(rock)) \u2192 Cute(rock) \u2295 Skittish(rock)", "completion": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish."}
{"prompt": "Cute(rock) \u2227 Still(rock) \u2192 Turtle(rock) \u2227 Skittish(rock)", "completion": "If Rock is cute and still, then Rock is a turtle and skittish."}
{"prompt": "NetflixShow(strangerThings) \u2227 Popular(strangerThings)", "completion": "\"Stranger Things\" is a popular Netflix show."}
{"prompt": "\u2200x ((NetflixShow(x) \u2227 Popular(x)) \u2192 BingeWatch(karen, x))", "completion": "If a Netflix show is popular, Karen will binge-watch it."}
{"prompt": "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2194 Download(karen, x))", "completion": "If and only if Karen binge-watches a Netflix show, she will download it."}
{"prompt": "\u00acDownload(karen, blackMirror)", "completion": "Karen does not download \"Black Mirror\"."}
{"prompt": "NetflixShow(blackMirror)", "completion": "\"Black Mirror\" is a Netflix show."}
{"prompt": "\u2200x ((NetflixShow(x) \u2227 BingeWatch(karen, x)) \u2192 Share(x, lisa))", "completion": "If Karen binge-watches a Netflix show, she will share it to Lisa."}
{"prompt": "Share(strangerThings, lisa)", "completion": "Karen will share \"Stranger Things\" to Lisa."}
{"prompt": "Popular(blackMirror)", "completion": "\"Black Mirror\" is popular."}
{"prompt": "Share(blackMirror, lisa)", "completion": "Karen will share \"Black Mirror\" to Lisa."}
{"prompt": "CapitalOf(beijing, prx)", "completion": "Beijing is the capital of the People's Republic of China. "}
{"prompt": "MostPopulousNationalCapitalCity(beijing)", "completion": "Beijing is the world's most populous national capital city."}
{"prompt": "InNorthernChina(beijing)", "completion": "Beijing is located in Northern China."}
{"prompt": "Hosted(beijing, summer2008olympic) \u2227 Hosted(beijing, summer2008paralympicgames)", "completion": "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games."}
{"prompt": "Hosted(beijing, summerolympic) \u2227 Hosted(beijing, winterolympic) \u2227 Hosted(beijing, summerparalympicgames)  \u2227 Hosted(beijing, winterparalympicgames)", "completion": "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics"}
{"prompt": "\u2203x (BeijingUniversity(x) \u2227 ConsistentlyRankAmongTheBest(x))", "completion": "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world."}
{"prompt": "Hosted(beijing, summer2008olympic) \u2227 Hosted(beijing, winterolympic)", "completion": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics."}
{"prompt": "InSouthernChina(beijing)", "completion": "Beijing is located in southern China."}
{"prompt": "SecondLargestChineseCity(beijing)", "completion": "Beijing is the second largest Chinese city by urban population."}
{"prompt": "\u2200x (Alien(x) \u2192 Extraterrestrial(x))", "completion": "All aliens are extraterrestrial."}
{"prompt": "\u2200x (FromMars(x) \u2192 Alien(x))", "completion": "If someone is from Mars, then they are aliens."}
{"prompt": "\u2200x (Extraterrestrial(x) \u2192 \u00acHuman(x))", "completion": "No extraterrestrial is human."}
{"prompt": "\u2200x (FromEarth(x) \u2192 Human(x))", "completion": "Everyone from Earth is a human."}
{"prompt": "\u00acFromEarth(marvin) \u2227 \u00acFromMars(marvin)", "completion": "Marvin cannot be from Earth and from Mars."}
{"prompt": "\u00acFromEarth(marvin) \u2192 Extraterrestrial(marvin)", "completion": "If Marvin is not from Earth, then Marvin is an extraterrestrial."}
{"prompt": "Alien(marvin)", "completion": "Marvin is an alien."}
{"prompt": "\u00acHuman(marvin) \u2227 \u00acFromMars(marvin)", "completion": "Marvin is neither a human nor from Mars."}
{"prompt": "\u00acFromMars(marvin) \u2192 Human(marvin)", "completion": "If Marvin is not from Mars, then Marvin is a human."}
{"prompt": "\u2200x (GrandSlamChampion(x) \u2295 OscarNominatedActor(x))", "completion": "A person is either a Grand Slam champion or an Oscar-nominated actor."}
{"prompt": "\u2200x (GrandSlamChampion(x) \u2192 ProfessionalTennisPlayer(x))", "completion": "All people who are Grand Slam champions are professional tennis players."}
{"prompt": "\u2200x (OscarNominatedActor(x) \u2192 Celebrity(x))", "completion": "All Oscar-nominated actors are celebrities."}
{"prompt": "\u2200x (ProfessionalTennisPlayer(x) \u2192 Athlete(x))", "completion": "All professional tennis players are athletes."}
{"prompt": "\u2200x (Celebrity(x) \u2192 WellPaid(x))", "completion": "If a person is a celebrity then they are well paid."}
{"prompt": "\u2200x (Athlete(x) \u2192 Famous(x))", "completion": "If a person is an athlete then they are famous."}
{"prompt": "\u2200x (WellPaid(x) \u2192 LivesInTaxHaven(x))", "completion": "All well-paid people live in tax havens."}
{"prompt": "Famous(djokovic) \u2227 Athlete(djokovic) \u2192 LivesInTaxHaven(djokovic)", "completion": "If Djokovic is famous and is an athlete, then Djokovic lives in well paid."}
{"prompt": "GrandSlamChampion(djokovic)", "completion": "Djokovic is a Grand Slam champion."}
{"prompt": "LivesInTaxHaven(djokovic)", "completion": "Djokovic lives in a tax haven."}
{"prompt": "\u00acLivesInTaxHaven(djokovic)", "completion": "Djokovic does not live in a tax haven."}
{"prompt": "ProfessionalWrestlingStable(diamondmine) \u2227 FormedIn(diamondmine, wwe)", "completion": "Diamond Mine is a professional wrestling stable, formed in WWE."}
{"prompt": "Leads(roderickstrong, diamondmine)", "completion": "Roderick Strong leads Diamond Mine."}
{"prompt": "Includes(diamondmine, creedbrothers) \u2227 Includes(diamondmine, ivynile)", "completion": "Diamond Mine includes the Creed Brothers, and Ivy Nile."}
{"prompt": "HasFeud(imperium, diamondmine)", "completion": "Imperium has a feud with Diamond Mine."}
{"prompt": "\u2203x (Leads(roderickstrong, x) \u2227 ProfessionalWrestlingStable(x))", "completion": "Roderick strong leads a professional wrestling stable."}
{"prompt": "Leads(roderickstrong, creedbrothers)", "completion": "Roderick strong leads the Creed Brothers."}
{"prompt": "\u2200x (ProfessionalWrestlingStable(x) \u2227 Includes(x, ivynile) \u2192 \u00acHasFeud(imperium, x))", "completion": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile."}
{"prompt": "MusicPiece(symphony9)", "completion": "Symphony No. 9 is a music piece."}
{"prompt": "\u2200x \u2200y ((MusicPiece(x) \u2227 Writtenby(x, y)) \u2192 Composer(y))", "completion": "Composers write music pieces."}
{"prompt": "Writtenby(symphony9, beethoven)", "completion": "Beethoven wrote Symphony No. 9."}
{"prompt": "Premiered(viennamusicsociety, symphony9)", "completion": "Vienna Music Society premiered Symphony No. 9."}
{"prompt": "Orchestra(viennamusicsociety)", "completion": "Vienna Music Society is an orchestra."}
{"prompt": "Lead(beethoven, viennamusicsociety)", "completion": "Beethoven leads the Vienna Music Society."}
{"prompt": "\u2200x \u2200y ((Orchestra(x) \u2227 Lead(y, x)) \u2192 Conductor(y))", "completion": "Orchestras are led by conductors."}
{"prompt": "Composer(beethoven)", "completion": "Beethoven is a composer."}
{"prompt": "\u2203x \u2203y (Orchestra(x) \u2227 MusicPiece(y) \u2227 Premiered(x, y))", "completion": "Some orchestras premiered music pieces."}
{"prompt": "\u00acConductor(beethoven)", "completion": "Beethoven is not a conductor."}
{"prompt": "\u2200x (ZahaHadidDesignStyle(x) \u2192 Timeless(x))", "completion": "All of Zaha Hadid's design styles are timeless."}
{"prompt": "\u2200x (MassProductDesign(x) \u2192 \u00acTimeless(x))", "completion": "No mass product design is timeless."}
{"prompt": "\u2200x (ZahaHadidDesignStyle(x) \u2228 KellyWearstlerDesignStyle(x)) ", "completion": "Either Zaha Hadid's design style or Kelly Wearstler's design style. "}
{"prompt": "\u2200x (KellyWearstlerDesignStyle(x) \u2192 Evocative(x))", "completion": "All of Kelly Wearstler's design styles are evocative."}
{"prompt": "\u2200x (KellyWearstlerDesignStyle(x) \u2192 Dreamy(x))", "completion": "All of Kelly Wearstler's design styles are dreamy."}
{"prompt": "Timeless(aDesignByMax) \u2192 MassProductDesign(aDesignByMax) \u2227 Evocative(aDesignByMax)", "completion": "If a design by Max is timeless, then a design by Max is a mass product design and evocative."}
{"prompt": "MassProductDesign(aDesignByMax)", "completion": "A design by Max is a mass product design."}
{"prompt": "Evocative(aDesignByMax) \u2227 Dreamy(aDesignByMax)", "completion": "A design by Max is evocative and dreamy."}
{"prompt": "Evocative(aDesignByMax) \u2295 Dreamy(aDesignByMax)", "completion": "A design by Max is either evocative or dreamy."}
{"prompt": "\u2200x (RankedHighlyByWomenTennisAssociation(x) \u2192 AmongMostActivePlayersInMajorTennis(x))", "completion": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. "}
{"prompt": "\u2200x (LostToIga\u015awi\u0105tek(x) \u2192 RankedHighlyByWomenTennisAssociation(x))", "completion": "Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association."}
{"prompt": "\u2200x (FemaleTennisPlayersAtRolandGarros2022(x) \u2192 LostToIga\u015awi\u0105tek(x)) ", "completion": "All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek."}
{"prompt": "\u2200x (FemaleTennisPlayersAtRolandGarros2022(x) \u2228 MaleTennisPlayersAtRolandGarros2022(x)) ", "completion": "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. "}
{"prompt": "\u2200x (MaleTennisPlayersAtRolandGarros2022(x) \u2192 LostToRafaelNadal(x))", "completion": "All male tennis players at Roland Garros 2022 lost to Rafael Nadal."}
{"prompt": "RankedHighlyByWomenTennisAssociation(cocoGauff) \u2228 LostToRafaelNadal(cocoGauff) \u2192 \u00acMaleTennisPlayersAtRolandGarros2022(cocoGauff)", "completion": "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."}
{"prompt": "AmongMostActivePlayersInMajorTennis(cocoGauff)", "completion": "Coco Gauff is among the most active players in major tennis."}
{"prompt": "LostToRafaelNadal(cocoGauff)", "completion": "Coco Gauff has lost to Rafael Nadal."}
{"prompt": "\u00acLostToIga\u015awi\u0105tek(cocoGauff) \u2228 \u00acAmongMostActivePlayersInMajorTennis(cocoGauff)", "completion": "Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis."}
{"prompt": "\u2203x (Pet(x) \u2227 \u00acMammal(x))", "completion": "Some pets are not mammals."}
{"prompt": "\u2200x (Pet(x) \u2192 \u00acCat(x))", "completion": "No pets are cats."}
{"prompt": "Season(spring) \u2228 Season(summer) \u2228 Season(fall) \u2228 Season(winter)", "completion": "[BG] There are four seasons in a year: Spring, Summer, Fall, and Winter."}
{"prompt": "\u2200x (WantlongVacation(x) \u2192 Love(x, summer))", "completion": "All students who want to have a long vacation love summer the most."}
{"prompt": "Love(emma, summer)", "completion": "Emma's favorite season is summer."}
{"prompt": "\u00acLove(mia, emma)", "completion": "Mia's favorite season is not the same as Emma's. "}
{"prompt": "WantlongVacation(james)", "completion": "James wants to have a long vacation."}
{"prompt": "Love(james, summer)", "completion": "James's favorite season is summer."}
{"prompt": "Love(james, fall)", "completion": "James's favorite season is fall."}
{"prompt": "Love(mia, spring)", "completion": "Mia's favorite season is spring."}
{"prompt": "\u2200x (Digital(x) \u2192 \u00acAnalog(x))", "completion": "No digital media are analog."}
{"prompt": "\u2200x (PrintedText(x) \u2192 Analog(x))", "completion": "Every printed text is analog."}
{"prompt": "\u2200x (StreamingService(x) \u2192 Digital(x))", "completion": "All streaming services are digital."}
{"prompt": "\u2200x (HardcoverBook(x) \u2192 PrintedText(x))", "completion": "If an object is a hardcover book then it is printed text."}
{"prompt": "StreamingService(y1984) \u2192 HardcoverBook(y1984)", "completion": "If 1984 is a streaming service, then 1984 is a hardcover book."}
{"prompt": "PrintedText(y1984)", "completion": "1984 is printed text."}
{"prompt": "StreamingService(y1984)", "completion": "1984 is a streaming service."}
{"prompt": "\u00acStreamingService(y1984)", "completion": "1984 is not a streaming service."}
{"prompt": "\u2200x (RomanceLanguage(x) \u2192 IndoEuropeanLanguage(x))", "completion": "All Romance languages are Indo-European languages."}
{"prompt": "\u2200x (RomanceLanguage(x) \u2192 MemberOf(x, romancefamily))", "completion": "The Romance languages are a language family."}
{"prompt": "\u2200x \u2200y \u2200z ((MemberOf(x, z) \u2227 MemberOf(y, z)) \u2192 (Related(x, y) \u2227 Related(y, x)))", "completion": "All languages within a language family are related to each other."}
{"prompt": "RomanceLanguage(french) \u2227 RomanceLanguage(spanish)", "completion": "French and Spanish are both Romance languages."}
{"prompt": "Related(german, spanish)", "completion": "German is related to Spanish."}
{"prompt": "\u2200x (\u00acRelated(basque, x))", "completion": "Basque is not related to any other language."}
{"prompt": "RomanceLanguage(basque)", "completion": "Basque is a Romance language."}
{"prompt": "RomanceLanguage(german)", "completion": "German is a Romance language."}
{"prompt": "IndoEuropeanLanguage(french)", "completion": "French is an Indo-European language."}
{"prompt": "IsStriker(robertLewandowski)", "completion": "Robert Lewandowski is a striker."}
{"prompt": "\u2200x (IsStriker(x) \u2192 IsSoccerPlayer(x))", "completion": "[BG] Strikers are soccer players."}
{"prompt": "LeftTeam(robertLewandowski, bayernMunchen)", "completion": "Robert Lewandowski left Bayern Munchen."}
{"prompt": "\u2200x \u2200y (LeftTeam(x, y) \u2192 \u00acPlaysForTeam(x, y))", "completion": "[BG] If a player left a team they no longer play for that team."}
{"prompt": "IsSoccerPlayer(robertLewandowski)", "completion": "Robert Lewandowski is a soccer player."}
{"prompt": "PlaysForTeam(robertLewandowski, bayernMunchen)", "completion": "Robert Lewandowski plays for Bayern Munchen."}
{"prompt": "IsSoccerStar(robertLewandowski)", "completion": "Robert Lewandowski is a star."}
{"prompt": "CityIn(billings, montana)", "completion": "Billings is a city in Montana."}
{"prompt": "CityIn(butte, montana) \u2227 CityIn(helena, montana) \u2227 CityIn(missoula, montana)", "completion": "Montana includes the cities of Butte, Helena, and Missoula."}
{"prompt": "\u2203x (CityIn(whitesulphursprings, x) \u2227 CityIn(butte, x))", "completion": "White Sulphur Springs and Butte are cities in the same state."}
{"prompt": "\u00acCityIn(pierre, montana)", "completion": "The city of Pierre is not in Montana."}
{"prompt": "\u2200x (CityIn(butte, x) \u2192 \u00acCityIn(pierre, x))", "completion": "Any city in Butte is not in Pierre."}
{"prompt": "\u2203x (CityIn(butte, x) \u2227 CityIn(pierre, x))", "completion": "Butte and Pierre are in the same state."}
{"prompt": "\u2203x (CityIn(pierre, x) \u2227 CityIn(bismarck, x))", "completion": "Pierre and Bismarck are in the same state."}
{"prompt": "CityIn(missoula, montana)", "completion": "Montana is home to the city of Missoula."}
{"prompt": "\u2200x (InternationalStudent(x) \u2192 F1(x) \u2295 J1(x))", "completion": "International students in US have either an F1 visa or a J1 visa."}
{"prompt": "\u2200x (InternationalStudent(x) \u2227 F1(x) \u2227 WantWorkInUS(x) \u2192 Apply(x, cpt) \u2228 Apply(x, opt))", "completion": "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US."}
{"prompt": "InternationalStudent(mike)", "completion": "Mike is an international student."}
{"prompt": "WantWorkInUS(mike) \u2192 Apply(mike, cpt)", "completion": "Mike needs to apply for CPT if he wants to work in the US."}
{"prompt": "F1(mike)", "completion": "Mike has an F1 visa."}
{"prompt": "J1(mike)", "completion": "Mike has a J1 visa."}
{"prompt": "\u2200x (Cow(x) \u2192 Bovine(x))", "completion": "All cows are bovines."}
{"prompt": "\u2203x (Pet(x) \u2227 Cow(x))", "completion": "Some pets are cows."}
{"prompt": "\u2200x (Bovine(x) \u2192 Domesticated(x))", "completion": "If something is a bovine, then it is domesticated."}
{"prompt": "\u2200x (Domesticated(x) \u2192 \u00acAligator(x))", "completion": "No domesticated animals are alligators."}
{"prompt": "Aligator(ted)", "completion": "Ted is an aligator."}
{"prompt": "Pet(ted)", "completion": "Ted is a pet."}
{"prompt": "Pet(ted) \u2227 Cow(ted)", "completion": "Ted is a pet and a cow."}
{"prompt": "Cow(ted) \u2192 \u00acPet(ted)", "completion": "If Ted is a cow, then Ted is not a pet."}
{"prompt": "PrivateIvyLeagueResearchUniversity(yale)", "completion": "Yale University is a private Ivy League research university."}
{"prompt": "MovedTo(yale, newhaven) \u2227 MovedIn(yale, y1716)", "completion": "Yale University moved to New Haven in 1716."}
{"prompt": "ValuedAt(yalesendowment, y42.3billion)", "completion": "Yale university's endowment was valued at $42.3 billion."}
{"prompt": "\u2203x (OrganizedInto(yale, x) \u2227 ConstituentCollegesandSchools(x) \u2227 ((ResidentialCollege(x) \u2295 GraduateSchool(x)) \u2295 ProfessionalSchool(x)))", "completion": "Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools."}
{"prompt": "ResidentialCollege(benjaminfranklincollege) \u2227 AtYale(benjaminfranklincollege) \u2227 ResidentialCollege(berkeleycollege) \u2227 AtYale(berkeleycollege) \u2227 ResidentialCollege(branfordcollege) \u2227 AtYale(branfordcollege) \u2227 ResidentialCollege(davenportcollege) \u2227 AtYale(davenportcollege) \u2227 ResidentialCollege(ezrastilescollege) \u2227 AtYale(ezrastilescollege) \u2227 ResidentialCollege(gracehoppercollege) \u2227 AtYale(gracehoppercollege) \u2227 ResidentialCollege(jonathanedwardscollege) \u2227 AtYale(jonathanedwardscollege) \u2227 ResidentialCollege(morsecollege) \u2227 AtYale(morsecollege) \u2227 ResidentialCollege(paulimurraycollege) \u2227 AtYale(paulimurraycollege) \u2227 ResidentialCollege(piersoncollege) \u2227 AtYale(piersoncollege) \u2227 ResidentialCollege(saybrookcollege) \u2227 AtYale(saybrookcollege) \u2227 ResidentialCollege(sillimancollege) \u2227 AtYale(sillimancollege) \u2227 ResidentialCollege(timothydwightcollege) \u2227 AtYale(timothydwightcollege) \u2227 ResidentialCollege(trumbullcollege) \u2227 AtYale(trumbullcollege)", "completion": "A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."}
{"prompt": "\u2203x (PrivateIvyLeagueResearchUniversity(x) \u2227 MovedTo(x, newhaven))", "completion": "A private Ivy League research university moved to New Haven."}
{"prompt": "LargestUniversityEndowmentOf(yale, anyeducationalinstitution)", "completion": "Yale University has the largest university endowment of any educational institution."}
{"prompt": "ResidentialCollege(piersoncollege) \u2227 AtYale(piersoncollege)", "completion": "Pierson College is a residential college at Yale."}
{"prompt": "\u2203x (MemberOf(x, pappys) \u2227 BritishSitcom(badults) \u2227 Series(badults) \u2227 Starring(badults, x))", "completion": "Badults is a British Sitcom series, starring members of Pappy's."}
{"prompt": "PilotedIn(badults, july2013) \u2227 PilotedOn(badults, bbcthree)", "completion": "Badults piloted in July 2013 on BBC Three."}
{"prompt": "WorkingTitle(thesecretdudesociety, badults)", "completion": "The Working title \"The Secret Dude Society\" was used for Badults."}
{"prompt": "ScriptEditor(andrewcollins) \u2227 ScriptEditorFor(andrewcollins, badults)", "completion": "Andrew Collins was the script editor for Badults"}
{"prompt": "\u2203x (ScriptEditorFor(andrewcollins, x) \u2227 Series(x) \u2227 WorkingTitle(thesecretdudesociety, x))", "completion": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\"."}
{"prompt": "\u2200x \u2200y (MemberOf(x, pappys) \u2227 Starring(y, x) \u2192 \u00ac(PilotedOn(y, bbctwo) \u2228 PilotedOn(y, bbcthree)))", "completion": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three."}
{"prompt": "\u2200x (GrowthCompanies\u2019Stocks(x) \u2192 PriceVolatile(x))", "completion": "All growth companies\u2019 stocks are volatile."}
{"prompt": " \u2200x (PriceVolatile(x) \u2192 \u00acSuitableForRetirementRund(x)) ", "completion": "If the stock price is volatile, then it is not suitable for a retirement fund."}
{"prompt": " \u2203x (Companies\u2019Stocks(x) \u2227 GrowthCompanies\u2019Stocks(x))", "completion": "Some companies\u2019 stocks are growth companies\u2019 stocks."}
{"prompt": " \u2200x (MatureCompanies\u2019Stocks(x) \u2192 SuitableForRetirementRund(x))", "completion": "All mature companies\u2019 stocks are suitable for a retirement fund."}
{"prompt": " MatureCompanies\u2019Stocks(kO)", "completion": "KO is a mature company\u2019s stock."}
{"prompt": "Companies\u2019Stocks(kO)", "completion": "KO is a company stock."}
{"prompt": "Companies\u2019Stocks(kO) \u2227 GrowthCompanies\u2019Stocks(kO)", "completion": "KO is a company stock and a growth company\u2019s stock."}
{"prompt": "GrowthCompanies\u2019Stocks(kO) \u2228 PriceVolatile(kO) \u2192 \u00acCompanies\u2019Stocks(kO) \u2228 \u00acPriceVolatile(kO)", "completion": "If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile."}
{"prompt": "\u2200x (Vehicleregistrationplate(x, istanbul) \u2192 Beginwith(x, number34))", "completion": "All vehicle registration plates in Istanbul begin with the number 34."}
{"prompt": "\u2200x (\u00acBeginwith(x, number34) \u2192 \u00acFromIstanbul(x))", "completion": "Plates that do not begin with the number 34 are not from Istanbul. "}
{"prompt": "Vehicleregistrationplate(joe, istanbul)", "completion": "Joe's vehicle registration plate is from Istanbul. "}
{"prompt": "Beginwith(tom, number35)", "completion": "Tom's license plate begins with the number 35. "}
{"prompt": "\u2200x (Beginwith(x, number35) \u2192 \u00acBeginwith(x, number34))", "completion": "[BG] If a license plate begins with the number 35, then it does not begin with the number 34."}
{"prompt": "Beginwith(joe, number34)", "completion": "Joe's license plate begins with the number 34."}
{"prompt": "Vehicleregistrationplate(tom, istanbul)", "completion": "Tom's license plate is from Istanbul."}
{"prompt": "\u2200x (StudentJobs(x) \u2192 Tuition(x))", "completion": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition."}
{"prompt": "\u2200x (Takeout(x) \u2192 StudentJobs(x))", "completion": "If people order takeout frequently in college, then they work in student jobs on campus."}
{"prompt": "\u2200x (Takeout(x) \u2228 DiningHall(x))", "completion": "People either order takeout frequently in college or enjoy the dining hall meals and recipes."}
{"prompt": "\u2200x (DiningHall(x) \u2192 NotPicky(x))", "completion": "If people enjoy the dining hall meals and recipes, then they are not picky eaters."}
{"prompt": "\u2200x (DiningHall(x) \u2192 Eating(x))", "completion": "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls."}
{"prompt": "StudentJobs(mary) \u2227 Tuition(mary) \u2192 \u00ac(NotPicky(mary) \u2228 Tuition(mary))", "completion": "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition."}
{"prompt": "Tuition(mary)", "completion": "Mary needs to earn money to help pay for her college tuition."}
{"prompt": "NotPicky(mary) \u2227 Eating(mary)", "completion": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls."}
{"prompt": "NotPicky(mary) \u2295 Eating(mary)", "completion": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls."}
{"prompt": "\u2200x (Bakery(x) \u2192 \u00acSpicy(x))", "completion": "No bakery is spicy."}
{"prompt": "\u2200x (Cupcakes(x) \u2192 Bakery(x))", "completion": "All cupcakes are bakeries."}
{"prompt": "\u2200x (Hotpot(x) \u2192 Spicy(x))", "completion": "All hotpots are spicy."}
{"prompt": "\u2200x (ProductsOfBakedByMelissa(x) \u2192 Cupcakes(x))", "completion": "All products of Baked by Melissa are cupcakes."}
{"prompt": "Spicy(driedThaiChilies) \u2228 Bakery(driedThaiChilies) \u2192 Hotpot(driedThaiChilies) \u2228 Spicy(driedThaiChilies)", "completion": "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy."}
{"prompt": "ProductsOfBakedByMelissa(driedThaiChilies)", "completion": "Dried Thai chilies are a product of Baked by Melissa."}
{"prompt": "\u00acProductsOfBakedByMelissa(driedThaiChilies)", "completion": "Dried Thai chilies are not a product of Baked by Melissa."}
{"prompt": "Hotpot(driedThaiChilies)", "completion": "Dried Thai chilies are a hotpot."}
{"prompt": "\u00acProductsOfBakedByMelissa(driedThaiChilies) \u2227 \u00acBakery(driedThaiChilies)", "completion": "Dried Thai chilies are neither a product of Baked by Melissa nor a bakery."}
{"prompt": "Cupcake(driedThaiChilies) \u2227 ProductsOfBakedByMelissa(driedThaiChilies)", "completion": "Dried Thai chilies are cupcakes and a product of Baked by Melissa."}
{"prompt": "\u2200x (YelpRecommendation(x) \u2192 \u00acNegativeReview(x))", "completion": "If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews."}
{"prompt": "\u2200x (RatingGreaterThan9(x) \u2192 YelpRecommendation(x))", "completion": "All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations."}
{"prompt": "\u2203x (NoTakeOutService(x) \u2227 NegativeReview(x))", "completion": "Some restaurants that do not provide take-out service receive many negative reviews."}
{"prompt": "\u2200x (PopularAmongLocalResidents(x) \u2192 RatingGreaterThan9(x))", "completion": "All restaurants that are popular among local residents have ratings greater than 9."}
{"prompt": "RatingGreaterThan9(subway) \u2295 PopularAmongLocalResidents(subway)", "completion": "Subway has a rating greater than 9 or is popular among local residents."}
{"prompt": "NoTakeOutService(subway)", "completion": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service."}
{"prompt": "\u00ac(NoTakeOutService(subway) \u2227 NegativeReview(subway))", "completion": "Subway provides take-out service and does not receive many negative reviews."}
{"prompt": "\u00ac(NoTakeOutService(subway) \u2227 NegativeReview(subway)) \u2192 PopularAmongLocalResidents(subway) \u2227 NoTakeOutService(subway)", "completion": "Subway does not provide take-out service."}
{"prompt": "\u2200x \u2200y (SuperheroMovie(x) \u2227 GoodGuy(y) \u2227 AppearsIn(y, x) \u2192 Wins(y))", "completion": "In superhero movies, the good guys always win."}
{"prompt": "SuperheroMovie(surprisingAdventuresofSirDigbyChickenCaesar)", "completion": "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie."}
{"prompt": "\u2200x \u2200y (GoodGuy(x) \u2227 Fights(x, y) \u27f7 BadGuy(y) \u2227 Fights(y, x))", "completion": "Good guys fight bad guys and vice versa."}
{"prompt": "Fights(sirDigby, sirDigbyNemesis)", "completion": "Sir Digby fights his nemesis."}
{"prompt": "\u2200x \u2200y (SuperheroMovie(x), NamedAfter(x, y) \u2192 GoodGuy(y))", "completion": "If a superhero movie is named after a character, that character is a good guy."}
{"prompt": "NamedAfter(surprisingAdventuresofSirDigbyChickenCaesar, sirDigby)", "completion": "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby."}
{"prompt": "\u2200x \u2200y (Fights(x, y) \u2227 Wins(x) \u2192 \u00acWins(y))", "completion": "If somebody wins a fight, the person they are fighting loses."}
{"prompt": "\u2200x \u2200y (SuperheroMovie(x) \u2227 AppearsIn(y, x) \u2192 GoodGuy(y))", "completion": "Sir Digby\u2019s nemesis loses."}
{"prompt": "\u2200x (Book(x) \u2192 Knowledge(x))", "completion": "[BG] Books contain tons of knowledge."}
{"prompt": "\u2200x \u2200y (ReadBook(x, y) \u2192 GainKnowledge(x))", "completion": "[BG] When a person reads a book, that person gains knowledge. "}
{"prompt": "\u2200x (GainKnowledge(x) \u2192 Smarter(x))", "completion": "[BG] If a person gains knowledge, they become smarter."}
{"prompt": "ReadBook(harry, walden) \u2227 Book(walden)", "completion": "Harry read the book \u201cWalden\u201d by Henry Thoreau."}
{"prompt": "Knowledge(walden)", "completion": "Walden contains knowledge."}
{"prompt": "Smarter(harry)", "completion": "Harry is smarter than before."}
{"prompt": "\u2200x (Smarter(x) \u2192 GainKnowledge(x))", "completion": "A person who is smarter has gained knowledge."}
{"prompt": "\u2200x (NLP(x) \u2192 NLG(x) \u2295 NLU(x))", "completion": "Natural language processing tasks can be categorized as either language generation task or language understanding task."}
{"prompt": "\u2200x (NLP(x) \u2227 OutputSequence(x) \u2192 NLG(x))", "completion": "If the output of a natural language processing task is a text sequence, then it is a language generation task."}
{"prompt": "NLP(machineTranslation)", "completion": "Machine translation is a natural language processing task."}
{"prompt": "OutputSequence(machineTranslation)", "completion": "The output of machine translation is a text sequence."}
{"prompt": "NLG(machineTranslation)", "completion": "Machine translation is a language generation task."}
{"prompt": "NLU(machineTranslation)", "completion": "Machine translation is a language understanding task."}
{"prompt": "\u2203x (ManagedBuilding(x) \u2227 AllowPet(x))", "completion": "Pets are allowed in some managed buildings."}
{"prompt": "\u2200x (ManagedBuilding(x) \u2192 RequireDeposit(x))", "completion": "[BG] A deposit is required to rent an apartment in a managed building."}
{"prompt": "\u2200x (Rent2000(x) \u2194 \u00acDepositNoMoreThan1500(x))", "completion": "The security deposit can be either equal to one month's rent or more."}
{"prompt": "\u2200x (Rent2000(x) \u2194 DepositNoLessThan2000(x))", "completion": "Fluffy is Tom's cat."}
{"prompt": "Cat(fluffy)", "completion": "Cats are pets."}
{"prompt": "\u2200x (Cat(x) \u2192 Pet(x))", "completion": "The Olive Garden is a managed building."}
{"prompt": "ManagedBuilding(oliveGarden)", "completion": "The monthly rent at the Olive Garden is $2000."}
{"prompt": "Rent2000(oliveGarden)", "completion": "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500."}
{"prompt": "\u2200x (TomRent(x) \u2194 (ManagedBuilding(x) \u2227 AllowPet(x) \u2227 DepositNoMoreThan1500(x)))", "completion": "2000$ is more than $1500."}
{"prompt": "TomRent(oliveGarden)", "completion": "Tom will rent an apartment in The Olive Garden."}
{"prompt": "AllowPet(oliveGarden)", "completion": "Tom is allowed to move in an apartment in The Olive Garden with Fluffy."}
{"prompt": "DepositNoLessThan2000(oliveGarden)", "completion": "The security deposit at the Olive Garden is either $2000 or more."}
{"prompt": "\u2200x (AnimalsLovedByTourists(x) \u2192 MaxFavoriteAnimals(x))", "completion": "If animals are loved by tourists, then they are Max's favorite animals. "}
{"prompt": " \u2200x (AnimalsFromAustralia(x) \u2192 AnimalsLovedByTourists(x))", "completion": "All animals from Australia are loved by tourists. "}
{"prompt": " \u2200x (Quokka(x) \u2192 AnimalsFromAustralia(x))", "completion": "All quokka are animals from Australia. "}
{"prompt": " \u2200x (MaxFavoriteAnimals(x) \u2192 VeryFluffy(x)) ", "completion": "All of Max's favorite animals are very fluffy."}
{"prompt": " \u2200x (MaxFavoriteAnimals(x) \u2192 LoveToSleep(x))", "completion": "All of Max's favorite animals love to sleep. "}
{"prompt": " VeryFluffy(koala) \u2192 \u00acQuokka(koala)", "completion": "If a koala is very fluffy, then the koala is not a quokka."}
{"prompt": "LoveToSleep(koala)", "completion": "Koalas love to sleep."}
{"prompt": "LoveToSleep(koala) \u2227 Quokka(koala)", "completion": "Koalas love to sleep and are quokka."}
{"prompt": "Quokka(koala) \u2192 LoveToSleep(koala) \u2295 VeryFluffy(koala)", "completion": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy."}
{"prompt": "\u2200x (Kind(x) \u2295 Evil(x))", "completion": "A man is either kind or evil."}
{"prompt": "\u2200x (Ugly(x) \u2192 \u00acHandsome(x))", "completion": "No ugly person is handsome."}
{"prompt": "\u2200x (Evil(x) \u2192 Ugly(x))", "completion": "All evil people are ugly."}
{"prompt": "\u2200x (Gentleman(x) \u2192 Handsome(x))", "completion": "All gentlemen are handsome."}
{"prompt": "\u2200x (CEO(x) \u2192 Gentleman(x))", "completion": "All CEOs are gentlemen."}
{"prompt": "Gentleman(harry)", "completion": "Harry is a gentleman."}
{"prompt": "CEO(harry)", "completion": "Harry is a CEO."}
{"prompt": "Kind(harry) \u2228 CEO(harry)", "completion": "Harry is kind or a CEO."}
{"prompt": "(Evil(harry) \u2227 Ugly(harry)) \u2295 (\u00acEvil(harry) \u2227 \u00acUgly(harry)) \u2192 \u00acKind(harry) \u2227 \u00acCEO(harry)", "completion": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO."}
{"prompt": "\u2200x (TwinTriplet(x) \u2192 Playing(x))", "completion": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings."}
{"prompt": "\u2200x (SameAge(x) \u2192 TwinTriplet(x))", "completion": "If people have siblings who are the same age, then they are twins or triplets."}
{"prompt": "\u2200x (Complain(x) \u2192 SameAge(x))", "completion": "If people complain often about annoying siblings, then they have siblings who are the same age."}
{"prompt": "\u2200x (NotHome(x) \u2192 \u00acStrongBonds(x))", "completion": "If people do not live at home regularly, then they do not develop strong bonds with their family members."}
{"prompt": "\u2200x (Playing(x) \u2192 NotHome(x))", "completion": "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly."}
{"prompt": "(TwinTriplet(luke) \u2227 StrongBonds(luke)) \u2295 (\u00acTwinTriplet(luke) \u2227 \u00acStrongBonds(luke))", "completion": "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   "}
{"prompt": "Playing(luke)", "completion": "Luke spends a lot of time hanging out and playing with his siblings."}
{"prompt": "Complain(luke)", "completion": "Luke complains often about annoying siblings."}
{"prompt": "\u00ac(TwinTriplet(luke) \u2228 Complain(luke))", "completion": "Luke is neither a twin nor triplet nor complains often about annoying siblings."}
{"prompt": "Cost205(gre)", "completion": "It costs US $205 to take the GRE test."}
{"prompt": "\u2200x (Cost205(x) \u2192 CostBelow300(x))", "completion": "ETS provides financial aid to those GRE applicants who prove economic hardship."}
{"prompt": "\u2200x (Hardship(x) \u2192 FinancialAid(x))", "completion": "Economic hardship refers to difficulty caused by having too little money or too few resources."}
{"prompt": "\u2200x (SingleParent(x) \u2228 FewResources(x) \u2192 Hardship(x))", "completion": "Tom lives in a single-parent family."}
{"prompt": "SingleParent(tom)", "completion": "His dad has been out of work for more than a year."}
{"prompt": "FinancialAid(tom)", "completion": "Tom can apply for financial aid from ETS to take the GRE test."}
{"prompt": "CostBelow300(gre)", "completion": "It cost below US $300 to take the GRE test."}
{"prompt": "\u00ac(\u2203x (FinancialAid(x)))", "completion": "There is no financial aid available for the GRE test."}
{"prompt": "\u2200x (Spill(x) \u2192 \u00acTidy(x))", "completion": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning."}
{"prompt": "\u2200x (Foodie(x) \u2192 Spill(x))", "completion": "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing."}
{"prompt": "\u2200x (OnlyChild(x) \u2192 Tidy(x))", "completion": "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning."}
{"prompt": "\u2200x (BusyParents(x) \u2192 OnlyChild(x))", "completion": "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings."}
{"prompt": "\u2200x (HighIncome(x) \u2192 BusyParents(x))", "completion": "All households with a high net income have people who have parents who are very busy with their regular jobs."}
{"prompt": "(Spill(peter) \u2227 OnlyChild(peter)) \u2228 \u00acSpill(peter) \u2227 \u00acOnlyChild(peter))", "completion": "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. "}
{"prompt": "Tidy(peter)", "completion": "Peter tidies his space consistently and enjoys the process of cleaning."}
{"prompt": "Foodie(peter) \u2228 HighIncome(peter)", "completion": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income."}
{"prompt": "(Foodie(peter) \u2227 HighIncome(peter)) \u2228 \u00acFoodie(peter) \u2227 \u00acHighIncome(peter))", "completion": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income."}
{"prompt": "\u2200x (FirTree(x) \u2192 Evergreen(x))", "completion": "All fir trees are evergreens."}
{"prompt": "\u2203x (ObjectOfWorship(x) \u2227 FirTree(x))", "completion": "Some objects of worship are fir trees."}
{"prompt": "\u2203x (Evergreen(x) \u2227 \u00acObjectOfWorship(x))", "completion": "Some evergreens are not objects of worship."}
{"prompt": "MountainRange(picurismountains) \u2227 In(picurismountains, newmexico) \u2228 In(picurismountains, texas)", "completion": "The Picuris Mountains are a mountain range in New Mexico or Texas."}
{"prompt": "Visited(juandeonate, picurismountains)", "completion": "Juan de Onate visited the Picuris Mountains."}
{"prompt": "In(hardingpegmatitemine, picurismountains) \u2227 Mine(hardingpegmatitemine) \u2227 Donated(hardingpegmatitemine)", "completion": "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated."}
{"prompt": "\u2200x \u2200y (Mine(x) \u2227 Donated(x) \u2227 In(x, y) \u2227 MountainRange(y) \u2192 \u00acIn(y, texas))", "completion": "There are no mountain ranges in texas that have mines which have been donated."}
{"prompt": "\u2203x (Visited(juandeonate, x) \u2227 MountainRange(x) \u2227 In(x, newmexico))", "completion": "Juan de Onate visited a mountain range in New Mexico."}
{"prompt": "\u2203x (Visited(juandeonate, x) \u2227 MountainRange(x) \u2227 In(x, texas))", "completion": "Juan de Onate visited a mountain range in Texas."}
{"prompt": "\u2200x (MountainRange(x) \u2227 In(hardingpegmatitemine, x) \u2192 \u00acIn(x, newmexico))", "completion": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico."}
{"prompt": "\u2200x \u2200y (IsMan(x) \u2227 IsMan(y) \u2227 Taller(x, y) \u2192 CanBlock(x, y))", "completion": "If a man is taller than another man, the taller one can block the other's shooting."}
{"prompt": "\u2200x (IsMan(x) \u2227 SameClass(x, michael) \u2227 \u00acBe(x, michael) \u2192 Taller(michael, x))", "completion": "Michael is a man who is taller than everyone else in his class."}
{"prompt": "\u2200x \u2200y \u2200z ((Taller(x, y) \u2227 Taller(y, z)) \u2192 Taller(x, z))", "completion": "If person x is taller than person y, and person y is taller than person z, than x is taller than z"}
{"prompt": "IsMan(peter) \u2227 Taller(peter, michael)", "completion": "Peter is a man who is taller than Michael."}
{"prompt": "\u2200x (\u00acJumpWhenShooting(x) \u2192 CanBlock(michael, x))", "completion": "Michael can block any shooting from a person as long as the person does not jump when shooting."}
{"prompt": "\u00acCanBlock(michael, windy)", "completion": "Michael cannot block Windy's shooting."}
{"prompt": "\u2200x (JumpWhenShooting(x) \u2192 GreatShooter(x))", "completion": "Every shooter who can jump when shooting is a great shooter."}
{"prompt": "\u2203x (IsMan(x) \u2227 SameClass(x, michael) \u2227 \u00acBe(x, michael) \u2227 \u00acTaller(peter, x))", "completion": "Peter is shorter than a man in Michael's class."}
{"prompt": "GreatShooter(windy)", "completion": "Windy is a great shooter."}
{"prompt": "CanBlock(peter, windy)", "completion": "Peter can block Windy's shooting."}
{"prompt": "Cove(barutin) \u2227 NameAfter(barutin, settlement) \u2227 Locate(settlement, bulgaria)", "completion": "Barutin Cove is named after the Bulgarian settlement of Barutin."}
{"prompt": "Locate(barutin, snow)", "completion": "Barutin Cove is on the southwest coast of Snow Island."}
{"prompt": "Locate(snow, shetland) \u2227 Locate(greenwich, shetland) \u2227 Locate(deception, shetland)", "completion": "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island."}
{"prompt": "Locate(shetland, antarctica)", "completion": "The South Shetland Islands are considered part of Antarctica."}
{"prompt": "\u2200x (Locate(x, antarctica) \u2192 NameAfter(barutin, x))", "completion": "Barutin is named after all islands in Antarctica."}
{"prompt": "\u2203x \u2203y (Cove(x) \u2227 NameAfter(x, y) \u2227 Locate(y, bulgaria))", "completion": "There is at least one cove in Antarctica named after a place in Bulgaria."}
{"prompt": "\u00acLocate(barutin, antarctica)", "completion": "Barutin is not located in Antarctica."}
{"prompt": "\u2203x (Affection(x) \u2227 Love(x))", "completion": "Some affection is love."}
{"prompt": "\u2203x (Love(x) \u2227 Positive(x))", "completion": "Some love is positive."}
{"prompt": "\u2203x (Affection(x) \u2227 Positive(x))", "completion": "Some affection is positive."}
{"prompt": "\u2200x (TransportMultiplePassengers(x) \u2192 \u00acEmpty(x))", "completion": "If something can transport multiple passengers, then they are not empty."}
{"prompt": "\u2200x (Airline(x) \u2192 TransportMultiplePassengers(x))", "completion": "All airlines can transport multiple passengers."}
{"prompt": "\u2200x (Plane(x) \u2192 Empty(x))", "completion": "All planes are empty."}
{"prompt": "\u2200x (Boeing707(x) \u2192 Plane(x))", "completion": "All Boeing 707s are planes."}
{"prompt": "\u00acAirline(greyhound) \u2192 \u00ac(Airline(greyhound) \u2228 Plane(greyhound))", "completion": "If Greyhound is not an airline, then there are no Greyhound planes."}
{"prompt": "Airline(greyhound)", "completion": "Greyhound is an airline."}
{"prompt": "Boeing707(greyhound)", "completion": "A Greyhound is a Boeing 707."}
{"prompt": "\u00acBoeing707(greyhound)", "completion": "A Greyhound is not a Boeing 707."}
{"prompt": "\u2200x  (Mammal (x)\u2192  Animal (x))", "completion": "All mammals are animals."}
{"prompt": "\u2200x  (Monkey (x)\u2192  Mammal (x))", "completion": "All monkeys are mammals. "}
{"prompt": "\u2200x ( Monkey (x) \u2228  Bird (x))", "completion": "An animal is either a monkey or a bird."}
{"prompt": "\u2200x  (Bird (x)\u2192  Fly (x))", "completion": "All birds fly."}
{"prompt": "\u2200x  (Fly (x)\u2192  HaveWings (x))", "completion": "If something can fly, then it has wings."}
{"prompt": "\u00ac Fly (rock) \u2227 \u00ac Bird (rock) \u2192 \u00ac Fly (rock) \u2227 \u00ac Breathe (rock) ", "completion": "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes."}
{"prompt": "Monkey(rock)", "completion": "Rock is a monkey."}
{"prompt": "HaveWings(rock)", "completion": "Rock has wings."}
{"prompt": "\u00ac HaveWings(rock)", "completion": "Rock does not have wings."}
{"prompt": "\u2200x (Wedding(x) \u2192 Child(x))", "completion": "All people who have a wedding are people who have at least one child."}
{"prompt": "\u2200x (Paris(x) \u2192 Wedding(x))", "completion": "All people who travel to Paris for their honeymoon are people who have a wedding."}
{"prompt": "\u2200x (July(x) \u2192 Paris(x))", "completion": "All weddings that occur in July belong to people who travel to Paris for their honeymoon."}
{"prompt": "\u2203x (July(x) \u2227 WellAttended(x))", "completion": "Some weddings in July are well-attended."}
{"prompt": "Child(john) \u2192 \u00ac(Paris(john) \u2227 Wedding(john))", "completion": "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding."}
{"prompt": "WellAttended(john) \u2192 July(john) \u2295 Paris(john)", "completion": "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. "}
{"prompt": "WellAttended(john)", "completion": "John has a wedding that is well-attended."}
{"prompt": "\u00acWellAttended(john)", "completion": "John does not have a wedding that is well-attended."}
{"prompt": "Child(john)", "completion": "John has at least one child."}
{"prompt": "\u00ac(WellAttended(john) \u2228 July(john))", "completion": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon."}
{"prompt": "\u2203x (Mammal(x) \u2227 Have(x, teeth))", "completion": "[BG] Some mammals have teeth."}
{"prompt": "\u00acHave(platypus, teeth)", "completion": "Platypus have no teeth."}
{"prompt": "Mammal(platypus)", "completion": "Platypus are mammals. "}
{"prompt": "Have(humans, teeth)", "completion": "Humans have teeth."}
{"prompt": "Mammal(platypus) \u2227 \u00acHave(platypus, teeth)", "completion": "Platypus are mammals with no teeth."}
{"prompt": "Reptile(platypus)", "completion": "Platypus are reptiles."}
{"prompt": "Mammal(humans)", "completion": "Humans are mammals."}
{"prompt": "\u2200x (Plunger(x) \u2192 Suck(x))", "completion": "Plungers suck."}
{"prompt": "\u2200x (Vacuum(x) \u2192 Suck(x))", "completion": "Vacuums suck."}
{"prompt": "\u2200x (Vampire(x) \u2192 Suck(x))", "completion": "Vampires suck."}
{"prompt": "Vacuum(space)", "completion": "Space is a vacuum."}
{"prompt": "HouseHoldApp(duster) \u2227 \u00ac Suck(duster)", "completion": "A duster is a household appliance that doesn't suck."}
{"prompt": "Suck(space)", "completion": "Space sucks."}
{"prompt": "Vampire(space)", "completion": "Space is a vampire."}
{"prompt": "\u2200x (HouseHoldApp(x) \u2192 Suck(x))", "completion": "If something is a household appliance, it sucks."}
{"prompt": "MLAlgorithm(supervisedLearning) \u2228 MLAlgorithm(unsupervisedLearning) \u2228 MLAlgorithm(reinforcementLearning)", "completion": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning."}
{"prompt": "\u00acRequireLabelledData(unsupervisedLearning)", "completion": "Unsupervised learning doesn't require labelled data."}
{"prompt": "TrainTextSumModel(supervisedLearning) \u2228 TrainTextSumModel(unsupervisedLearning) \u2228 TrainTextSumModel(reinforcementLearning)", "completion": "The state-of-the-art text summarization model is trained with machine learning algorithms."}
{"prompt": "\u00acTrainTextSumModel(reinforcementLearning)", "completion": "Reinforcement learning is not used to train the state-of-the-art text summarization model."}
{"prompt": "\u2200x ((MLAlgorithm(x) \u2227 TrainTextSumModel(x)) \u2192 RequireLabelledData(x))", "completion": "The Machine Learning algorithm for training text summarization model requires labelled data."}
{"prompt": "TrainTextSumModel(supervisedLearning)", "completion": "Supervised learning is used to train the state-of-the-art text summarization model."}
{"prompt": "TrainTextSumModel(unsupervisedLearning)", "completion": "Unsupervised learning is used to train the state-of-the-art text summarization model."}
{"prompt": "\u2200x (Funny(x) \u2192 Popular(x))", "completion": "If a cartoon character is funny, then it is popular."}
{"prompt": "\u2200x (Ugly(x) \u2192 \u00acPopular(x))", "completion": "If a cartoon character is ugly, then it is not popular."}
{"prompt": "\u2200x (Love(children, x) \u2192 Funny(x))", "completion": "If a cartoon character is loved by children, then it is funny."}
{"prompt": "\u2200x (Simpsons(x) \u2192 Love(children, x))", "completion": "If a cartoon character is from The Simpsons, then it is loved by children."}
{"prompt": "\u2200x (Yellow(x) \u2192 Simpsons(x))", "completion": "If a cartoon character is yellow, then it is from The Simpsons."}
{"prompt": "Simpsons(ben) \u2295 Funny(ben)", "completion": "Ben is either from The Simpsons or funny."}
{"prompt": "Love(children, ben)", "completion": "Ben is loved by children."}
{"prompt": "Ugly(ben) \u2228 Yellow(ben)", "completion": "Ben is ugly or yellow."}
{"prompt": "(Yellow(ben) \u2227 Ugly(ben)) \u2295 (\u00acYellow(ben) \u2227 \u00acUgly(ben))", "completion": "Ben is either yellow and ugly or neither yellow nor ugly."}
{"prompt": "\u2200x \u2200y (BreedingBack(x, y) \u2192 ArtificiallySelect(x))", "completion": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals."}
{"prompt": "\u2203x \u2203y (HeckCattle(x) \u2227 Aurochs(y) \u2227 BreedingBack(x, y))", "completion": "Heck cattle were bred-back in the 1920s to resemble the aurochs."}
{"prompt": "\u2200x (HeckCattle(x) \u2192 Animal(x))", "completion": "[BG] Heck cattle are animals."}
{"prompt": "\u2200x (Aurochs(x) \u2192 Animal(x))", "completion": "[BG] Aurochs are animals."}
{"prompt": "\u2203x \u2203y (Animal(x) \u2227 Animal(y) \u2227 BreedingBack(x, y) \u2227 Extinct(y))", "completion": "Some animals to be bred-back resemble animals that are extinct."}
{"prompt": "\u2203x (HeckCattle(x) \u2227 ArtificiallySelect(x))", "completion": "Some Heck cattle are artificially selected."}
{"prompt": "\u2200x (Aurochs(x) \u2192 Extinct(x))", "completion": "Aurochs are extinct."}
{"prompt": "\u2200x (Student(x) \u2192 Human(x))", "completion": "All students are humans. "}
{"prompt": "\u2200x (Study(x) \u2192 Student(x))", "completion": "If someone studies, then they are a student."}
{"prompt": "\u2200x (Study(x) \u2228 Teach(x))", "completion": "A person either studys or teaches."}
{"prompt": "\u2200x (Young(x) \u2192 \u00acTeach(x))", "completion": "No young person teaches."}
{"prompt": "\u00acTeach(jerry) \u2227 \u00acManager(jerry)", "completion": "Jerry neither teaches nor is a manager."}
{"prompt": "Young(rose) \u2228 Student(rose)", "completion": "Rose is young or a student."}
{"prompt": "Young(jerry)", "completion": "Jerry is young."}
{"prompt": "\u00acYoung(jerry)", "completion": "Jerry is not young."}
{"prompt": "Human(rose) \u2228 Manager(rose)", "completion": "Rose is a human or a manager."}
{"prompt": "Human(rose) \u2228 Manager(jerry)", "completion": "Rose is a human or Jerry is a manager."}
{"prompt": "\u00ac(Student(rose) \u2227 Human(jerry))", "completion": "It is not true that Rose is a student and Jerry is a human."}
{"prompt": "PublishingHouse(newvesselpress) \u2227 SpecializesIn(newvessel, translatingforeignliteratureintoenglish)", "completion": "New Vessel Press is a publishing house which specializes in translating foreign literature into English."}
{"prompt": "\u2200x (Book(x) \u2227 PublishedBy(x, newvesselpress) \u2192 In(x, english))", "completion": "All of New Vessel Press's published books are in English."}
{"prompt": "Book(neapolitanchronicles) \u2227 PublishedBy(neapolitanchronicles, newvesselpress)", "completion": "Neapolitan Chronicles is a book published by New Vessel Press."}
{"prompt": "TranslatedFrom(neapolitanchronicles, italian)", "completion": "Neapolitan Chronicles was translated from Italian."}
{"prompt": "Book(palaceofflies) \u2227 PublishedBy(palaceofflies, newvesselpress)", "completion": "Palace of Flies is a book published by New Vessel Press."}
{"prompt": "Book(neapolitanchronicles) \u2227 In(neapolitanchronicles, english)", "completion": "Neapolitan Chronicles is an English book."}
{"prompt": "PublishedBy(harrrypotter, newvesselpress)", "completion": "Harry Potter was published by New Vessel Press."}
{"prompt": "TranslatedFrom(palaceofflies, italian)", "completion": "Palace of Flies was translated from Italian."}
{"prompt": "\u2200x (Desktop(x) \u2192 WorkHome(x))", "completion": "If people own a large desktop monitor at their home, then they work regularly and often at home."}
{"prompt": "\u2200x (HomeOffice(x) \u2192 Desktop(x))", "completion": "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home."}
{"prompt": "\u2200x (WorkHome(x) \u2192 Tidying(x))", "completion": "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes."}
{"prompt": "\u2200x (WorkHome(x) \u2192 OfficeStore(x))", "completion": "All people who work regularly and often at home visit the office supply store regularly."}
{"prompt": "\u2200x (Tidying(x) \u2192 \u00acLate(x))", "completion": "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. "}
{"prompt": "(Late(remy) \u2227 Tidying(remy)) \u2295 (\u00acLate(remy) \u2227 \u00acTidying(remy))", "completion": "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. "}
{"prompt": "OfficeStore(remy)", "completion": "Remy visits the office supply store regularly."}
{"prompt": "HomeOffice(remy) \u2227 OfficeStore(remy)", "completion": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly."}
{"prompt": "Late(remy) \u2228 OfficeStore(remy) \u2192 \u00ac(Tidying(remy) \u2228 HomeOffice(remy))", "completion": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office."}
{"prompt": "\u2200x (Human(x) \u2192 Mortal(x))", "completion": "All humans are mortal."}
{"prompt": "\u2200x (Greek(x) \u2192 Human(x))", "completion": "All Greeks are humans."}
{"prompt": "\u2203x (Greek(x) \u2227 Mortal(x))", "completion": "Some Greeks are mortal."}
{"prompt": "\u2200x (WorkLibrary(x) \u2192 \u00acComputerScience(x))", "completion": "No students who work in the library are from the computer science department. "}
{"prompt": "\u2200x (PartTime(x) \u2192 WorkLibrary(x))", "completion": "All students who have part-time jobs offered by the university are students who work in the library. "}
{"prompt": "\u2200x (Database(x) \u2192 ComputerScience(x))", "completion": "All students who take the database course are from the computer science department. "}
{"prompt": "\u2200x (ProfessorDavid(x) \u2192 Database(x))", "completion": "All students instructed by professor David are taking the database course. "}
{"prompt": "\u2200x (WorkInLab(x) \u2192 ProfessorDavid(x))", "completion": "All students working in the lab are instructed by professor David. "}
{"prompt": "WorkInLab(james)", "completion": "James is a student working in the lab. "}
{"prompt": "\u00acPartTime(jack) \u2227 \u00acWorkInLab(jack)", "completion": "Jack neither has a part-time job offered by the university nor works in the lab. "}
{"prompt": "PartTime(james)", "completion": "James has a part-time job offered by the university."}
{"prompt": "\u00acPartTime(james)", "completion": "James does not have a part-time job offered by the university."}
{"prompt": "Database(james) \u2295 PartTime(james)", "completion": "James either takes the database course or has a part-time job offered by the university."}
{"prompt": "Database(jack)", "completion": "Jack takes the database course."}
{"prompt": "LikesMusic(george) \u2192 WantsToCompose(george)", "completion": "If George likes music, he wants to compose."}
{"prompt": "AccesstoProgram(george) \u2192 CanCompose(george)", "completion": "If George has access to a program, he can compose."}
{"prompt": "(WantsToCompose(george) \u2227 CanCompose(george)) \u2192 WillCompose(george)", "completion": "If George can compose and wants to compose, he will compose."}
{"prompt": "(LikesMusic(george) \u2227 AccesstoProgram(george)) \u2192 WillCompose(george)", "completion": "If George likes music and has access to a program, he will compose."}
{"prompt": "\u00acWantsToCompose(george) \u2192 \u00acWillCompose(george)", "completion": "If George will not compose, George can not compose."}
{"prompt": "\u2200x (Hawk(x) \u2192 \u00acLands(x))", "completion": "A hawk never lands. "}
{"prompt": "\u2203x (Bird(x) \u2227 Hawk(x))", "completion": "Some birds are hawks."}
{"prompt": "\u2200x (Bird(x) \u2192 Lands(x))", "completion": "All birds land"}
{"prompt": "\u2203x (Mondayat8(x) \u2227 RoseGivenOutOnTv(x))", "completion": "On some Mondays at 8 pm, roses are given out on TV."}
{"prompt": "\u2200x (RoseGivenOutOnTv(x) \u2192 OnBachelor(x))", "completion": "Every rose given out on TV is on the Bachelor."}
{"prompt": "\u2200x (OnBachelor(x) \u2192 PortrayLiveOfRealPeople(x))", "completion": "Everything on the Bachelor portrays the lives of real people."}
{"prompt": "\u2200x (PortrayLiveOfRealPeople(x) \u2192 RealityTVShow(x))", "completion": "All shows portraying the lives of real people are reality TV shows."}
{"prompt": "\u00acRealityTVShow(breakingbad)", "completion": "Breaking Bad is not a reality TV show."}
{"prompt": "Mondayat8(breakingbad)", "completion": "Breaking Bad is on Monday at 8 pm."}
{"prompt": "Mondayat8(breakingbad) \u2227 RoseGivenOutOnTv(breakingbad)", "completion": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm."}
{"prompt": "RoseGivenOutOnTv(breakingbad) \u2192 Mondayat8(breakingbad)", "completion": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm."}
{"prompt": "From(heinrichScmidt, naziGermany) \u2227 Politician(heinrichScmidt)", "completion": "Heinrich Scmidt was a Nazi German politician. "}
{"prompt": "Member(heinrichScmidt, prussianStateParliament) \u2227 Member(heinrichScmidt, naziReichstag)", "completion": "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."}
{"prompt": "From(heinrichScmidt, naziGermany) \u2228 From(heinrichScmidt, russia)", "completion": "Heinrich Schmidt was either German or Russian."}
{"prompt": "\u2203x (From(x, naziGermany) \u2227 Politician(x) \u2227 Member(x, prussianStateParliament) \u2227 Member(x, naziReichstag))", "completion": "Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag."}
{"prompt": "\u2200x (Politician(x) \u2192 \u00acMember(x, naziReichstag))", "completion": "No politicans are part of the Nazi Reichstag."}
{"prompt": "\u2200x (DeadlyDiseases(x) \u2192 SurvivalRateIsLow(x))", "completion": "If something is a deadly disease, then its survival rate is low. "}
{"prompt": "\u2200x (SevereCancer(x) \u2192 DeadlyDiseases(x))", "completion": "All severe cancers are deadly diseases."}
{"prompt": "\u2200x (BileDuctCancer(x) \u2192 SevereCancer(x))", "completion": "Bile duct cancer is a severe cancer. "}
{"prompt": "\u2200x (Cholangiocarcinoma(x) \u2192 BileDuctCancer(x))", "completion": "All Cholangiocarcinoma is bile duct cancer."}
{"prompt": "\u2200x (MildFlu(x) \u2192 \u00acSurvivalRateIsLow(x)) ", "completion": "No one with mild flu has a low survival rate."}
{"prompt": "BileDuctCancer(colorectalCancer) \u2228 SurvivalRateIsLow(colorectalCancer) \u2192 \u00acBileDuctCancer(colorectalCancer)", "completion": "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer."}
{"prompt": "SevereCancer(colorectalCancer)", "completion": "Colorectal cancer is a severe cancer"}
{"prompt": "BileDuctCancer(colorectalCancer) \u2228 Cholangiocarcinoma(colorectalCancer) \u2192 BileDuctCancer(colorectalCancer) \u2227 MildFlu(colorectalCancer)", "completion": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu."}
{"prompt": "\u00acMildFlu(colorectalCancer) \u2228 \u00acCholangiocarcinoma(colorectalCancer) \u2192 BileDuctCancer(colorectalCancer) \u2228 Cholangiocarcinoma(colorectalCancer)", "completion": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma."}
{"prompt": "\u2200x (Salad(x) \u2192 HealthyHabits(x))", "completion": "All people who eat salads regularly are very conscious about their health and eating habits."}
{"prompt": "\u2200x (HealthyChildhood(x) \u2192 Salad(x))", "completion": "All people who grew up in health-conscious childhood homes eat salads regularly."}
{"prompt": "\u2200x (Nutritional(x) \u2192 HealthyChildhood(x))", "completion": "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes."}
{"prompt": "\u2200x (GoodRelationship(x) \u2192 \u00acHealthyHabits(x))", "completion": "If people have good relationships with their parents, then they fulfill their nutritional daily intakes."}
{"prompt": "\u2200x (Gym(x) \u2192 Nutritional(x))", "completion": "If people have good relationships with their parents, then they do not eat salads regularly."}
{"prompt": "(HealthyChildhood(taylor) \u2227 GoodRelationship(taylor)) \u2228 \u00acHealthyChildhood(taylor) \u2227 \u00acGoodRelationship(marcy)", "completion": "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes."}
{"prompt": "Salad(taylor)", "completion": "Taylor eats salads regularly."}
{"prompt": "Gym(taylor)", "completion": "Taylor visits the gym at least once a day."}
{"prompt": "\u00ac(HealthyChildhood(taylor) \u2228 Gym(taylor))", "completion": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day."}
{"prompt": "SportingEvent(olympics)", "completion": "[BG] The Olympic games is a sporting event. "}
{"prompt": "LastOlympics(tokyo)", "completion": "The last Olympic games was in Tokyo."}
{"prompt": "MostMedals(unitedStates, tokyo)", "completion": "The United States won the most medals in Tokyo. "}
{"prompt": "SportingEvent(champs)", "completion": "The world championships is a sporting event."}
{"prompt": "\u00acLastOlympics(tokyo)", "completion": "The last Olympic games were not in Tokyo."}
{"prompt": "\u2203x (LastOlympics(x) \u2227 MostMedals(unitedStates, x))", "completion": "The United States won the most medals in the last Olympic games."}
{"prompt": "\u2200x (Horse(x) \u2192 Hooves(x))", "completion": "All horses have hooves."}
{"prompt": "\u2200x (Human(x) \u2192 \u00acHooves(x))", "completion": "No humans have hooves."}
{"prompt": "\u2203x (Human(x) \u2227 Horse(x))", "completion": "Some humans are horses."}
{"prompt": "FlyTo(susan, lga)", "completion": "Susan flies to LGA airport."}
{"prompt": "\u2200x \u2200y (FlyFrom(x, y) \u2295 FlyTo(x, y))", "completion": "The departure and arrival can not be the same airport."}
{"prompt": "FlyFrom(john, lga)", "completion": "John flies from LGA airport."}
{"prompt": "FlyFrom(susan, lga)", "completion": "Susan flies from LGA airport."}
{"prompt": "FlyTo(john, lga)", "completion": "John flies to LGA airport."}
{"prompt": "\u2200x (Nice(x) \u2192 \u00acMean(x))", "completion": "No one nice to animals is mean to animals."}
{"prompt": "\u2203x (Grumpy(x) \u2227 Mean(x))", "completion": "Some grumpy people are mean to animals."}
{"prompt": "\u2200x (AnimalLover(x) \u2192 Nice(x))", "completion": "All animal lovers are nice to animals."}
{"prompt": "\u2200x (PetOwner(x) \u2192 AnimalLover(x))", "completion": "If someone owns a pet, then they love animals."}
{"prompt": "PetOwner(tom)", "completion": "Tom is a pet owner."}
{"prompt": "Grumpy(tom)", "completion": "Tom is a grumpy person."}
{"prompt": "\u00ac(Grumpy(tom) \u2227 Mean(tom))", "completion": "Tom is not a grumpy person and mean to animals."}
{"prompt": "\u00ac(Grumpy(tom) \u2227 Mean(tom)) \u2192 \u00ac(Grumpy(tom) \u2228 AnimalLover(tom))", "completion": "If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover."}
{"prompt": "\u2200x (IsPodcast(x) \u2192 \u00acIsNovel(x))", "completion": "A podcast is not a novel."}
{"prompt": "\u2200x \u2203y (BornIn(x, y) \u2227 IsCity(y) \u2227 IsAmerican(y) \u2192 IsAmerican(x))", "completion": "[BG] If a person is born in American City, the person is American."}
{"prompt": "\u2200x \u2200y (IsNovel(x) \u2227 WrittenBy(x, y) \u2192 WritesNovel(y))", "completion": "[BG] If a book is novel and it is written by a person, then the person is a novel writer."}
{"prompt": "IsAmerican(dani_Shapiro) \u2227 IsWriter(dani_Shapiro)", "completion": "Dani Shapiro is an American writer."}
{"prompt": "WrittenBy(family_History, dani_Shapiro)", "completion": "Family History is written by Dani Shapiro."}
{"prompt": "IsNovel(family_History) \u2227 WrittenIn(family_History, y2003)", "completion": "Family History is a novel written in 2003."}
{"prompt": "IsPodcast(family_Secrets) \u2227 CreatedBy(family_Secrets, dani_Shapiro)", "completion": "Dani Shapiro created a podcast called Family Secrets."}
{"prompt": "IsCity(boston) \u2227 IsAmerican(boston)", "completion": "[BG] Boston is an American city."}
{"prompt": "WritesNovel(dani_Shapiro)", "completion": "Dani Shapiro is a novel writer."}
{"prompt": "IsNovel(family_Secrets)", "completion": "Family Secrets is a novel."}
{"prompt": "BornIn(dani_Shapiro, boston)", "completion": "Dani Shapiro was born in Boston."}
{"prompt": "\u2203x (BasketballPlayer(x) \u2227 \u00acAmerican(x))", "completion": "Some basketball players are not American."}
{"prompt": "\u2200x (BasketballPlayer(x) \u2192 Tall(x))", "completion": "All basketball players are tall."}
{"prompt": "\u2200x (Tall(x) \u2192 WearLargeShoes(x))", "completion": "If someone is tall, they wear large shoes."}
{"prompt": "\u2200x (WearLargeShoes(x) \u2192 WearLargeClothes(x))", "completion": "If someone wears large shoes, they wear large-sized clothes."}
{"prompt": "\u00acWearLargeClothes(yuri)", "completion": "Yuri does not wear large-size clothes."}
{"prompt": "American(yuri)", "completion": "Yuri is an American."}
{"prompt": "\u00ac(American(yuri) \u2227 BasketballPlayer(yuri))", "completion": "Yuri is not an American basketball player."}
{"prompt": "American(yuri) \u2227 BasketballPlayer(yuri)", "completion": "Yuri is an American basketball player."}
{"prompt": "\u00acWearLargeShoes(yuri) \u2192 (American(yuri) \u2227 BasketballPlayer(yuri))", "completion": "If Yuri does not wear large shoes, then Yuri is an American basketball player."}
{"prompt": "\u00ac(American(yuri) \u2227 BasketballPlayer(yuri)) \u2192 BasketballPlayer(yuri)", "completion": "If Yuri is not an American basketball player, then Yuri is a basketball player."}
{"prompt": "\u2200x (Event(x) \u2192 Happy(x) \u2295 Sad(x))", "completion": "Events are either happy or sad."}
{"prompt": "\u2203x (Event(x) \u2227 Happy(x)) ", "completion": "At least one event is happy. "}
{"prompt": "\u2200x (Event(x) \u2192 Sad(x))", "completion": "All events are sad."}
{"prompt": "Winner(maurier, steinhauer)", "completion": "The winner of the 1992 du Maurier Classic was Steinhauer."}
{"prompt": "Participate(maurier, steinhauer)", "completion": "Steinhauer participated in the 1992 du Maurier Classic."}
{"prompt": "\u2203x (LeaderBoard(maurier, x) \u2227 SixWayTie(x) \u2227 Belgium(x))", "completion": "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium."}
{"prompt": "Belgium(descampe) \u2227 LeaderBoard(maurier, descampe)", "completion": "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic."}
{"prompt": "\u2200x (LeaderBoard(maurier, x) \u2192 Participate(maurier, x))", "completion": "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."}
{"prompt": "\u00acWinner(maurier, steinhauer)", "completion": "Steinhauer was not the winner of the 1992 du Maurier Classic."}
{"prompt": "SixWayTie(descampe)", "completion": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic."}
{"prompt": "\u2200x (Bark(x) \u2192 \u00acLike(jane, x))", "completion": "If an animal barks, then Jane does not like it."}
{"prompt": "\u2200x (Dog(x) \u2192 Bark(x))", "completion": "All dogs are animals that bark."}
{"prompt": "\u2200x (Jump(x) \u2192 Like(jane, x))", "completion": "If an animal jumps, then Jane likes it."}
{"prompt": "\u2200x (HaveLegs(x) \u2192 Jump(x))", "completion": "If an animal has legs, then it jumps."}
{"prompt": "\u2200x (Terricolous(x) \u2192 HaveLegs(x))", "completion": "If an animal is terricolous, then it has legs. "}
{"prompt": "(\u00acJump(kiki) \u2227 \u00acHaveLegs(kiki)) \u2192 (Terricolous(kiki) \u2228 HaveLegs(kiki))", "completion": "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."}
{"prompt": "Terricolous(kiki)", "completion": "KiKi is terricolous."}
{"prompt": "Bark(kiki) \u2227 Dog(kiki)", "completion": "KiKi barks and is a dog."}
{"prompt": "\u00acBark(kiki) \u2227 \u00acDog(kiki)", "completion": "KiKi neither barks nor is a dog."}
{"prompt": "BornIn(ailtonsilva, y1995) \u2227 CommonlyKnownAs(ailtonsilva, ailton)", "completion": "Ailton Silva, born in 1995, is commonly known as Ailton."}
{"prompt": "FootballPlayer(ailton) \u2227 LoanedTo(ailton, braga)", "completion": "Ailton is a football player who was loaned out to Braga."}
{"prompt": "Brazilian(ailtonsilva) \u2227 Footballplayer(ailtonsilva) \u2227 PlaysFor(ailtonsilva, nautico)", "completion": "Ailton Silva is a Brazillian footballer who plays for Nautico."}
{"prompt": "FootballClub(nautico) \u2227 FootballClub(braga)", "completion": "Nautico is a football club along with Braga."}
{"prompt": "FootballClub(fluminense)", "completion": "Fluminense is a football club."}
{"prompt": "\u2200x (PlaysFor(x, nautico) \u2192 \u00acBrazilian(x))", "completion": "No one playing for Nautico is Brazilian."}
{"prompt": "\u2200x (FootballClub(x) \u2192 \u00acPlaysFor(ailtonsilva, x))", "completion": "Ailton Silva foes not play for a football club."}
{"prompt": "\u2200x (FootballClub(x) \u2192 \u00acLoanedTo(ailton, x))", "completion": "Ailton was not loaned out to a football club."}
{"prompt": "PlaysFor(ailtonsilva, fluminense)", "completion": "Ailton Silva played for Fluminense."}
{"prompt": "\u2203x (FootballClub(x) \u2227 LoanedTo(ailtonsilva, x))", "completion": "Ailton Silva was loaned out to a football club."}
